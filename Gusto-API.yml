openapi: 3.0.0
info:
  title: Gusto API
  description: |-
    Welcome to Gusto's Embedded Payroll API documentation!

    Contact Support:
     Name: Developer Relations
     Email: developer@gusto.com
  version: 1.0.0
servers:
  - url: http://{{baseurl}}
components:
  securitySchemes:
    apikeyAuth:
      type: http
      scheme: apikey
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []
tags:
  - name: User
  - name: Company
  - name: Company > Companies
  - name: Company > Locations
  - name: Company > Bank Accounts
  - name: Company > Payment Configs
  - name: Company > Company Forms
  - name: Company > Company Benefits
  - name: Company > Federal Tax Details
  - name: Company > Industry Selection
  - name: Company > Signatories
  - name: Flows
  - name: Payroll
  - name: Payroll > Pay Schedules
  - name: Payroll > Earning Types
  - name: Payroll > Payrolls
  - name: Payroll > External Payrolls
  - name: W2 Employees
  - name: W2 Employees > Employees
  - name: W2 Employees > Employee Tax Setup
  - name: W2 Employees > Employee Payment Method
  - name: W2 Employees > Employee Employments
  - name: W2 Employees > Employee Addresses
  - name: W2 Employees > Jobs and Compensations
  - name: W2 Employees > Employee Forms
  - name: W2 Employees > Employee Benefits
  - name: W2 Employees > Garnishments
  - name: 1099 Contractors
  - name: 1099 Contractors > Contractor Payment Method
  - name: 1099 Contractors > Contractor Payments
  - name: 1099 Contractors > Contractors
  - name: 1099 Contractors > Contractor Forms
  - name: Tax Requirements
  - name: Time Off Policies
  - name: Holiday Pay Policies
  - name: Departments
  - name: Generated Documents
  - name: Notifications
  - name: Webhooks
  - name: Events
  - name: Invoices
  - name: Recovery Cases
  - name: ACH Transactions
paths:
  /oauth/token:
    post:
      tags:
        - User
      summary: Refresh access token
      description: >-
        Exchange a refresh token for a new access token.


        The previous `refresh_token` will be revoked on the first usage of the
        new `access_token`.


        The `expires_in` value is provided in seconds from when the
        `access_token` was generated.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                client_id: <string>
                client_secret: <string>
                grant_type: <string>
                refresh_token: <string>
                redirect_uri: <string>
      security:
        - apikeyAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                access_token: 737HdeXfIqgx-NfaUFRuhV7JDe6ns6ptanJSMuQzjlc
                token_type: bearer
                expires_in: 7200
                refresh_token: iEjL96L9Pndwmi-xVX3Q-xbrvvhnjHYGX87sopgGJ8E
                scope: ach_transactions:read benefits:read companies:read
                created_at: '2023-09-12T16:42:25.000-07:00'
  /v1/me:
    get:
      tags:
        - User
      summary: Get the current user
      description: >-
        Returns information pertaining to the user associated with the provided
        access token.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 2107f55f-8b07-4e97-8596-8dfbe9420ef7
                id: 5
                email: hayden_schuppe@bernhard.name
                roles:
                  payroll_admin:
                    companies:
                      - id: 3
                        uuid: bffd4a21-7835-41a2-b41a-d691fbf12944
                        name: Volkman LLC
                        trade_name: Gibson LLC
                        tier: concierge
                        is_partner_managed: false
                        locations:
                          - id: 4
                            street_1: 3121 Milky Way
                            street_2: ''
                            city: San Francisco
                            state: CA
                            zip: '94107'
                            country: USA
                            active: true
  /v1/partner_managed_companies:
    post:
      tags:
        - Company > Companies
      summary: Create a partner managed company
      description: >-
        Create a partner managed company. When you successfully call the API, it
        does the following:

        * Creates a new company in Gusto

        * Creates a new user using the provided email if the user does not
        already exist.

        * Makes the user the primary payroll administrator of the new company.


        In response, you will receive oauth access tokens for the created
        company.


        > 📘 Token Authentication

        >

        > This endpoint uses the [organization level api token and the Token
        scheme with HTTP Authorization
        header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).


        scope: `partner_managed_companies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                user:
                  first_name: <string>
                  last_name: <string>
                  email: <string>
                  phone: <string>
                company:
                  name: <string>
                  trade_name: <string>
                  ein: <string>
      security:
        - apikeyAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                access_token: >-
                  de6780bc506a0446309bd9362820ba8aed28aa506c71eedbe1c5c4f9dd350e54
                refresh_token: >-
                  8257e65c97202ed1726cf9571600918f3bffb2544b26e00a61df9897668c33a1
                company_uuid: d525dd21-ba6e-482c-be15-c2c7237f1364
                expires_in: 7200
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}:
    get:
      tags:
        - Company > Companies
      summary: Get a company
      description: |-
        Get a company.

        scope: `companies:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                ein: 00-0000001
                entity_type: C-Corporation
                tier: core
                is_suspended: false
                company_status: Approved
                id: 7756341740978008
                uuid: c7a07c73-a703-4462-9343-1b181182b6e0
                name: Shoppe Studios LLC
                trade_name: Record Shoppe
                is_partner_managed: false
                pay_schedule_type: by_department
                join_date: '2023-03-01'
                funding_type: ach
                locations:
                  - id: 7757727716657803
                    street_1: 412 Kiera Stravenue
                    street_2: Suite 391
                    city: San Francisco
                    state: CA
                    zip: '94107'
                    country: USA
                    active: true
                  - id: 7757727716657804
                    street_1: 644 Fay Vista
                    street_2: Suite 842
                    city: Richmond
                    state: VA
                    zip: '23218'
                    country: USA
                    active: true
                compensations:
                  hourly:
                    - name: Overtime
                      multiple: 1.5
                    - name: Double overtime
                      multiple: 2
                    - name: Regular
                      multiple: 1
                    - name: Outstanding vacation
                      multiple: 1
                    - name: Holiday
                      multiple: 1
                    - name: Emergency sick - self care
                      multiple: 1
                    - name: Emergency sick - caring for others
                      multiple: 1
                    - name: FMLA Public Health Emergency Leave
                      multiple: 1
                    - name: Regular Hours
                      multiple: 1
                  fixed:
                    - name: Bonus
                    - name: Commission
                    - name: Paycheck Tips
                    - name: Cash Tips
                    - name: Correction Payment
                    - name: Severance
                    - name: Minimum Wage Adjustment
                    - name: Reimbursement
                  paid_time_off:
                    - name: Vacation Hours
                    - name: Sick Hours
                    - name: Holiday Hours
                primary_signatory:
                  first_name: Alda
                  middle_initial: ''
                  last_name: Carter
                  phone: 1-565-710-7558
                  email: louie.hessel7757869450111547@zemlak.biz
                  home_address:
                    street_1: 524 Roob Divide
                    street_2: Suite 565
                    city: San Francisco
                    state: CA
                    zip: '94107'
                    country: USA
                primary_payroll_admin:
                  first_name: Ian
                  last_name: Labadie
                  phone: 1-565-710-7559
                  email: louie.hessel7757869450111547@zemlak.biz
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/partner_managed_companies/{company_uuid}/migrate:
    put:
      tags:
        - Company > Companies
      summary: Migrate company to embedded payroll
      description: >-
        Migrate an existing Gusto customer to your embedded payroll product.


        To use this endpoint, the customer will need to connect their Gusto
        account to your application using
        [OAuth2](https://docs.gusto.com/embedded-payroll/docs/oauth2) then view
        and [accept the Embedded Payroll Terms of
        Service](https://docs.gusto.com/embedded-payroll/reference/post-partner-managed-companies-company_uuid-accept_terms_of_service).


        scope: `partner_managed_companies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: <string>
                ip_address: <string>
                external_user_id: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                company_uuid: 39abf9b9-650b-4e67-89a0-389dc6ee8a71
                migration_status: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/partner_managed_companies/{company_uuid}/accept_terms_of_service:
    post:
      tags:
        - Company > Companies
      summary: Accept terms of service for a company user
      description: >-
        Accept the Gusto Embedded Payroll's [Terms of
        Service](https://flows.gusto.com/terms).

        The user must have a role in the company in order to accept the Terms of
        Service.


        scope: `terms_of_services:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: <string>
                ip_address: <string>
                external_user_id: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                latest_terms_accepted: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/partner_managed_companies/{company_uuid}/retrieve_terms_of_service:
    post:
      tags:
        - Company > Companies
      summary: Retrieve terms of service status for a company user
      description: >-
        Retrieve the user acceptance status of the Gusto Embedded Payroll's
        [Terms of Service](https://flows.gusto.com/terms).


        scope: `terms_of_services:read`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                latest_terms_accepted: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/admins:
    post:
      tags:
        - Company > Companies
      summary: Create an admin for the company
      description: >-
        Creates a new admin for a company.

        If the email matches an existing user, this will create an admin account
        for the current user. Otherwise, this will create a new user.


        scope: `company_admin:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                first_name: <string>
                last_name: <string>
                email: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                first_name: John
                last_name: Smith
                email: jsmith99@gmail.com
                uuid: 5de11791-98fd-4587-9ed0-d5d804b8e647
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Company > Companies
      summary: Get all the admins at a company
      description: |-
        Returns a list of all the admins at a company

        scope: `company_admin:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - first_name: Katherine
                  last_name: Johnson
                  email: Katherine@acmecorp.com
                  uuid: 987058cc-23ee-46e9-81ef-5cee086cceca
                - first_name: Anita
                  last_name: Borg
                  email: Anita@acmecorp.com
                  uuid: 5de11791-98fd-4587-9ed0-d5d804b8e647
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_uuid}/onboarding_status:
    get:
      tags:
        - Company > Companies
      summary: Get the company's onboarding status
      description: >-
        Get company's onboarding status.

        The data returned helps inform the required onboarding steps and
        respective completion status.


        scope: `company_onboarding_status:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c44d66dc-c41b-4a60-9e25-5e93ff8583f2
                onboarding_completed: false
                onboarding_steps:
                  - title: Add Your Company's Addresses
                    id: add_addresses
                    required: true
                    completed: true
                    skippable: false
                    requirements: []
                  - title: Enter Your Federal Tax Information
                    id: federal_tax_setup
                    required: true
                    completed: true
                    skippable: false
                    requirements: []
                  - title: Select Industry
                    id: select_industry
                    required: true
                    completed: true
                    skippable: false
                    requirements:
                      - add_addresses
                      - add_employees
                  - title: Add Your Bank Account
                    id: add_bank_info
                    required: true
                    completed: true
                    skippable: false
                    requirements: []
                  - title: Add Your Employees
                    id: add_employees
                    required: true
                    completed: true
                    skippable: true
                    requirements:
                      - add_addresses
                  - title: Enter Your State Tax Information
                    id: state_setup
                    required: true
                    completed: false
                    skippable: false
                    requirements:
                      - add_addresses
                      - add_employees
                  - title: Select a Pay Schedule
                    id: payroll_schedule
                    required: true
                    completed: false
                    skippable: false
                    requirements: []
                  - title: Sign Documents
                    id: sign_all_forms
                    required: true
                    completed: false
                    skippable: false
                    requirements:
                      - add_employees
                      - federal_tax_setup
                      - state_setup
                      - add_bank_info
                      - payroll_schedule
                  - title: Verify Your Bank Account
                    id: verify_bank_info
                    required: true
                    completed: false
                    skippable: false
                    requirements:
                      - add_bank_info
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_uuid}/finish_onboarding:
    put:
      tags:
        - Company > Companies
      summary: Finish company onboarding
      description: >-
        Finalize a given company's onboarding process.


        ### Approve a company in demo

        After a company is finished onboarding, Gusto requires an additional
        step to review and approve that company.

        In production environments, this step is required for risk-analysis
        purposes.


        We provide the endpoint `PUT '/v1/companies/{company_uuid}/approve'` to
        facilitate company approvals in the demo environment.


        ```shell

        PUT '/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/approve'


        # Response: Company object, with company_status: 'Approved'

        ```


        scope: `companies:write`
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c44d66dc-c41b-4a60-9e25-5e93ff8583f2
                onboarding_completed: false
                onboarding_steps:
                  - title: Add Your Company's Addresses
                    id: add_addresses
                    required: true
                    completed: true
                    skippable: false
                    requirements: []
                  - title: Enter Your Federal Tax Information
                    id: federal_tax_setup
                    required: true
                    completed: true
                    skippable: false
                    requirements: []
                  - title: Select Industry
                    id: select_industry
                    required: true
                    completed: true
                    skippable: false
                    requirements:
                      - add_addresses
                      - add_employees
                  - title: Add Your Bank Account
                    id: add_bank_info
                    required: true
                    completed: true
                    skippable: false
                    requirements: []
                  - title: Add Your Employees
                    id: add_employees
                    required: true
                    completed: true
                    skippable: true
                    requirements:
                      - add_addresses
                  - title: Enter Your State Tax Information
                    id: state_setup
                    required: true
                    completed: false
                    skippable: false
                    requirements:
                      - add_addresses
                      - add_employees
                  - title: Select a Pay Schedule
                    id: payroll_schedule
                    required: true
                    completed: false
                    skippable: false
                    requirements: []
                  - title: Sign Documents
                    id: sign_all_forms
                    required: true
                    completed: false
                    skippable: false
                    requirements:
                      - add_employees
                      - federal_tax_setup
                      - state_setup
                      - add_bank_info
                      - payroll_schedule
                  - title: Verify Your Bank Account
                    id: verify_bank_info
                    required: true
                    completed: false
                    skippable: false
                    requirements:
                      - add_bank_info
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/custom_fields:
    get:
      tags:
        - Company > Companies
      summary: Get the custom fields of a company
      description: >-
        Returns a list of the custom fields of the company. Useful when you need
        to know the schema of custom fields for an entire company


        scope: `companies:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                custom_fields:
                  - uuid: ea7e5d57-6abb-47d7-b654-347c142886c0
                    id: ea7e5d57-6abb-47d7-b654-347c142886c0
                    name: employee_level
                    description: Employee Level
                    type: text
                    selection_options: null
                  - uuid: 299650e4-e970-4acf-9bf0-6f05585d20ba
                    id: 299650e4-e970-4acf-9bf0-6f05585d20ba
                    name: t-shirt size
                    description: What is your t-shirt size?
                    type: text
                    selection_options: null
                  - uuid: 024ec137-6c92-43a3-b061-14a9720531d6
                    id: 024ec137-6c92-43a3-b061-14a9720531d6
                    name: favorite fruit
                    description: Which is your favorite fruit?
                    type: radio
                    selection_options:
                      - apple
                      - banana
                      - orange
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/locations:
    post:
      tags:
        - Company > Locations
      summary: Create a company location
      description: >-
        Company locations represent all addresses associated with a company.
        These can be filing addresses, mailing addresses, and/or work locations;
        one address may serve multiple, or all, purposes.


        Since all company locations are subsets of locations, retrieving or
        updating an individual record should be done via the locations
        endpoints.


        scope: `companies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                phone_number: <string>
                street_1: <string>
                city: <string>
                state: <string>
                zip: <string>
                street_2: <string>
                country: USA
                mailing_address: <boolean>
                filing_address: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                company_id: 7756341740978008
                company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                version: 7d9753112507b9dda4fb97910f39b06e
                phone_number: '5825710808'
                id: 7757727716657803
                uuid: 04552eb9-7829-4b18-ae96-6983552948df
                street_1: 412 Kiera Stravenue
                street_2: Suite 391
                city: San Francisco
                state: CA
                zip: '94107'
                country: USA
                active: true
                filing_address: false
                mailing_address: false
                created_at: '2023-09-12T16:42:25.000-07:00'
                updated_at: '2023-09-12T16:42:25.000-07:00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Company > Locations
      summary: Get company locations
      description: >-
        Company locations represent all addresses associated with a company.
        These can be filing addresses, mailing addresses, and/or work locations;
        one address may serve multiple, or all, purposes.


        Since all company locations are subsets of locations, retrieving or
        updating an individual record should be done via the locations
        endpoints.


        scope: `companies:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - company_id: 7756341740978008
                  company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                  version: 7d9753112507b9dda4fb97910f39b06e
                  phone_number: '5825710808'
                  id: 7757727716657803
                  uuid: 04552eb9-7829-4b18-ae96-6983552948df
                  street_1: 412 Kiera Stravenue
                  street_2: Suite 391
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                  active: true
                  filing_address: false
                  mailing_address: false
                  created_at: '2023-09-12T16:42:25.000-07:00'
                  updated_at: '2023-09-12T16:42:25.000-07:00'
                - company_id: 7756341740978008
                  company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                  version: 15e6b9680e00f3122729e64e3cef3224
                  phone_number: '2866070827'
                  id: 7757727716657804
                  uuid: fa94a2fd-11a8-4024-87ff-85c587d9d2b4
                  street_1: 644 Fay Vista
                  street_2: Suite 842
                  city: Richmond
                  state: VA
                  zip: '23218'
                  country: USA
                  active: true
                  filing_address: false
                  mailing_address: false
                  created_at: '2023-09-12T16:42:25.000-07:00'
                  updated_at: '2023-09-12T16:42:25.000-07:00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/locations/{location_id}:
    get:
      tags:
        - Company > Locations
      summary: Get a location
      description: |-
        Get a location.

        scope: `companies:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: location_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the location
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                company_id: 7756341740978008
                company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                version: 7d9753112507b9dda4fb97910f39b06e
                phone_number: '5825710808'
                id: 7757727716657803
                uuid: 04552eb9-7829-4b18-ae96-6983552948df
                street_1: 412 Kiera Stravenue
                street_2: Suite 391
                city: San Francisco
                state: CA
                zip: '94107'
                country: USA
                active: true
                filing_address: false
                mailing_address: false
                created_at: '2023-09-12T16:42:25.000-07:00'
                updated_at: '2023-09-12T16:42:25.000-07:00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Company > Locations
      summary: Update a location
      description: |-
        Update a location.

        scope: `companies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                phone_number: <string>
                street_1: <string>
                street_2: <string>
                city: <string>
                state: <string>
                zip: <string>
                country: <string>
                mailing_address: <boolean>
                filing_address: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: location_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the location
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                company_id: 7756341740978008
                company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                version: 7d9753112507b9dda4fb97910f39b06e
                phone_number: '5825710808'
                id: 7757727716657803
                uuid: 04552eb9-7829-4b18-ae96-6983552948df
                street_1: 412 Kiera Stravenue
                street_2: Suite 391
                city: San Francisco
                state: CA
                zip: '94107'
                country: USA
                active: true
                filing_address: false
                mailing_address: false
                created_at: '2023-09-12T16:42:25.000-07:00'
                updated_at: '2023-09-12T16:42:25.000-07:00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/locations/{location_uuid}/minimum_wages:
    get:
      tags:
        - Company > Locations
      summary: Get minimum wages for a location
      description: |-
        Get minimum wages for a location

        scope: `companies:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: effective_date
          in: query
          schema:
            type: string
          example: <string>
        - name: location_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the location
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 70c523ff-c71e-4474-9c83-a4ea51bd54a8
                  authority: State
                  wage: '13.0'
                  wage_type: Regular
                  effective_date: '2022-01-01'
                  notes: Employers with 6 or more employees
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/bank_accounts:
    post:
      tags:
        - Company > Bank Accounts
      summary: Create a company bank account
      description: >-
        This endpoint creates a new company bank account.


        Upon being created, two verification deposits are automatically sent to
        the bank account, and the bank account's verification_status is
        'awaiting_deposits'. 


        When the deposits are successfully transferred, the verification_status
        changes to 'ready_for_verification', at which point the verify endpoint
        can be used to verify the bank account.

        After successful verification, the bank account's verification_status is
        'verified'.


        scope: `company_bank_accounts:write`


        > 🚧 Warning

        >

        > If a default bank account exists, it will be disabled and the new bank
        account will replace it as the company's default funding method.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                routing_number: <string>
                account_number: <string>
                account_type: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 1263eae5-4411-48d9-bd6d-18ed93082e65
                company_uuid: e2c4c0ce-2986-48b9-86cf-ec27f6ed9a36
                account_type: Checking
                routing_number: '851070439'
                hidden_account_number: XXXX4087
                verification_status: verified
                verification_type: bank_deposits
                name: Employer Funding Account
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Company > Bank Accounts
      summary: Get all company bank accounts
      description: >-
        Returns company bank accounts. Currently, we only support a single
        default bank account per company.


        scope: `company_bank_accounts:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 1263eae5-4411-48d9-bd6d-18ed93082e65
                  company_uuid: e2c4c0ce-2986-48b9-86cf-ec27f6ed9a36
                  account_type: Checking
                  routing_number: '851070439'
                  hidden_account_number: XXXX4087
                  verification_status: verified
                  verification_type: bank_deposits
                  name: Employer Funding Account
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/verify:
    put:
      tags:
        - Company > Bank Accounts
      summary: Verify a company bank account
      description: >-
        Verify a company bank account by confirming the two micro-deposits sent
        to the bank account. Note that the order of the two deposits specified
        in request parameters does not matter. There's a maximum of 5
        verification attempts, after which we will automatically initiate a new
        set of micro-deposits and require the bank account to be verified with
        the new micro-deposits.


        ### Bank account verification in demo


        We provide the endpoint `POST
        '/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/send_test_deposits'`
        to facilitate bank account verification in the demo environment. This
        endpoint simulates the micro-deposits transfer and returns them in the
        response. You can call this endpoint as many times as you wish to
        retrieve the values of the two micro deposits.


        ```
          POST '/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/bank_accounts/ade55e57-4800-4059-9ecd-fa29cfeb6dd2/send_test_deposits'

          {
            "deposit_1": 0.02,
            "deposit_2": 0.42
          }
        ```


        scope: `company_bank_accounts:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                deposit_1: <number>
                deposit_2: <number>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: bank_account_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the bank account
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 1263eae5-4411-48d9-bd6d-18ed93082e65
                company_uuid: e2c4c0ce-2986-48b9-86cf-ec27f6ed9a36
                account_type: Checking
                routing_number: '851070439'
                hidden_account_number: XXXX4087
                verification_status: verified
                verification_type: bank_deposits
                name: Employer Funding Account
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/plaid/processor_token:
    post:
      tags:
        - Company > Bank Accounts
      summary: Create a bank account from a plaid processor token
      description: >-
        This endpoint creates a new **verified** bank account by using a plaid
        processor token to retrieve its information.


        scope: `plaid_processor:write`


        > 📘

        > To create a token please use the [plaid
        api](https://plaid.com/docs/api/processors/#processortokencreate) and
        select "gusto" as processor.


        > 🚧 Warning - Company Bank Accounts

        >

        > If a default company bank account exists, it will be disabled and the
        new bank account will replace it as the company's default funding
        method.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                owner_type: <string>
                owner_id: <string>
                processor_token: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 1263eae5-4411-48d9-bd6d-18ed93082e65
                company_uuid: e2c4c0ce-2986-48b9-86cf-ec27f6ed9a36
                account_type: Checking
                routing_number: '851070439'
                hidden_account_number: XXXX4087
                verification_status: verified
                verification_type: plaid_external
                name: Employer Funding Account
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/payment_configs:
    get:
      tags:
        - Company > Payment Configs
      summary: Get a company's payment configs
      description: >-
        Get payment speed for the company and fast payment limit (1-day is only
        applicable to partners that opt in).


        scope: `company_payment_configs:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                company_uuid: 423dd616-6dbc-4724-938a-403f6217a933
                partner_uuid: 556f05d0-48e0-4c47-bce5-db9aea923043
                fast_payment_limit: '5000'
                payment_speed: 2-day
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Company > Payment Configs
      summary: Update a company's payment configs
      description: >-
        Update payment speed and fast payment limit for a company. At least one
        of `payment_speed` or `fast_payment_limit` parameters is required. 1-day
        option is only applicable to partners that opt in.


        scope: `company_payment_configs:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                fast_payment_limit: <string>
                payment_speed: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                company_uuid: 423dd616-6dbc-4724-938a-403f6217a933
                partner_uuid: 556f05d0-48e0-4c47-bce5-db9aea923043
                fast_payment_limit: '5000'
                payment_speed: 2-day
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/forms:
    get:
      tags:
        - Company > Company Forms
      summary: Get all company forms
      description: |-
        Get a list of all company's forms

        scope: `company_forms:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                  name: company_direct_deposit
                  title: Direct Deposit Authorization
                  description: >-
                    We need you to sign paperwork to authorize us to debit and
                    credit your bank account and file and pay your taxes.
                  draft: false
                  requires_signing: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/forms/{form_id}:
    get:
      tags:
        - Company > Company Forms
      summary: Get a company form
      description: |-
        Get a company form

        scope: `company_forms:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: form_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the form
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                name: company_direct_deposit
                title: Direct Deposit Authorization
                description: >-
                  We need you to sign paperwork to authorize us to debit and
                  credit your bank account and file and pay your taxes.
                draft: false
                requires_signing: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/forms/{form_id}/pdf:
    get:
      tags:
        - Company > Company Forms
      summary: Get a company form pdf
      description: |-
        Get the link to the form PDF

        scope: `company_forms:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: form_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the form
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                document_url: >-
                  https://app.gusto-demo.com/assets/forms/7757842065202782/original/company_direct_deposit20211007-48226-gsqo8k.pdf?1633667020
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/forms/{form_id}/sign:
    put:
      tags:
        - Company > Company Forms
      summary: Sign a company form
      description: |-
        Sign a company form

        scope: `company_forms:sign`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                signature_text: <string>
                agree: <boolean>
                signed_by_ip_address: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: form_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the form
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                name: company_direct_deposit
                title: Direct Deposit Authorization
                description: >-
                  We need you to sign paperwork to authorize us to debit and
                  credit your bank account and file and pay your taxes.
                draft: false
                requires_signing: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/company_benefits:
    post:
      tags:
        - Company > Company Benefits
      summary: Create a company benefit
      description: >-
        Company benefits represent the benefits that a company is offering to
        employees. This ties together a particular supported benefit with the
        company-specific information for the offering of that benefit.


        Note that company benefits can be deactivated only when no employees are
        enrolled.


        scope: `company_benefits:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                benefit_id: <number>
                description: <string>
                active: true
                responsible_for_employer_taxes: <boolean>
                responsible_for_employee_w2: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1363316536327004
                uuid: d2cec746-caee-464a-bcaf-00d93f7049c9
                version: 98jr3289h3298hr9329gf9egskt3kagri32qqgiqe3872
                company_id: 1363316537128394
                benefit_id: 1
                benefit_type: 1
                active: true
                description: Kaiser Permanente
                deletable: true
                supports_percentage_amounts: true
                responsible_for_employer_taxes: false
                responsible_for_employee_w2: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Company > Company Benefits
      summary: Get benefits for a company
      description: >-
        Company benefits represent the benefits that a company is offering to
        employees. This ties together a particular supported benefit with the
        company-specific information for the offering of that benefit.


        Note that company benefits can be deactivated only when no employees are
        enrolled.


        Benefits containing PHI are only visible to applications with the
        `company_benefits:read:phi` scope.


        scope: `company_benefits:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: enrollment_count
          in: query
          schema:
            type: string
          description: Whether to return employee enrollment count
          example: <boolean>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 1363316536327004
                  uuid: d2cec746-caee-464a-bcaf-00d93f7049c9
                  version: 98jr3289h3298hr9329gf9egskt3kagri32qqgiqe3872
                  company_id: 1363316537128394
                  benefit_id: 1
                  benefit_type: 1
                  active: true
                  description: Kaiser Permanente
                  deletable: true
                  supports_percentage_amounts: true
                  responsible_for_employer_taxes: false
                  responsible_for_employee_w2: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/company_benefits/{company_benefit_id}:
    get:
      tags:
        - Company > Company Benefits
      summary: Get a company benefit
      description: >-
        Company benefits represent the benefits that a company is offering to
        employees. This ties together a particular supported benefit with the
        company-specific information for the offering of that benefit.


        Note that company benefits can be deactivated only when no employees are
        enrolled.


        Benefits containing PHI are only visible to applications with the
        `company_benefits:read:phi` scope.


        scope: `company_benefits:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: with_employee_benefits
          in: query
          schema:
            type: string
          description: Whether to return employee benefits associated with the benefit
          example: <boolean>
        - name: company_benefit_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the company benefit
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1363316536327004
                uuid: d2cec746-caee-464a-bcaf-00d93f7049c9
                version: 98jr3289h3298hr9329gf9egskt3kagri32qqgiqe3872
                company_id: 1363316537128394
                benefit_id: 1
                benefit_type: 1
                active: true
                description: Kaiser Permanente
                deletable: true
                supports_percentage_amounts: true
                responsible_for_employer_taxes: false
                responsible_for_employee_w2: false
                employee_benefits:
                  - employee_uuid: ae44a0b2-3c89-41e1-91c8-5f8224a779ca
                    company_benefit_uuid: d2cec746-caee-464a-bcaf-00d93f7049c9
                    active: true
                    deduct_as_percentage: false
                    employee_deduction: 3
                    company_contribution: 0
                    uuid: 9988f241-9aee-4383-bfca-eac79cf58135
                    contribution:
                      type: amount
                      value: 0
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Company > Company Benefits
      summary: Update a company benefit
      description: >-
        Company benefits represent the benefits that a company is offering to
        employees. This ties together a particular supported benefit with the
        company-specific information for the offering of that benefit.


        Note that company benefits can be deactivated only when no employees are
        enrolled.


        scope: `company_benefits:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                active: <boolean>
                description: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_benefit_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the company benefit
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1363316536327004
                uuid: d2cec746-caee-464a-bcaf-00d93f7049c9
                version: 98jr3289h3298hr9329gf9egskt3kagri32qqgiqe3872
                company_id: 1363316537128394
                benefit_id: 1
                benefit_type: 1
                active: true
                description: Kaiser Permanente
                deletable: true
                supports_percentage_amounts: true
                responsible_for_employer_taxes: false
                responsible_for_employee_w2: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - Company > Company Benefits
      summary: Delete a company benefit
      description: |-
        The following must be true in order to delete a company benefit
          - There are no employee benefits associated with the company benefit
          - There are no payroll items associated with the company benefit
          - The benefit is not managed by a Partner or by Gusto (type must be 'External')

        scope: `company_benefits:write`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_benefit_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the company benefit
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  base:
                    - type: error type
                      message: This is an error message
                      full_message: This is a more descriptive error message
  /v1/benefits:
    get:
      tags:
        - Company > Company Benefits
      summary: Get all benefits supported by Gusto
      description: >-
        Returns all benefits supported by Gusto.


        The benefit object in Gusto contains high level information about a
        particular benefit type and its tax considerations. When companies
        choose to offer a benefit, they are creating a Company Benefit object
        associated with a particular benefit.


        scope: `benefits:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 1
                  benefit_type: 1
                  name: Medical Insurance
                  description: Deductions and contributions for Medical Insurance
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: true
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 2
                  benefit_type: 2
                  name: Dental Insurance
                  description: Deductions and contributions for Dental Insurance
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: true
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 3
                  benefit_type: 3
                  name: Vision Insurance
                  description: Deductions and contributions for Vision Insurance
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: true
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 6
                  benefit_type: 6
                  name: Health Savings Account
                  description: >-
                    Health Savings Accounts (HSA) allow employees to be
                    reimbursed for qualified medical expenses. Contributions are
                    pre-tax and lower the total amount of tax paid by employees
                    and the employer. Employers may also make tax-free
                    contributions to employees' HSA. Remaining balances are
                    carried over in next year.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: true
                  category: Health
                - id: 7
                  benefit_type: 7
                  name: Health FSA
                  description: >-
                    Flexible Spending Accounts (FSA) allow employees to be
                    reimbursed for qualified medical expenses. Contributions are
                    pre-tax and lower the total amount of tax paid by employees
                    and the employer. Employers may also make tax-free
                    contributions to employees' FSA. Remaining balances are not
                    carried over in next year.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: true
                  category: Health
                - id: 11
                  benefit_type: 11
                  name: Dependent Care FSA
                  description: >-
                    Dependent Care FSA reimburses employees for expenses to care
                    for dependents while the employee is at work (e.g.
                    Daycares). Contributions are pre-tax and lower the total
                    amount of tax paid by employees and the employer. Employers
                    may also make tax-free contributions to employee FSA.
                    Remaining balances are not carried over to the next year.
                    Single parents or Married couples filing a joint return can
                    elect up to $5000 per year. Married couples filing separate
                    returns are limited to $2500 elections each.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: true
                  category: Health
                - id: 8
                  benefit_type: 8
                  name: SIMPLE IRA
                  description: >-
                    The SIMPLE IRA is a tax-deferred retirement savings plan for
                    employees. It is often used by small businesses as an
                    alternative to 401(k) due to its relatively low operating
                    cost. Employers are required to contribute a specific
                    percentage to an employee's SIMPLE IRA.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: true
                  yearly_limit: true
                  category: Savings and Retirement
                - id: 105
                  benefit_type: 105
                  name: Roth 401(k)
                  description: >-
                    Roth 401(k) is an after-tax savings plan for employees. The
                    standard maximum is $18,000, or $24,000 for employees over
                    50 years old.
                  pretax: false
                  posttax: true
                  imputed: false
                  healthcare: false
                  retirement: true
                  yearly_limit: true
                  category: Savings and Retirement
                - id: 110
                  benefit_type: 110
                  name: Roth 403(b)
                  description: >-
                    Roth 403(b) is an after-tax savings plan for certain
                    clerics, employees of public schools, and employees of other
                    types of tax-exempt organizations. Contributions made by
                    employees are taxable for federal and state withholding.
                    Often, employers contribute additional pre-tax dollars to
                    the employee’s Roth account to encourage saving for
                    retirement.
                  pretax: false
                  posttax: true
                  imputed: false
                  healthcare: false
                  retirement: true
                  yearly_limit: true
                  category: Savings and Retirement
                - id: 5
                  benefit_type: 5
                  name: 401(k)
                  description: >-
                    401(k) is tax-deferred retirement savings plan for
                    employees. The standard maximum is $18,000, or $24,000 for
                    employees over 50 years old.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: true
                  yearly_limit: true
                  category: Savings and Retirement
                - id: 9
                  benefit_type: 9
                  name: 403(b)
                  description: >-
                    403(b) is tax-deferred retirement savings plan for certain
                    clerics, employees of public schools, and employees of other
                    types of tax-exempt organizations.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: true
                  yearly_limit: true
                  category: Savings and Retirement
                - id: 108
                  benefit_type: 108
                  name: SEP-IRA
                  description: >-
                    A SEP-IRA is a pre-tax retirement savings plan where only
                    the employer contributes. It is often used by small
                    businesses as an alternative to 401(k) due to its relatively
                    low operating cost. Employers are required to contribute the
                    same percentage to all enrolled employees, with a maximum
                    contribution of 25% of the employee’s compensation.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: true
                  yearly_limit: true
                  category: Savings and Retirement
                - id: 109
                  benefit_type: 109
                  name: SARSEP
                  description: >-
                    A SARSEP is a pre-tax retirement savings plan used by small
                    businesses as an alternative to 401(k) due to its relatively
                    low operating cost. While new SARSEP plans are not
                    available, there are still some companies that are
                    grandfathered into the plan. Employers are required to
                    contribute the same percentage to all enrolled employees,
                    with a maximum contribution of 25% of the employee’s
                    compensation.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: true
                  yearly_limit: true
                  category: Savings and Retirement
                - id: 107
                  benefit_type: 107
                  name: Group-Term Life Insurance
                  description: >-
                    Group-Term Life Insurance for coverage in excess of $50,000
                    per employee is a taxable fringe benefit. See IRS
                    Publication 15-B to determine the dollar value of the excess
                    coverage.
                  pretax: false
                  posttax: true
                  imputed: true
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 10
                  benefit_type: 10
                  name: Commuter Benefits (pre-tax)
                  description: >-
                    Tax-free commuter benefits for transit, vanpooling,
                    bicycling, and work-related parking costs. The annual
                    maximum contribution for this pre-tax benefit is in the IRS
                    publication 15-B.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Transportation
                - id: 106
                  benefit_type: 106
                  name: Personal Use of Company Car
                  description: >-
                    When an employee uses a company-owned car for personal
                    matters, it is considered taxable benefit provided in-kind.
                  pretax: false
                  posttax: true
                  imputed: true
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Transportation
                - id: 111
                  benefit_type: 111
                  name: 529 College Savings
                  description: >-
                    529 College Savings is an after-tax savings plan for
                    employees designed to encourage saving for future college
                    costs. This benefit should be reported as a taxable benefit
                    and will therefore be taxed.
                  pretax: false
                  posttax: true
                  imputed: true
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Other
                - id: 112
                  benefit_type: 112
                  name: Student Loan Repayment
                  description: >-
                    Student Loan Repayment is an after-tax savings plan for
                    employees to pay towards their outstanding student loans. An
                    employee can choose to set aside after-tax dollars towards
                    this benefit. These benefits should be reported as a taxable
                    benefit and will therefore be taxed.
                  pretax: false
                  posttax: true
                  imputed: true
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Other
                - id: 998
                  benefit_type: 998
                  name: Short Term Disability (post-tax)
                  description: >-
                    Third Party Disability or Third Party Leave are policies
                    offered by employers that pay an employee for a specific
                    life event (maternity leave, injury). All payments made to
                    employees come from a third-party, such as an insurer. For
                    more information on the taxation of these plans, please
                    refer to publication 15-A for more details.
                  pretax: false
                  posttax: true
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 999
                  benefit_type: 999
                  name: Long Term Disability (post-tax)
                  description: >-
                    Third Party Disability or Third Party Leave are policies
                    offered by employers that pay an employee for a specific
                    life event (maternity leave, injury). All payments made to
                    employees come from a third-party, such as an insurer. For
                    more information on the taxation of these plans, please
                    refer to publication 15-A for more details.
                  pretax: false
                  posttax: true
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 996
                  benefit_type: 996
                  name: Short Term Disability (pre-tax)
                  description: >-
                    Third Party Disability or Third Party Leave are policies
                    offered by employers that pay an employee for a specific
                    life event (maternity leave, injury). All payments made to
                    employees come from a third-party, such as an insurer. For
                    more information on the taxation of these plans, please
                    refer to publication 15-A for more details.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 997
                  benefit_type: 997
                  name: Long Term Disability (pre-tax)
                  description: >-
                    Third Party Disability or Third Party Leave are policies
                    offered by employers that pay an employee for a specific
                    life event (maternity leave, injury). All payments made to
                    employees come from a third-party, such as an insurer. For
                    more information on the taxation of these plans, please
                    refer to publication 15-A for more details.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 991
                  benefit_type: 991
                  name: Voluntary Short Term Disability (post-tax)
                  description: >-
                    Third Party Disability or Third Party Leave are policies
                    offered by employers that pay an employee for a specific
                    life event (maternity leave, injury). All payments made to
                    employees come from a third-party, such as an insurer. For
                    more information on the taxation of these plans, please
                    refer to publication 15-A for more details.
                  pretax: false
                  posttax: true
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 992
                  benefit_type: 992
                  name: Voluntary Long Term Disability (post-tax)
                  description: >-
                    Third Party Disability or Third Party Leave are policies
                    offered by employers that pay an employee for a specific
                    life event (maternity leave, injury). All payments made to
                    employees come from a third-party, such as an insurer. For
                    more information on the taxation of these plans, please
                    refer to publication 15-A for more details.
                  pretax: false
                  posttax: true
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 993
                  benefit_type: 993
                  name: Voluntary Life (post-tax)
                  description: >-
                    Third Party Disability or Third Party Leave are policies
                    offered by employers that pay an employee for a specific
                    life event (maternity leave, injury). All payments made to
                    employees come from a third-party, such as an insurer. For
                    more information on the taxation of these plans, please
                    refer to publication 15-A for more details.
                  pretax: false
                  posttax: true
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Health
                - id: 113
                  benefit_type: 113
                  name: Commuter Parking
                  description: >-
                    Tax-free commuter benefits allow employees to reduce their
                    monthly commuting expenses for transit, carpooling,
                    bicycling, and work-related parking costs. Please note that
                    there is an annual maximum for this pre-tax benefit. The
                    maximum dollar amount is found in IRS Publication 15-B.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Transportation
                - id: 114
                  benefit_type: 114
                  name: Commuter Transit
                  description: >-
                    Tax-free commuter benefits allow employees to reduce their
                    monthly commuting expenses for transit, carpooling,
                    bicycling, and work-related parking costs. Please note that
                    there is an annual maximum for this pre-tax benefit. The
                    maximum dollar amount is found in IRS Publication 15-B.
                  pretax: true
                  posttax: false
                  imputed: false
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Transportation
                - id: 100
                  benefit_type: 100
                  name: Other (taxable)
                  description: Other taxable benefit
                  pretax: false
                  posttax: true
                  imputed: true
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Other
                - id: 201
                  benefit_type: 201
                  name: Cell Phone (taxable)
                  description: >-
                    Employer-sponsored benefits like this are called fringe
                    benefits, and they don’t get special tax treatment—they’ll
                    be reported as taxable wages on your employees’ paystubs.
                  pretax: false
                  posttax: true
                  imputed: true
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Transportation
                - id: 202
                  benefit_type: 202
                  name: Gym & Fitness (taxable)
                  description: >-
                    Employer-sponsored benefits like this are called fringe
                    benefits, and they don’t get special tax treatment—they’ll
                    be reported as taxable wages on your employees’ paystubs.
                  pretax: false
                  posttax: true
                  imputed: true
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Transportation
                - id: 203
                  benefit_type: 203
                  name: Housing (taxable)
                  description: >-
                    Employer-sponsored benefits like this are called fringe
                    benefits, and they don’t get special tax treatment—they’ll
                    be reported as taxable wages on your employees’ paystubs.
                  pretax: false
                  posttax: true
                  imputed: true
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Transportation
                - id: 204
                  benefit_type: 204
                  name: Wellness (taxable)
                  description: >-
                    Employer-sponsored benefits like this are called fringe
                    benefits, and they don’t get special tax treatment—they’ll
                    be reported as taxable wages on your employees’ paystubs.
                  pretax: false
                  posttax: true
                  imputed: true
                  healthcare: false
                  retirement: false
                  yearly_limit: false
                  category: Transportation
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/benefits/{benefit_id}:
    get:
      tags:
        - Company > Company Benefits
      summary: Get a supported benefit by ID
      description: >-
        Returns a benefit supported by Gusto.


        The benefit object in Gusto contains high level information about a
        particular benefit type and its tax considerations. When companies
        choose to offer a benefit, they are creating a Company Benefit object
        associated with a particular benefit.


        scope: `benefits:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: benefit_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the benefit type in Gusto.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1
                benefit_type: 1
                name: Medical Insurance
                description: Deductions and contributions for Medical Insurance
                pretax: true
                posttax: false
                imputed: false
                healthcare: true
                retirement: false
                yearly_limit: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/company_benefits/{company_benefit_id}/summary:
    get:
      tags:
        - Company > Company Benefits
      summary: Get company benefit summary by company benefit id.
      description: >-
        Returns summary benefit data for the requested company benefit id.


        Benefits containing PHI are only visible to applications with the
        `company_benefits:read:phi` scope.


        scope: `company_benefits:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: start_date
          in: query
          schema:
            type: string
          description: The start date for which to retrieve company benefit summary
          example: <string>
        - name: end_date
          in: query
          schema:
            type: string
          description: The end date for which to retrieve company benefit summary
          example: <string>
        - name: detailed
          in: query
          schema:
            type: string
          description: Display employee payroll item summary
          example: <boolean>
        - name: company_benefit_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the company benefit
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                start_date: '2022-01-01'
                end_date: '2022-12-31'
                description: Simple IRA
                company_benefit_deduction: 60
                company_benefit_contribution: 30
                employees:
                  - id: 13
                    uuid: 54b7114f-f5e2-4f4b-911b-5cd5ad9032b0
                    company_benefit_deduction: 60
                    company_benefit_contribution: 30
                    benefit_deduction: 660
                    benefit_contribution: 330
                    gross_pay: 18000
                    payroll_benefits:
                      - payroll_id: 52
                        payroll_uuid: 8cc3471b-9da5-47df-88ea-f238c7cb968b
                        payroll_type: Regular
                        check_date: '2022-03-01'
                        gross_pay: 3000
                        company_benefit_deduction: 10
                        company_benefit_contribution: 5
                        pay_period:
                          start_date: '2022-02-01'
                          end_date: '2022-02-28'
                      - payroll_id: 53
                        payroll_uuid: d9d92786-722b-4bf7-bb32-79140418d349
                        payroll_type: Bonus
                        check_date: '2022-12-31'
                        gross_pay: 3000
                        company_benefit_deduction: 20
                        company_benefit_contribution: 10
                        pay_period:
                          start_date: nil
                          end_date: nil
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/benefits/{benefit_id}/requirements:
    get:
      tags:
        - Company > Company Benefits
      summary: Get benefit fields requirements by ID
      description: |-
        Returns field requirements for the requested benefit type.

        scope: `benefits:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: benefit_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the benefit type in Gusto.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                employee_deduction:
                  required: true
                  editable: true
                  default_value: null
                  choices: null
                contribution:
                  required: true
                  editable: true
                  default_value:
                    type: percentage
                    value: 2
                  choices:
                    - percentage
                deduct_as_percentage:
                  required: true
                  editable: true
                  default_value: null
                  choices: null
                catch_up:
                  required: true
                  editable: true
                  default_value: null
                  choices: null
                limit_option:
                  required: false
                  editable: false
                  default_value: null
                  choices: null
                company_contribution_annual_maximum:
                  required: false
                  editable: false
                  default_value: null
                  choices: null
                coverage_salary_multiplier:
                  required: false
                  editable: false
                  default_value: null
                  choices: null
                coverage_amount:
                  required: false
                  editable: false
                  default_value: null
                  choices: null
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/federal_tax_details:
    get:
      tags:
        - Company > Federal Tax Details
      summary: Get Federal Tax Details
      description: |-
        Fetches attributes relevant for a company's federal taxes.

        scope: `company_federal_taxes:read`
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: string
                tax_payer_type: string
                taxable_as_scorp: false
                filing_form: string
                has_ein: true
                ein_verified: true
                legal_name: string
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Company > Federal Tax Details
      summary: Update Federal Tax Details
      description: >-
        Updates attributes relevant for a company's federal taxes.

        This information is required is to onboard a company for use with Gusto
        Embedded Payroll.


        scope: `company_federal_taxes:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                legal_name: <string>
                ein: <string>
                tax_payer_type: <string>
                filing_form: <string>
                taxable_as_scorp: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: string
                tax_payer_type: string
                taxable_as_scorp: false
                filing_form: string
                has_ein: true
                ein_verified: true
                legal_name: string
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/industry_selection:
    get:
      tags:
        - Company > Industry Selection
      summary: Get a company industry selection
      description: |-
        Get industry selection for the company.

        scope: `companies:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                company_uuid: 423dd616-6dbc-4724-938a-403f6217a933
                naics_code: '611420'
                sic_codes:
                  - '8243'
                title: Computer Training
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Company > Industry Selection
      summary: Update a company industry selection
      description: >-
        Update the company industry selection by passing in industry
        classification codes: [NAICS code](https://www.naics.com), [SICS
        code](https://siccode.com/) and industry title. Our UI is leveraging
        [Middesk API](https://docs.middesk.com/reference/introduction) to
        determine industry classification codes.


        scope: `companies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: <string>
                naics_code: <string>
                sic_codes:
                  - <string>
                  - <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                company_uuid: 423dd616-6dbc-4724-938a-403f6217a933
                naics_code: '611420'
                sic_codes:
                  - '8243'
                title: Computer Training
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/signatories:
    post:
      tags:
        - Company > Signatories
      summary: Create a signatory
      description: >-
        Create a company signatory with complete information.

        A signatory can legally sign forms once the identity verification
        process is successful.


        scope: `signatories:manage`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                ssn: <string>
                first_name: <string>
                last_name: <string>
                email: <string>
                title: <string>
                birthday: <string>
                home_address:
                  street_1: <string>
                  city: <string>
                  state: <string>
                  zip: <string>
                  street_2: <string>
                phone: <string>
                middle_initial: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: f8c653dc-0094-41fb-8670-45d6399afade
                first_name: Bob
                last_name: Johnson
                title: Owner
                phone: '4239879876'
                birthday: '2002-10-31'
                email: olin.okuneva@denesik.us
                is_admin: false
                has_ssn: true
                version: 49ea586f528411f5cfadfd54452b2423
                home_address:
                  street_1: 524 Roob Divide
                  street_2: Suite 565
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                identity_verification_status: Skipped
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Company > Signatories
      summary: Get all company signatories
      description: >-
        Returns company signatories. Currently we only support a single
        signatory per company.


        scope: `signatories:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: f8c653dc-0094-41fb-8670-45d6399afade
                  first_name: Bob
                  last_name: Johnson
                  title: Owner
                  phone: '4239879876'
                  birthday: '2002-10-31'
                  email: olin.okuneva@denesik.us
                  is_admin: false
                  has_ssn: true
                  version: 49ea586f528411f5cfadfd54452b2423
                  home_address:
                    street_1: 524 Roob Divide
                    street_2: Suite 565
                    city: San Francisco
                    state: CA
                    zip: '94107'
                    country: USA
                  identity_verification_status: Skipped
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_uuid}/signatories/invite:
    post:
      tags:
        - Company > Signatories
      summary: Invite a signatory
      description: >-
        Create a signatory with minimal information. This signatory can be
        invited to provide more information through the `PUT
        /v1/companies/{company_uuid}/signatories/{signatory_uuid}` endpoint.
        This will start the identity verification process and allow the
        signatory to be verified to sign documents.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: <string>
                first_name: <string>
                last_name: <string>
                title: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: f8c653dc-0094-41fb-8670-45d6399afade
                first_name: Bob
                last_name: Johnson
                title: Owner
                phone: '4239879876'
                birthday: '2002-10-31'
                email: olin.okuneva@denesik.us
                is_admin: false
                has_ssn: true
                version: 49ea586f528411f5cfadfd54452b2423
                home_address:
                  street_1: 524 Roob Divide
                  street_2: Suite 565
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                identity_verification_status: Skipped
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/signatories/{signatory_uuid}:
    put:
      tags:
        - Company > Signatories
      summary: Update a signatory
      description: >-
        Update a signatory that has been either invited or created. If the
        signatory has been created with minimal information through the `POST
        /v1/companies/{company_uuid}/signatories/invite` endpoint, then the
        first update must contain all attributes specified in the request body
        in order to start the identity verification process.


        scope: `signatories:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                first_name: <string>
                middle_initial: <string>
                last_name: <string>
                title: <string>
                phone: <string>
                birthday: <string>
                ssn: <string>
                home_address:
                  street_1: <string>
                  street_2: <string>
                  city: <string>
                  state: <string>
                  zip: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
        - name: signatory_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the signatory
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: f8c653dc-0094-41fb-8670-45d6399afade
                first_name: Bob
                last_name: Johnson
                title: Owner
                phone: '4239879876'
                birthday: '2002-10-31'
                email: olin.okuneva@denesik.us
                is_admin: false
                has_ssn: true
                version: 49ea586f528411f5cfadfd54452b2423
                home_address:
                  street_1: 524 Roob Divide
                  street_2: Suite 565
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                identity_verification_status: Skipped
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - Company > Signatories
      summary: Delete a signatory
      description: |-
        Delete a company signatory.

        scope: `signatories:manage`
      parameters:
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
        - name: signatory_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the signatory
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_uuid}/flows:
    post:
      tags:
        - Flows
      summary: Create a flow
      description: >-
        Generate a link to access a pre-built workflow in Gusto white-label UI.
        For security, all generated flows will expire within 1 hour of
        inactivity or 24 hours from creation time, whichever comes first.


        scope: `flows:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                flow_type: <string>
                entity_uuid: <string>
                entity_type: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                url: >-
                  https://flows.gusto-demo.com/flows/lO2BHHAMCScPVV9G5WEURW0Im_nP9mGYloQgjUWbenQ
                expires_at: '2021-12-28 04:25:48'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/pay_schedules:
    post:
      tags:
        - Payroll > Pay Schedules
      summary: Create a new single pay schedule
      description: >-
        Creates a new single default pay schedule for the company.


        This creates one pay schedule during company onboarding and cannot be
        used if the company has processed a payroll. Creating multiple pay
        schedules at this time is not supported. To change a pay schedule, the
        end user will need to login to Gusto to edit their pay schedule.


        Be sure to **[check state
        laws](https://www.dol.gov/agencies/whd/state/payday)** to know what
        schedule is right for your customers.


        scope: `pay_schedules:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                frequency: <string>
                anchor_pay_date: <string>
                anchor_end_of_pay_period: <string>
                day_1: <integer>
                day_2: <integer>
                custom_name: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1
                uuid: f2a69c38-e2f9-4e31-b5c5-4754fc60a052
                frequency: Twice per month
                anchor_pay_date: '2020-05-15'
                anchor_end_of_pay_period: '2020-05-08'
                day_1: 15
                day_2: 31
                name: Engineering
                custom_name: A new monthly pay schedule
                auto_pilot: false
                active: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Payroll > Pay Schedules
      summary: Get the pay schedules for a company
      description: >-
        The pay schedule object in Gusto captures the details of when employees
        work and when they should be paid. A company can have multiple pay
        schedules.


        scope: `pay_schedules:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 1
                  uuid: 2097fe08-407a-46d7-b35c-a32402a2355e
                  frequency: Twice per month
                  anchor_pay_date: '2020-05-15'
                  anchor_end_of_pay_period: '2020-05-08'
                  day_1: 15
                  day_2: 31
                  name: Engineering
                  custom_name: Engineering department pay schedule
                  auto_pilot: false
                  active: true
                - id: 2
                  uuid: 8fc9f556-74fa-4271-97f6-4bfbfc5a5352
                  frequency: Monthly
                  anchor_pay_date: '2020-05-31'
                  day_1: 31
                  day_2: null
                  name: Sales
                  custom_name: Sales department monthly schedule
                  auto_pilot: false
                  active: false
                - id: 3
                  uuid: 0e07d35a-af11-4123-bfcb-4dd5f2f12ee1
                  frequency: Monthly
                  anchor_pay_date: '2020-05-31'
                  day_1: 31
                  day_2: null
                  name: Staff
                  custom_name: Staff department pay schedule
                  auto_pilot: true
                  active: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/pay_schedules/preview:
    get:
      tags:
        - Payroll > Pay Schedules
      summary: Preview pay schedule dates
      description: |-
        Provides a preview of a pay schedule with the specified parameters

        scope: `pay_schedules:write`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: frequency
          in: query
          schema:
            type: string
          description: >-
            The frequency that employees on this pay schedule are paid with
            Gusto.
          example: <string>
        - name: anchor_pay_date
          in: query
          schema:
            type: string
          description: >-
            The first date that employees on this pay schedule are paid with
            Gusto.
          example: <string>
        - name: anchor_end_of_pay_period
          in: query
          schema:
            type: string
          description: >-
            The last date of the first pay period. This can be the same date as
            the anchor pay date.
          example: <string>
        - name: day_1
          in: query
          schema:
            type: string
          description: >-
            An integer between 1 and 31 indicating the first day of the month
            that employees are paid. This field is only relevant for pay
            schedules with the “Twice per month” and “Monthly” frequencies. It
            will be null for pay schedules with other frequencies.
          example: <integer>
        - name: day_2
          in: query
          schema:
            type: string
          description: >-
            An integer between 1 and 31 indicating the second day of the month
            that employees are paid. This field is the second pay date for pay
            schedules with the "Twice per month" frequency. For semi-monthly pay
            schedules, set this field to 31. For months shorter than 31 days, we
            will set the second pay date to the last day of the month. It will
            be null for pay schedules with other frequencies.
          example: <integer>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                pay_periods:
                  - check_date: '2023-12-15'
                    end_date: '2023-12-31'
                    start_date: '2023-10-01'
                    run_payroll_by: '2023-12-13'
                  - check_date: '2024-03-15'
                    end_date: '2024-03-31'
                    start_date: '2024-01-01'
                    run_payroll_by: '2024-03-13'
                  - check_date: '2024-06-14'
                    end_date: '2024-06-30'
                    start_date: '2024-04-01'
                    run_payroll_by: '2024-06-12'
                  - check_date: '2024-09-13'
                    end_date: '2024-09-30'
                    start_date: '2024-07-01'
                    run_payroll_by: '2024-09-11'
                holidays:
                  - '2023-10-09'
                  - '2023-11-11'
                  - '2023-11-23'
                  - '2023-12-25'
                  - '2024-01-01'
                  - '2024-01-15'
                  - '2024-02-19'
                  - '2024-05-27'
                  - '2024-06-19'
                  - '2024-07-04'
                  - '2024-09-02'
  /v1/companies/{company_id}/pay_schedules/{pay_schedule_id}:
    get:
      tags:
        - Payroll > Pay Schedules
      summary: Get a pay schedule
      description: >-
        The pay schedule object in Gusto captures the details of when employees
        work and when they should be paid. A company can have multiple pay
        schedules.


        scope: `pay_schedules:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: pay_schedule_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the pay schedule
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1
                uuid: f2a69c38-e2f9-4e31-b5c5-4754fc60a052
                frequency: Twice per month
                anchor_pay_date: '2020-05-15'
                anchor_end_of_pay_period: '2020-05-08'
                day_1: 15
                day_2: 31
                name: Engineering
                custom_name: A new monthly pay schedule
                auto_pilot: false
                active: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Payroll > Pay Schedules
      summary: Update a pay schedule
      description: |-
        Updates a pay schedule.

        scope: `pay_schedules:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                frequency: <string>
                anchor_pay_date: <string>
                anchor_end_of_pay_period: <string>
                day_1: <integer>
                day_2: <integer>
                custom_name: <string>
                auto_pilot: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: pay_schedule_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the pay schedule
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1
                uuid: f2a69c38-e2f9-4e31-b5c5-4754fc60a052
                frequency: Twice per month
                anchor_pay_date: '2020-05-15'
                anchor_end_of_pay_period: '2020-05-08'
                day_1: 15
                day_2: 31
                name: Engineering
                custom_name: A new monthly pay schedule
                auto_pilot: false
                active: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/pay_periods:
    get:
      tags:
        - Payroll > Pay Schedules
      summary: Get pay periods for a company
      description: >-
        Pay periods are the foundation of payroll. Compensation, time &
        attendance, taxes, and expense reports all rely on when they happened.
        To begin submitting information for a given payroll, we need to agree on
        the time period.


        By default, this endpoint returns every current and past pay period for
        a company. Since companies can process payroll as often as every week,
        there can be up to 53 pay periods a year. If a company has been running
        payroll with Gusto for five years, this endpoint could return up to 265
        pay periods. Use the `start_date` and `end_date` parameters to reduce
        the scope of the response.


        scope: `payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: start_date
          in: query
          schema:
            type: string
          example: <string>
        - name: end_date
          in: query
          schema:
            type: string
          example: <string>
        - name: payroll_types
          in: query
          schema:
            type: string
          description: >-
            regular and/or transition. Multiple options are comma separated. The
            default is regular pay periods if nothing is passed in.
          example: <string>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - start_date: '2020-01-11'
                  end_date: '2020-01-24'
                  pay_schedule_id: 1409756036510222
                  pay_schedule_uuid: 00ebc4a4-ec88-4435-8f45-c505bb63e501
                  eligible_employees:
                    - id: 7740244452464965
                      uuid: 26c2359e-78d3-4450-b2e4-661e2a655a17
                      job_ids:
                        - 7740244454306064
                      job_uuids:
                        - 7d01ef7b-5ef5-4d73-aaac-148789fa79ad
                    - id: 7757869431131641
                      uuid: 9fde3f01-c7e8-4a65-95ec-1e5a74549e61
                      job_ids:
                        - 7757869439389315
                      job_uuids:
                        - 618dac73-5450-4045-865d-8168e0863ce6
                  payroll:
                    processed: true
                    payroll_deadline: '2020-01-28'
                    payroll_type: regular
                - start_date: '2020-12-12'
                  end_date: '2020-12-25'
                  pay_schedule_id: 1409756036510224
                  pay_schedule_uuid: cb53db72-612f-4eb1-9b85-389e79cfa510
                  eligible_employees:
                    - id: 1409722316858016
                      uuid: 699f4da3-a032-4c87-b33a-02b1efffa494
                      job_ids:
                        - 1409722316881160
                      job_uuids:
                        - ac05c860-8fc4-4fa7-a949-bee924379bb6
                    - id: 7757869431131645
                      uuid: 7a03c791-cc99-48e6-85f2-26d4b6d26b62
                      job_ids:
                        - 7757869439389316
                      job_uuids:
                        - 0e66ad7d-33a4-4f40-aa94-eff3ee5a7812
                  payroll:
                    processed: true
                    payroll_deadline: '2020-12-28'
                    payroll_type: regular
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/pay_periods/unprocessed_termination_pay_periods:
    get:
      tags:
        - Payroll > Pay Schedules
      summary: Get termination pay periods for a company
      description: >-
        When a payroll admin terminates an employee and selects "Dismissal
        Payroll" as the employee's final payroll, their last pay period will
        appear on the list.


        This endpoint returns the unprocessed pay periods for past and future
        terminated employees in a given company.


        scope: `payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - start_date: '2023-01-11'
                  end_date: '2023-01-24'
                  check_date: '2023-01-28'
                  debit_date: '2023-01-26'
                  employee_name: Mary Warner
                  employee_uuid: 094f6ded-a790-4651-87e6-4a7f15dec7c6,
                  pay_schedule_uuid: 00ebc4a4-ec88-4435-8f45-c505bb63e501
                - start_date: '2023-01-25'
                  end_date: '2023-02-07'
                  check_date: '2023-02-10'
                  debit_date: '2023-02-08'
                  employee_name: Mary Warner
                  employee_uuid: 094f6ded-a790-4651-87e6-4a7f15dec7c6,
                  pay_schedule_uuid: 00ebc4a4-ec88-4435-8f45-c505bb63e501
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/pay_schedules/assignments:
    get:
      tags:
        - Payroll > Pay Schedules
      summary: Get pay schedule assignments for a company
      description: >-
        This endpoint returns the current pay schedule assignment for a company,
        with pay schedule and employee/department mappings depending on the pay
        schedule type.


        scope: `pay_schedules:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: by_employee
                employees:
                  employee_uuid: f0238368-f2cf-43e2-9a07-b0265f2cec69
                  pay_schedule_uuid: c277ac52-9871-4a96-a1e6-0c449684602a
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/pay_schedules/assignment_preview:
    post:
      tags:
        - Payroll > Pay Schedules
      summary: Preview pay schedule assignments for a company
      description: >-
        This endpoints returns the employee changes, including pay period and
        transition pay periods, for changing the pay schedule.


        scope: `pay_schedules:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: <string>
                hourly_pay_schedule_uuid: <string>
                salaried_pay_schedule_uuid: <string>
                default_pay_schedule_uuid: <string>
                employees:
                  - employee_uuid: <string>
                    pay_schedule_uuid: <string>
                  - employee_uuid: <string>
                    pay_schedule_uuid: <string>
                departments:
                  - department_uuid: <string>
                    pay_schedule_uuid: <string>
                  - department_uuid: <string>
                    pay_schedule_uuid: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: hourly_salaried
                employee_changes:
                  employee_uuid: 43b39ada-dc49-4879-9594-fe95f67ae434
                  first_name: Penny
                  last_name: Parker
                  pay_frequency: Twice per month — Salaried pay schedule
                  first_pay_period:
                    pay_schedule_uuid: 3f029a58-155d-4c30-8361-cc266b2c1f11
                    start_date: '2023-07-01'
                    end_date: '2023-08-01'
                    check_date: '2023-08-02'
                  transition_pay_period:
                    start_date: '2023-06-20'
                    end_date: '2023-06-30'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/pay_schedules/assign:
    post:
      tags:
        - Payroll > Pay Schedules
      summary: Assign pay schedules for a company
      description: >-
        This endpoints assigns employees to specified pay schedules based on the
        pay schedule type.


        scope: `pay_schedules:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: <string>
                hourly_pay_schedule_uuid: <string>
                salaried_pay_schedule_uuid: <string>
                default_pay_schedule_uuid: <string>
                employees:
                  - employee_uuid: <string>
                    pay_schedule_uuid: <string>
                  - employee_uuid: <string>
                    pay_schedule_uuid: <string>
                departments:
                  - department_uuid: <string>
                    pay_schedule_uuid: <string>
                  - department_uuid: <string>
                    pay_schedule_uuid: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/earning_types:
    post:
      tags:
        - Payroll > Earning Types
      summary: Create a custom earning type
      description: >-
        Create a custom earning type.


        If an inactive earning type exists with the same name, this will
        reactivate it instead of creating a new one.


        scope: `payrolls:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Gym Membership Stipend
                uuid: f4dc8972-8830-4c07-b623-349a04b040d7
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Payroll > Earning Types
      summary: Get all earning types for a company
      description: >-
        A payroll item in Gusto is associated to an earning type to name the
        type of earning described by the payroll item.


        #### Default Earning Type

        Certain earning types are special because they have tax considerations.
        Those earning types are mostly the same for every company depending on
        its legal structure (LLC, Corporation, etc.)


        #### Custom Earning Type

        Custom earning types are all the other earning types added specifically
        for a company.


        scope: `payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                default:
                  - name: Bonus
                    uuid: b82e35c5-d7c6-4705-9e16-9f87499ade18
                  - name: Cash Tips
                    uuid: f5618c94-ed7d-4366-b2c4-ff05e430064f
                  - name: Commission
                    uuid: 60191999-004a-49d9-b163-630574433653
                  - name: Correction Payment
                    uuid: 368226e0-8e8c-48f0-bc91-aee46caafbc9
                  - name: Minimum Wage Adjustment
                    uuid: 88a2e519-9ff5-4c19-9071-6a709f3c2939
                  - name: Paycheck Tips
                    uuid: a3eaf03d-e712-4144-8f9b-71a85528adcf
                  - name: Severance
                    uuid: a6a2eba7-6c7d-4ced-bbe8-43452fbc9f63
                custom:
                  - name: Gym Membership Stipend
                    uuid: 6b4a8efb-db90-4c13-a75f-aae11b3f4ff9
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/earning_types/{earning_type_uuid}:
    put:
      tags:
        - Payroll > Earning Types
      summary: Update an earning type
      description: |-
        Update an earning type.

        scope: `payrolls:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: earning_type_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the earning type
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: Gym Membership Stipend
                uuid: f4dc8972-8830-4c07-b623-349a04b040d7
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - Payroll > Earning Types
      summary: Deactivate an earning type
      description: |-
        Deactivate an earning type.

        scope: `payrolls:write`
      parameters:
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: earning_type_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the earning type
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/payrolls:
    post:
      tags:
        - Payroll > Payrolls
      summary: Create an off-cycle payroll
      description: >-
        Creates a new, unprocessed, off-cycle payroll.


        ## `off_cycle_reason`

        - External benefits and deductions will be included when the
        `off_cycle_reason` is set to `Correction`.

        - All benefits and deductions are blocked when the `off_cycle_reason` is
        set to `Bonus`.


        scope: `payrolls:run`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                off_cycle: <boolean>
                off_cycle_reason: <string>
                start_date: <string>
                end_date: <string>
                pay_schedule_uuid: <string>
                employee_uuids:
                  - <string>
                  - <string>
                employee_ids:
                  - <integer>
                  - <integer>
                check_date: <string>
                withholding_pay_period: <string>
                skip_regular_deductions: <boolean>
                fixed_withholding_rate: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 19289df18e6e20f797de4a585ea5a91535c7ddf7
                payroll_deadline: '2021-02-18'
                check_date: '2021-02-22'
                external: false
                processed: true
                processed_date: '2021-02-18'
                payroll_id: 7786400908986532
                payroll_uuid: b50e611d-8f3d-4f24-b001-46675f7b5777
                company_id: 7756341740978008
                company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                pay_period:
                  start_date: '2021-02-01'
                  end_date: '2021-02-15'
                  pay_schedule_id: 7757500908984137
                  pay_schedule_uuid: 00ebc4a4-ec88-4435-8f45-c505bb63e501
                totals:
                  company_debit: '121747.71'
                  net_pay_debit: '79283.80'
                  tax_debit: '42463.91'
                  reimbursement_debit: '0.00'
                  child_support_debit: '0.00'
                  reimbursements: '0.00'
                  net_pay: '81752.94'
                  gross_pay: '130635.89'
                  employee_bonuses: '0.00'
                  employee_commissions: '18536.37'
                  employee_cash_tips: '0.00'
                  employee_paycheck_tips: '0.00'
                  additional_earnings: '0.00'
                  owners_draw: '0.00'
                  check_amount: '2469.14'
                  employer_taxes: '6917.19'
                  employee_taxes: '35546.72'
                  benefits: '0.00'
                  employee_benefits_deductions: '13336.23'
                  deferred_payroll_taxes: '0.00'
                payroll_status_meta:
                  cancellable: false
                  expected_check_date: '2022-05-25'
                  initial_check_date: '2022-05-31'
                  expected_debit_time: '2022-05-23T16:00:00.000-05:00'
                  payroll_late: false
                  initial_debit_cutoff_time: '2022-05-26T16:00:00.000-07:00'
                company_taxes:
                  - name: MO Compensation Deduction
                    amount: '-0.92'
                    employer: true
                  - name: NY MCTMT
                    amount: '5.00'
                    employer: true
                employee_compensations:
                  - employee_id: 1123581321345589
                    employee_uuid: 187412e1-3dbe-491a-bb2f-2f40323a7067
                    excluded: false
                    gross_pay: '2791.25'
                    net_pay: '1953.31'
                    check_amount: '1953.31'
                    payment_method: Direct Deposit
                    fixed_compensations:
                      - name: Bonus
                        amount: '100.00'
                        job_id: 1
                        job_uuid: 94e0d15e-9ed2-4077-98f6-64554f242ba5
                      - name: Reimbursement
                        amount: '100.00'
                        job_id: 1
                        job_uuid: 91bc3b43-ded0-4ee7-98fe-215499e909ba
                    hourly_compensations:
                      - name: Regular Hours
                        hours: '40.000'
                        job_id: 1
                        job_uuid: bd378298-3e0c-4145-904a-baadf8a91fa3
                        compensation_multiplier: 1
                      - name: Overtime
                        hours: '15.000'
                        job_id: 1
                        job_uuid: 9d3760f0-d1f9-4700-8817-0fe2dce5cf23
                        compensation_multiplier: 1.5
                      - name: Double overtime
                        hours: '0.000'
                        job_id: 1
                        job_uuid: b5eef9a9-4a87-4649-a80d-14878c05f44e
                        compensation_multiplier: 2
                      - name: Regular Hours
                        hours: '40.000'
                        job_id: 2
                        job_uuid: 332bd171-9efc-432b-abbb-a75c9dba706a
                        compensation_multiplier: 1
                      - name: Overtime
                        hours: '5.000'
                        job_id: 2
                        job_uuid: ca9b3dc1-57ac-4736-901a-9b1c9634b9d5
                        compensation_multiplier: 1.5
                      - name: Double overtime
                        hours: '0.000'
                        job_id: 2
                        job_uuid: 1bad01e2-140c-49ed-9542-2388ce4a19b3
                        compensation_multiplier: 2
                    paid_time_off:
                      - name: Vacation Hours
                        hours: '20.000'
                      - name: Sick Hours
                        hours: '0.000'
                      - name: Holiday Hours
                        hours: '0.000'
                    benefits:
                      - name: Group Term Life
                        employee_deduction: '100.00'
                        company_contribution: '50.00'
                        imputed: true
                      - name: 401K
                        employee_deduction: '100.00'
                        company_contribution: '50.00'
                        imputed: false
                    deductions:
                      - name: Child Support
                        amount: '80.00'
                    taxes:
                      - name: Federal Income Tax
                        employer: false
                        amount: '646.69'
                      - name: Social Security
                        employer: true
                        amount: '191.25'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Payroll > Payrolls
      summary: Get all payrolls for a company
      description: >-
        Returns all payrolls, current and past for a company.


        Notes:

        * Hour and dollar amounts are returned as string representations of
        numeric decimals.

        * Hours are represented to the thousands place; dollar amounts are
        represented to the cent.

        * Every eligible compensation is returned for each employee. If no data
        has yet be inserted for a given field, it defaults to “0.00” (for fixed
        amounts) or “0.000” (for hours ).


        scope: `payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: processed
          in: query
          schema:
            type: string
          description: Whether to return processed or unprocessed payrolls
          example: <boolean>
        - name: include_off_cycle
          in: query
          schema:
            type: string
          description: Whether to include off cycle payrolls in the response
          example: <boolean>
        - name: include
          in: query
          schema:
            type: string
          description: Include the requested attribute in the response
          example: <string>
        - name: start_date
          in: query
          schema:
            type: string
          description: Return payrolls whose pay period is after the start date
          example: <string>
        - name: end_date
          in: query
          schema:
            type: string
          description: Return payrolls whose pay period is before the end date
          example: <string>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - version: 19289df18e6e20f797de4a585ea5a91535c7ddf7
                  payroll_deadline: '2021-02-18'
                  check_date: '2021-02-22'
                  external: false
                  processed: true
                  processed_date: '2021-02-18'
                  payroll_id: 7786400908986532
                  payroll_uuid: b50e611d-8f3d-4f24-b001-46675f7b5777
                  company_id: 7756341740978008
                  company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                  pay_period:
                    start_date: '2021-02-01'
                    end_date: '2021-02-15'
                    pay_schedule_id: 7757500908984137
                    pay_schedule_uuid: 00ebc4a4-ec88-4435-8f45-c505bb63e501
                  totals:
                    company_debit: '121747.71'
                    net_pay_debit: '79283.80'
                    tax_debit: '42463.91'
                    reimbursement_debit: '0.00'
                    child_support_debit: '0.00'
                    reimbursements: '0.00'
                    net_pay: '81752.94'
                    gross_pay: '130635.89'
                    employee_bonuses: '0.00'
                    employee_commissions: '18536.37'
                    employee_cash_tips: '0.00'
                    employee_paycheck_tips: '0.00'
                    additional_earnings: '0.00'
                    owners_draw: '0.00'
                    check_amount: '2469.14'
                    employer_taxes: '6917.19'
                    employee_taxes: '35546.72'
                    benefits: '0.00'
                    employee_benefits_deductions: '13336.23'
                    deferred_payroll_taxes: '0.00'
                  company_taxes:
                    - name: MO Compensation Deduction
                      amount: '-0.92'
                      employer: true
                    - name: NY MCTMT
                      amount: '5.00'
                      employer: true
                  employee_compensations:
                    - employee_id: 1123581321345589
                      employee_uuid: 187412e1-3dbe-491a-bb2f-2f40323a7067
                      excluded: false
                      gross_pay: '2791.25'
                      net_pay: '1953.31'
                      check_amount: '1953.31'
                      payment_method: Direct Deposit
                      fixed_compensations:
                        - name: Bonus
                          amount: '100.00'
                          job_id: 1
                          job_uuid: 94e0d15e-9ed2-4077-98f6-64554f242ba5
                        - name: Reimbursement
                          amount: '100.00'
                          job_id: 1
                          job_uuid: 91bc3b43-ded0-4ee7-98fe-215499e909ba
                      hourly_compensations:
                        - name: Regular Hours
                          hours: '40.000'
                          job_id: 1
                          job_uuid: bd378298-3e0c-4145-904a-baadf8a91fa3
                          compensation_multiplier: 1
                        - name: Overtime
                          hours: '15.000'
                          job_id: 1
                          job_uuid: 9d3760f0-d1f9-4700-8817-0fe2dce5cf23
                          compensation_multiplier: 1.5
                        - name: Double overtime
                          hours: '0.000'
                          job_id: 1
                          job_uuid: b5eef9a9-4a87-4649-a80d-14878c05f44e
                          compensation_multiplier: 2
                        - name: Regular Hours
                          hours: '40.000'
                          job_id: 2
                          job_uuid: 332bd171-9efc-432b-abbb-a75c9dba706a
                          compensation_multiplier: 1
                        - name: Overtime
                          hours: '5.000'
                          job_id: 2
                          job_uuid: ca9b3dc1-57ac-4736-901a-9b1c9634b9d5
                          compensation_multiplier: 1.5
                        - name: Double overtime
                          hours: '0.000'
                          job_id: 2
                          job_uuid: 1bad01e2-140c-49ed-9542-2388ce4a19b3
                          compensation_multiplier: 2
                      paid_time_off:
                        - name: Vacation Hours
                          hours: '20.000'
                        - name: Sick Hours
                          hours: '0.000'
                        - name: Holiday Hours
                          hours: '0.000'
                      benefits:
                        - name: Group Term Life
                          employee_deduction: '100.00'
                          company_contribution: '50.00'
                          imputed: true
                        - name: 401K
                          employee_deduction: '100.00'
                          company_contribution: '50.00'
                          imputed: false
                      deductions:
                        - name: Child Support
                          amount: '80.00'
                      taxes:
                        - name: Federal Income Tax
                          employer: false
                          amount: '646.69'
                        - name: Social Security
                          employer: true
                          amount: '191.25'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/payrolls/{pay_period_start_date}/{pay_period_end_date}:
    put:
      tags:
        - Payroll > Payrolls
      summary: Update a payroll
      description: >-
        This endpoint allows you to update information for one or more employees
        for a specific **unprocessed** payroll.  You can think of the
        **unprocessed**

        payroll object as a template of fields that you can update.  You cannot
        modify the structure of the payroll object through this endpoint, only
        values

        of the fields included in the payroll.  If you do not include specific
        employee compensations or fixed/hourly compensations in your request
        body, they

        will not be removed from the payroll.


        The payrolls are identified by their pay periods’ start_date and
        end_date. Both are required and must correspond with an existing,
        unprocessed payroll. *If the dates do not match, the entire request will
        be rejected.* This was an explicit design decision to remove any
        assumptions around the time span for data sent.


        scope: `payrolls:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                employee_compensations:
                  - employee_id: <integer>
                    employee_uuid: <string>
                    excluded: <boolean>
                    payment_method: <string>
                    memo: <string>
                    fixed_compensations:
                      - name: <string>
                        amount: <string>
                        job_id: <integer>
                        job_uuid: <string>
                      - name: <string>
                        amount: <string>
                        job_id: <integer>
                        job_uuid: <string>
                    hourly_compensations:
                      - name: <string>
                        hours: <string>
                        job_id: <integer>
                        job_uuid: <string>
                      - name: <string>
                        hours: <string>
                        job_id: <integer>
                        job_uuid: <string>
                    paid_time_off:
                      - name: <string>
                        hours: <string>
                        policy_uuid: <string>
                      - name: <string>
                        hours: <string>
                        policy_uuid: <string>
                  - employee_id: <integer>
                    employee_uuid: <string>
                    excluded: <boolean>
                    payment_method: <string>
                    memo: <string>
                    fixed_compensations:
                      - name: <string>
                        amount: <string>
                        job_id: <integer>
                        job_uuid: <string>
                      - name: <string>
                        amount: <string>
                        job_id: <integer>
                        job_uuid: <string>
                    hourly_compensations:
                      - name: <string>
                        hours: <string>
                        job_id: <integer>
                        job_uuid: <string>
                      - name: <string>
                        hours: <string>
                        job_id: <integer>
                        job_uuid: <string>
                    paid_time_off:
                      - name: <string>
                        hours: <string>
                        policy_uuid: <string>
                      - name: <string>
                        hours: <string>
                        policy_uuid: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: pay_period_start_date
          in: path
          schema:
            type: string
          required: true
          description: (Required) The start_date of the pay period for the payroll
          example: <string>
        - name: pay_period_end_date
          in: path
          schema:
            type: string
          required: true
          description: (Required) The end_date of the pay period for the payroll
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 19289df18e6e20f797de4a585ea5a91535c7ddf7
                payroll_deadline: '2021-02-18'
                check_date: '2021-02-22'
                external: false
                processed: true
                processed_date: '2021-02-18'
                payroll_id: 7786400908986532
                payroll_uuid: b50e611d-8f3d-4f24-b001-46675f7b5777
                company_id: 7756341740978008
                company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                pay_period:
                  start_date: '2021-02-01'
                  end_date: '2021-02-15'
                  pay_schedule_id: 7757500908984137
                  pay_schedule_uuid: 00ebc4a4-ec88-4435-8f45-c505bb63e501
                totals:
                  company_debit: '121747.71'
                  net_pay_debit: '79283.80'
                  tax_debit: '42463.91'
                  reimbursement_debit: '0.00'
                  child_support_debit: '0.00'
                  reimbursements: '0.00'
                  net_pay: '81752.94'
                  gross_pay: '130635.89'
                  employee_bonuses: '0.00'
                  employee_commissions: '18536.37'
                  employee_cash_tips: '0.00'
                  employee_paycheck_tips: '0.00'
                  additional_earnings: '0.00'
                  owners_draw: '0.00'
                  check_amount: '2469.14'
                  employer_taxes: '6917.19'
                  employee_taxes: '35546.72'
                  benefits: '0.00'
                  employee_benefits_deductions: '13336.23'
                  deferred_payroll_taxes: '0.00'
                payroll_status_meta:
                  cancellable: false
                  expected_check_date: '2022-05-25'
                  initial_check_date: '2022-05-31'
                  expected_debit_time: '2022-05-23T16:00:00.000-05:00'
                  payroll_late: false
                  initial_debit_cutoff_time: '2022-05-26T16:00:00.000-07:00'
                company_taxes:
                  - name: MO Compensation Deduction
                    amount: '-0.92'
                    employer: true
                  - name: NY MCTMT
                    amount: '5.00'
                    employer: true
                employee_compensations:
                  - employee_id: 1123581321345589
                    employee_uuid: 187412e1-3dbe-491a-bb2f-2f40323a7067
                    excluded: false
                    gross_pay: '2791.25'
                    net_pay: '1953.31'
                    check_amount: '1953.31'
                    payment_method: Direct Deposit
                    fixed_compensations:
                      - name: Bonus
                        amount: '100.00'
                        job_id: 1
                        job_uuid: 94e0d15e-9ed2-4077-98f6-64554f242ba5
                      - name: Reimbursement
                        amount: '100.00'
                        job_id: 1
                        job_uuid: 91bc3b43-ded0-4ee7-98fe-215499e909ba
                    hourly_compensations:
                      - name: Regular Hours
                        hours: '40.000'
                        job_id: 1
                        job_uuid: bd378298-3e0c-4145-904a-baadf8a91fa3
                        compensation_multiplier: 1
                      - name: Overtime
                        hours: '15.000'
                        job_id: 1
                        job_uuid: 9d3760f0-d1f9-4700-8817-0fe2dce5cf23
                        compensation_multiplier: 1.5
                      - name: Double overtime
                        hours: '0.000'
                        job_id: 1
                        job_uuid: b5eef9a9-4a87-4649-a80d-14878c05f44e
                        compensation_multiplier: 2
                      - name: Regular Hours
                        hours: '40.000'
                        job_id: 2
                        job_uuid: 332bd171-9efc-432b-abbb-a75c9dba706a
                        compensation_multiplier: 1
                      - name: Overtime
                        hours: '5.000'
                        job_id: 2
                        job_uuid: ca9b3dc1-57ac-4736-901a-9b1c9634b9d5
                        compensation_multiplier: 1.5
                      - name: Double overtime
                        hours: '0.000'
                        job_id: 2
                        job_uuid: 1bad01e2-140c-49ed-9542-2388ce4a19b3
                        compensation_multiplier: 2
                    paid_time_off:
                      - name: Vacation Hours
                        hours: '20.000'
                      - name: Sick Hours
                        hours: '0.000'
                      - name: Holiday Hours
                        hours: '0.000'
                    benefits:
                      - name: Group Term Life
                        employee_deduction: '100.00'
                        company_contribution: '50.00'
                        imputed: true
                      - name: 401K
                        employee_deduction: '100.00'
                        company_contribution: '50.00'
                        imputed: false
                    deductions:
                      - name: Child Support
                        amount: '80.00'
                    taxes:
                      - name: Federal Income Tax
                        employer: false
                        amount: '646.69'
                      - name: Social Security
                        employer: true
                        amount: '191.25'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/payroll_reversals:
    get:
      tags:
        - Payroll > Payrolls
      summary: Get approved payroll reversals
      description: |-
        Returns all approved Payroll Reversals for a Company.

        scope: `payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                reversed_payroll_id: 3
                reversed_payroll_uuid: 09505984-8d8c-41a3-adbe-5740322ae8e9
                reversal_payroll_id: 5
                reversal_payroll_uuid: 0424688e-0a2e-4cd0-ac86-42283e788fb3
                reason: Customer Request
                approved_at: null
                category: convert_check_ee_requested
                reversed_employee_ids:
                  - 3
                reversed_employee_uuids:
                  - 5f036964-185e-4c85-bbf2-3873e1203b30
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/payrolls/{payroll_id}:
    get:
      tags:
        - Payroll > Payrolls
      summary: Get a single payroll
      description: >-
        Returns a payroll.


        Notes:

        * Hour and dollar amounts are returned as string representations of
        numeric decimals.

        * Hours are represented to the thousands place; dollar amounts are
        represented to the cent.

        * Every eligible compensation is returned for each employee. If no data
        has yet be inserted for a given field, it defaults to “0.00” (for fixed
        amounts) or “0.000” (for hours ).


        scope: `payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Include the requested attribute in the response, for multiple
            attributes comma separate the values, i.e.
            `?include=benefits,deductions,taxes`
          example: <string>
        - name: show_calculation
          in: query
          schema:
            type: string
          description: >-
            With show_calculation = true, the calculated values specified by the
            include parameter will be shown if the payroll is in an unprocessed,
            but calculated state.

            If a payroll is in an unprocessed, but calculated state and a call
            is made to this endpoint without show_calculation = true, the
            calculation will be “cleared.”
          example: <string>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the payroll
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 19289df18e6e20f797de4a585ea5a91535c7ddf7
                payroll_deadline: '2021-02-18'
                check_date: '2021-02-22'
                external: false
                processed: true
                processed_date: '2021-02-18'
                payroll_id: 7786400908986532
                payroll_uuid: b50e611d-8f3d-4f24-b001-46675f7b5777
                company_id: 7756341740978008
                company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                pay_period:
                  start_date: '2021-02-01'
                  end_date: '2021-02-15'
                  pay_schedule_id: 7757500908984137
                  pay_schedule_uuid: 00ebc4a4-ec88-4435-8f45-c505bb63e501
                totals:
                  company_debit: '121747.71'
                  net_pay_debit: '79283.80'
                  tax_debit: '42463.91'
                  reimbursement_debit: '0.00'
                  child_support_debit: '0.00'
                  reimbursements: '0.00'
                  net_pay: '81752.94'
                  gross_pay: '130635.89'
                  employee_bonuses: '0.00'
                  employee_commissions: '18536.37'
                  employee_cash_tips: '0.00'
                  employee_paycheck_tips: '0.00'
                  additional_earnings: '0.00'
                  owners_draw: '0.00'
                  check_amount: '2469.14'
                  employer_taxes: '6917.19'
                  employee_taxes: '35546.72'
                  benefits: '0.00'
                  employee_benefits_deductions: '13336.23'
                  deferred_payroll_taxes: '0.00'
                payroll_status_meta:
                  cancellable: false
                  expected_check_date: '2022-05-25'
                  initial_check_date: '2022-05-31'
                  expected_debit_time: '2022-05-23T16:00:00.000-05:00'
                  payroll_late: false
                  initial_debit_cutoff_time: '2022-05-26T16:00:00.000-07:00'
                company_taxes:
                  - name: MO Compensation Deduction
                    amount: '-0.92'
                    employer: true
                  - name: NY MCTMT
                    amount: '5.00'
                    employer: true
                employee_compensations:
                  - employee_id: 1123581321345589
                    employee_uuid: 187412e1-3dbe-491a-bb2f-2f40323a7067
                    excluded: false
                    gross_pay: '2791.25'
                    net_pay: '1953.31'
                    check_amount: '1953.31'
                    payment_method: Direct Deposit
                    fixed_compensations:
                      - name: Bonus
                        amount: '100.00'
                        job_id: 1
                        job_uuid: 94e0d15e-9ed2-4077-98f6-64554f242ba5
                      - name: Reimbursement
                        amount: '100.00'
                        job_id: 1
                        job_uuid: 91bc3b43-ded0-4ee7-98fe-215499e909ba
                    hourly_compensations:
                      - name: Regular Hours
                        hours: '40.000'
                        job_id: 1
                        job_uuid: bd378298-3e0c-4145-904a-baadf8a91fa3
                        compensation_multiplier: 1
                      - name: Overtime
                        hours: '15.000'
                        job_id: 1
                        job_uuid: 9d3760f0-d1f9-4700-8817-0fe2dce5cf23
                        compensation_multiplier: 1.5
                      - name: Double overtime
                        hours: '0.000'
                        job_id: 1
                        job_uuid: b5eef9a9-4a87-4649-a80d-14878c05f44e
                        compensation_multiplier: 2
                      - name: Regular Hours
                        hours: '40.000'
                        job_id: 2
                        job_uuid: 332bd171-9efc-432b-abbb-a75c9dba706a
                        compensation_multiplier: 1
                      - name: Overtime
                        hours: '5.000'
                        job_id: 2
                        job_uuid: ca9b3dc1-57ac-4736-901a-9b1c9634b9d5
                        compensation_multiplier: 1.5
                      - name: Double overtime
                        hours: '0.000'
                        job_id: 2
                        job_uuid: 1bad01e2-140c-49ed-9542-2388ce4a19b3
                        compensation_multiplier: 2
                    paid_time_off:
                      - name: Vacation Hours
                        hours: '20.000'
                      - name: Sick Hours
                        hours: '0.000'
                      - name: Holiday Hours
                        hours: '0.000'
                    benefits:
                      - name: Group Term Life
                        employee_deduction: '100.00'
                        company_contribution: '50.00'
                        imputed: true
                      - name: 401K
                        employee_deduction: '100.00'
                        company_contribution: '50.00'
                        imputed: false
                    deductions:
                      - name: Child Support
                        amount: '80.00'
                    taxes:
                      - name: Federal Income Tax
                        employer: false
                        amount: '646.69'
                      - name: Social Security
                        employer: true
                        amount: '191.25'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Payroll > Payrolls
      summary: Update a payroll by ID
      description: >-
        This endpoint allows you to update information for one or more employees
        for a specific **unprocessed** payroll.  You can think of the
        **unprocessed**

        payroll object as a template of fields that you can update.  You cannot
        modify the structure of the payroll object through this endpoint, only
        values

        of the fields included in the payroll.  If you do not include specific
        employee compensations or fixed/hourly compensations in your request
        body, they

        will not be removed from the payroll.


        scope: `payrolls:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                employee_compensations:
                  - employee_id: <integer>
                    employee_uuid: <string>
                    excluded: <boolean>
                    payment_method: <string>
                    memo: <string>
                    fixed_compensations:
                      - name: <string>
                        amount: <string>
                        job_id: <integer>
                      - name: <string>
                        amount: <string>
                        job_id: <integer>
                    hourly_compensations:
                      - name: <string>
                        hours: <string>
                        job_id: <integer>
                      - name: <string>
                        hours: <string>
                        job_id: <integer>
                    paid_time_off:
                      - name: <string>
                        hours: <string>
                        policy_uuid: <string>
                        final_payout_unused_hours_input: <string>
                      - name: <string>
                        hours: <string>
                        policy_uuid: <string>
                        final_payout_unused_hours_input: <string>
                  - employee_id: <integer>
                    employee_uuid: <string>
                    excluded: <boolean>
                    payment_method: <string>
                    memo: <string>
                    fixed_compensations:
                      - name: <string>
                        amount: <string>
                        job_id: <integer>
                      - name: <string>
                        amount: <string>
                        job_id: <integer>
                    hourly_compensations:
                      - name: <string>
                        hours: <string>
                        job_id: <integer>
                      - name: <string>
                        hours: <string>
                        job_id: <integer>
                    paid_time_off:
                      - name: <string>
                        hours: <string>
                        policy_uuid: <string>
                        final_payout_unused_hours_input: <string>
                      - name: <string>
                        hours: <string>
                        policy_uuid: <string>
                        final_payout_unused_hours_input: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the payroll
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 19289df18e6e20f797de4a585ea5a91535c7ddf7
                payroll_deadline: '2021-02-18'
                check_date: '2021-02-22'
                external: false
                processed: true
                processed_date: '2021-02-18'
                payroll_id: 7786400908986532
                payroll_uuid: b50e611d-8f3d-4f24-b001-46675f7b5777
                company_id: 7756341740978008
                company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                pay_period:
                  start_date: '2021-02-01'
                  end_date: '2021-02-15'
                  pay_schedule_id: 7757500908984137
                  pay_schedule_uuid: 00ebc4a4-ec88-4435-8f45-c505bb63e501
                totals:
                  company_debit: '121747.71'
                  net_pay_debit: '79283.80'
                  tax_debit: '42463.91'
                  reimbursement_debit: '0.00'
                  child_support_debit: '0.00'
                  reimbursements: '0.00'
                  net_pay: '81752.94'
                  gross_pay: '130635.89'
                  employee_bonuses: '0.00'
                  employee_commissions: '18536.37'
                  employee_cash_tips: '0.00'
                  employee_paycheck_tips: '0.00'
                  additional_earnings: '0.00'
                  owners_draw: '0.00'
                  check_amount: '2469.14'
                  employer_taxes: '6917.19'
                  employee_taxes: '35546.72'
                  benefits: '0.00'
                  employee_benefits_deductions: '13336.23'
                  deferred_payroll_taxes: '0.00'
                payroll_status_meta:
                  cancellable: false
                  expected_check_date: '2022-05-25'
                  initial_check_date: '2022-05-31'
                  expected_debit_time: '2022-05-23T16:00:00.000-05:00'
                  payroll_late: false
                  initial_debit_cutoff_time: '2022-05-26T16:00:00.000-07:00'
                company_taxes:
                  - name: MO Compensation Deduction
                    amount: '-0.92'
                    employer: true
                  - name: NY MCTMT
                    amount: '5.00'
                    employer: true
                employee_compensations:
                  - employee_id: 1123581321345589
                    employee_uuid: 187412e1-3dbe-491a-bb2f-2f40323a7067
                    excluded: false
                    gross_pay: '2791.25'
                    net_pay: '1953.31'
                    check_amount: '1953.31'
                    payment_method: Direct Deposit
                    fixed_compensations:
                      - name: Bonus
                        amount: '100.00'
                        job_id: 1
                        job_uuid: 94e0d15e-9ed2-4077-98f6-64554f242ba5
                      - name: Reimbursement
                        amount: '100.00'
                        job_id: 1
                        job_uuid: 91bc3b43-ded0-4ee7-98fe-215499e909ba
                    hourly_compensations:
                      - name: Regular Hours
                        hours: '40.000'
                        job_id: 1
                        job_uuid: bd378298-3e0c-4145-904a-baadf8a91fa3
                        compensation_multiplier: 1
                      - name: Overtime
                        hours: '15.000'
                        job_id: 1
                        job_uuid: 9d3760f0-d1f9-4700-8817-0fe2dce5cf23
                        compensation_multiplier: 1.5
                      - name: Double overtime
                        hours: '0.000'
                        job_id: 1
                        job_uuid: b5eef9a9-4a87-4649-a80d-14878c05f44e
                        compensation_multiplier: 2
                      - name: Regular Hours
                        hours: '40.000'
                        job_id: 2
                        job_uuid: 332bd171-9efc-432b-abbb-a75c9dba706a
                        compensation_multiplier: 1
                      - name: Overtime
                        hours: '5.000'
                        job_id: 2
                        job_uuid: ca9b3dc1-57ac-4736-901a-9b1c9634b9d5
                        compensation_multiplier: 1.5
                      - name: Double overtime
                        hours: '0.000'
                        job_id: 2
                        job_uuid: 1bad01e2-140c-49ed-9542-2388ce4a19b3
                        compensation_multiplier: 2
                    paid_time_off:
                      - name: Vacation Hours
                        hours: '20.000'
                      - name: Sick Hours
                        hours: '0.000'
                      - name: Holiday Hours
                        hours: '0.000'
                    benefits:
                      - name: Group Term Life
                        employee_deduction: '100.00'
                        company_contribution: '50.00'
                        imputed: true
                      - name: 401K
                        employee_deduction: '100.00'
                        company_contribution: '50.00'
                        imputed: false
                    deductions:
                      - name: Child Support
                        amount: '80.00'
                    taxes:
                      - name: Federal Income Tax
                        employer: false
                        amount: '646.69'
                      - name: Social Security
                        employer: true
                        amount: '191.25'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/payrolls/{payroll_uuid}/receipt:
    get:
      tags:
        - Payroll > Payrolls
      summary: Get a single payroll receipt
      description: >-
        Returns a payroll receipt.


        Notes:

        * Hour and dollar amounts are returned as string representations of
        numeric decimals.

        * Dollar amounts are represented to the cent.

        * If no data has yet be inserted for a given field, it defaults to
        “0.00” (for fixed amounts).


        scope: `payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: payroll_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the payroll
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                totals:
                  company_debit: '1080.47'
                  net_pay_debit: '748.34'
                  child_support_debit: '100.0'
                  reimbursement_debit: '50.0'
                  tax_debit: '182.13'
                taxes:
                  - name: Federal Income Tax
                    amount: '30.36'
                  - name: Social Security
                    amount: '104.54'
                  - name: Medicare
                    amount: '24.46'
                  - name: Additional Medicare
                    amount: '0.0'
                  - name: TX SUTA
                    amount: '22.77'
                  - name: FUTA
                    amount: '0.0'
                employee_compensations:
                  - employee_uuid: f83d0bd8-7e20-43b9-834c-6d514ef6cb47
                    employee_first_name: Patricia
                    employee_last_name: Hamill
                    payment_method: Direct Deposit
                    net_pay: '748.34'
                    total_tax: '182.13'
                    total_garnishments: '0.0'
                    child_support_garnishment: '100.0'
                    total_reimbursement: '50.0'
                licensee:
                  name: Gusto, Zenpayroll Inc.
                  address: 525 20th St
                  city: San Francisco
                  state: CA
                  postal_code: '94107'
                  phone_number: '4157778888'
                receipt_id: 7757500935137343
                payroll_uuid: afccb970-357e-4013-81f5-85dafc74f9b6
                company_uuid: c827aa0d-3928-4d5a-ab1f-400641a7d2b8
                name_of_sender: Torp and Sons and Sons
                name_of_recipient: Payroll Recipients
                recipient_notice: >-
                  Payroll recipients include the employees listed below plus the
                  tax agencies for the taxes listed below.
                debit_date: '2022-06-02'
                license: >-
                  ZenPayroll, Inc., dba Gusto is a licensed money transmitter.
                  For more about Gusto’s licenses and your state-specific rights
                  to request information, submit complaints, dispute errors, or
                  cancel transactions, visit our license page.
                license_uri: https://gusto.com/about/licenses
                right_to_refund: https://gusto.com/about/licenses
                liability_of_licensee: https://gusto.com/about/licenses
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_uuid}/payrolls/blockers:
    get:
      tags:
        - Payroll > Payrolls
      summary: Get all payroll blockers for a company
      description: >-
        Returns a list of reasons that prevent the company from running
        payrolls. See the [payroll blockers
        guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers)
        for a complete list of reasons.


        The list is empty if there are no payroll blockers.


        scope: `payrolls:run`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - key: needs_approval
                  message: Company needs to be approved to run payroll.
                - key: invalid_signatory
                  message: >-
                    A signatory who is authorized to sign documents on behalf of
                    your company is required. Please ensure their identity
                    verification is successful.
                - key: pay_schedule_setup_not_complete
                  message: >-
                    Some employees don't have a pay schedule set up yet. Please
                    complete this step to run payroll.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_uuid}/payrolls/skip:
    post:
      tags:
        - Payroll > Payrolls
      summary: Skip a payroll
      description: >-
        Submits a $0 payroll for employees associated with the pay schedule to
        skip payroll. This submission is asynchronous and a successful request
        responds with a 202 HTTP status. Upon success, the payroll is
        transitioned to the `processed` state.


        If the company is blocked from running payroll due to issues like
        incomplete setup, missing information or other compliance issues, the
        response will be 422 Unprocessable Entity with a categorization of the
        blockers as described in the error responses.


        scope: `payrolls:run`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                payroll_type: <string>
                start_date: <string>
                end_date: <string>
                pay_schedule_uuid: <string>
                employee_uuids:
                  - <string>
                  - <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  missing_requirement:
                    - type: eftps_in_error
  /v1/payrolls/{payroll_uuid}/gross_up:
    post:
      tags:
        - Payroll > Payrolls
      summary: Calculate gross up
      description: >-
        Calculates gross up earnings for an employee's payroll, given net
        earnings. This endpoint is only applicable to off-cycle unprocessed
        payrolls.


        The gross up amount must then be mapped to the corresponding fixed
        compensation earning type to get the correct payroll amount. For
        example, for bonus off-cycles, the gross up amount should be set with
        the Bonus earning type in the payroll `fixed_compensations` field.


        scope: `payrolls:run`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                employee_uuid: <string>
                net_pay: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: payroll_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the payroll
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                net_pay: '1183.25'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  missing_requirement:
                    - type: eftps_in_error
  /v1/companies/{company_id}/payrolls/{payroll_id}/calculate:
    put:
      tags:
        - Payroll > Payrolls
      summary: Calculate a payroll
      description: >-
        Performs calculations for taxes, benefits, and deductions for an
        unprocessed payroll. The calculated payroll details provide a preview of
        the actual values that will be used when the payroll is run.


        This calculation is asynchronous and a successful request responds with
        a 202 HTTP status. To view the details of the calculated payroll, use
        the GET /v1/companies/{company_id}/payrolls/{payroll_id} endpoint with
        the *show_calculation=true* and *include=taxes,benefits,deductions*
        params.


        If the company is blocked from running payroll due to issues like
        incomplete setup, missing information or other compliance issues, the
        response will be 422 Unprocessable Entity with a categorization of the
        blockers as described in the error responses.


        scope: `payrolls:run`
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the payroll
          example: <string>
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  missing_requirement:
                    - type: eftps_in_error
  /v1/companies/{company_id}/payrolls/{payroll_id}/submit:
    put:
      tags:
        - Payroll > Payrolls
      summary: Submit payroll
      description: >-
        Submits an unprocessed payroll to be calculated and run. This submission
        is asynchronous and a successful request responds with a 202 HTTP
        status. Upon success, transitions the payroll to the `processed` state.


        If the company is blocked from running payroll due to issues like
        incomplete setup, missing information or other compliance issues, the
        response will be 422 Unprocessable Entity with a categorization of the
        blockers as described in the error responses.


        scope: `payrolls:run`
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the payroll
          example: <string>
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  missing_requirement:
                    - type: eftps_in_error
  /v1/companies/{company_id}/payrolls/{payroll_id}/cancel:
    put:
      tags:
        - Payroll > Payrolls
      summary: Cancel a payroll
      description: >
        Transitions a `processed` payroll back to the `unprocessed` state. A
        payroll can be canceled if it meets both criteria:

        - `processed` is true

        - Current time is earlier than 3:30pm PT on the payroll_deadline


        scope: `payrolls:run`
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the payroll
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 19289df18e6e20f797de4a585ea5a91535c7ddf7
                payroll_deadline: '2021-02-18'
                check_date: '2021-02-22'
                external: false
                processed: true
                processed_date: '2021-02-18'
                payroll_id: 7786400908986532
                payroll_uuid: b50e611d-8f3d-4f24-b001-46675f7b5777
                company_id: 7756341740978008
                company_uuid: 6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb
                pay_period:
                  start_date: '2021-02-01'
                  end_date: '2021-02-15'
                  pay_schedule_id: 7757500908984137
                  pay_schedule_uuid: 00ebc4a4-ec88-4435-8f45-c505bb63e501
                totals:
                  company_debit: '121747.71'
                  net_pay_debit: '79283.80'
                  tax_debit: '42463.91'
                  reimbursement_debit: '0.00'
                  child_support_debit: '0.00'
                  reimbursements: '0.00'
                  net_pay: '81752.94'
                  gross_pay: '130635.89'
                  employee_bonuses: '0.00'
                  employee_commissions: '18536.37'
                  employee_cash_tips: '0.00'
                  employee_paycheck_tips: '0.00'
                  additional_earnings: '0.00'
                  owners_draw: '0.00'
                  check_amount: '2469.14'
                  employer_taxes: '6917.19'
                  employee_taxes: '35546.72'
                  benefits: '0.00'
                  employee_benefits_deductions: '13336.23'
                  deferred_payroll_taxes: '0.00'
                payroll_status_meta:
                  cancellable: false
                  expected_check_date: '2022-05-25'
                  initial_check_date: '2022-05-31'
                  expected_debit_time: '2022-05-23T16:00:00.000-05:00'
                  payroll_late: false
                  initial_debit_cutoff_time: '2022-05-26T16:00:00.000-07:00'
                company_taxes:
                  - name: MO Compensation Deduction
                    amount: '-0.92'
                    employer: true
                  - name: NY MCTMT
                    amount: '5.00'
                    employer: true
                employee_compensations:
                  - employee_id: 1123581321345589
                    employee_uuid: 187412e1-3dbe-491a-bb2f-2f40323a7067
                    excluded: false
                    gross_pay: '2791.25'
                    net_pay: '1953.31'
                    check_amount: '1953.31'
                    payment_method: Direct Deposit
                    fixed_compensations:
                      - name: Bonus
                        amount: '100.00'
                        job_id: 1
                        job_uuid: 94e0d15e-9ed2-4077-98f6-64554f242ba5
                      - name: Reimbursement
                        amount: '100.00'
                        job_id: 1
                        job_uuid: 91bc3b43-ded0-4ee7-98fe-215499e909ba
                    hourly_compensations:
                      - name: Regular Hours
                        hours: '40.000'
                        job_id: 1
                        job_uuid: bd378298-3e0c-4145-904a-baadf8a91fa3
                        compensation_multiplier: 1
                      - name: Overtime
                        hours: '15.000'
                        job_id: 1
                        job_uuid: 9d3760f0-d1f9-4700-8817-0fe2dce5cf23
                        compensation_multiplier: 1.5
                      - name: Double overtime
                        hours: '0.000'
                        job_id: 1
                        job_uuid: b5eef9a9-4a87-4649-a80d-14878c05f44e
                        compensation_multiplier: 2
                      - name: Regular Hours
                        hours: '40.000'
                        job_id: 2
                        job_uuid: 332bd171-9efc-432b-abbb-a75c9dba706a
                        compensation_multiplier: 1
                      - name: Overtime
                        hours: '5.000'
                        job_id: 2
                        job_uuid: ca9b3dc1-57ac-4736-901a-9b1c9634b9d5
                        compensation_multiplier: 1.5
                      - name: Double overtime
                        hours: '0.000'
                        job_id: 2
                        job_uuid: 1bad01e2-140c-49ed-9542-2388ce4a19b3
                        compensation_multiplier: 2
                    paid_time_off:
                      - name: Vacation Hours
                        hours: '20.000'
                      - name: Sick Hours
                        hours: '0.000'
                      - name: Holiday Hours
                        hours: '0.000'
                    benefits:
                      - name: Group Term Life
                        employee_deduction: '100.00'
                        company_contribution: '50.00'
                        imputed: true
                      - name: 401K
                        employee_deduction: '100.00'
                        company_contribution: '50.00'
                        imputed: false
                    deductions:
                      - name: Child Support
                        amount: '80.00'
                    taxes:
                      - name: Federal Income Tax
                        employer: false
                        amount: '646.69'
                      - name: Social Security
                        employer: true
                        amount: '191.25'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/payrolls/{payroll_id}/employees/{employee_id}/pay_stub:
    get:
      tags:
        - Payroll > Payrolls
      summary: Get an employee pay stub (pdf)
      description: >-
        Get an employee's pay stub for the specified payroll. By default, an
        application/pdf response will be returned. No other content types are
        currently supported, but may be supported in the future.


        scope: `pay_stubs:read`
      parameters:
        - name: payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the payroll
          example: <string>
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}/pay_stubs:
    get:
      tags:
        - Payroll > Payrolls
      summary: Get an employee's pay stubs
      description: |-
        Get an employee's pay stubs

        scope: `pay_stubs:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: d2cec746-caee-464a-bcaf-00d93f7049c9
                  check_date: '2023-11-24'
                  gross_pay: 880
                  net_pay: 541.02
                  payroll_uuid: a039cafb-745e-4af4-bf1e-935a86fc18e0
                  check_amount: 500.2
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/payrolls/{payroll_id}/generated_documents/printable_payroll_checks:
    post:
      tags:
        - Payroll > Payrolls
      summary: Generate payroll printable checks (pdf)
      description: >-
        This endpoint initiates the generation of employee checks for the
        payroll specified by payroll_id. A generation status and corresponding
        generated document request_uuid will be returned. Use the generated
        document GET endpoint with document_type: `printable_payroll_checks` and
        request_uuid to poll the check generation process and retrieve the
        generated check URL upon completion.


        scope: `generated_documents:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                printing_format: <string>
                starting_check_number: <integer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the payroll
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                payroll_uuid: a83d0bd8-7d20-43b9-834c-6d514ef6cb20
                printing_format: top
                starting_check_number: '10'
                request_uuid: p83d0ca8-7d41-42a9-834y-7d218ef6cb20
                status: pending
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/external_payrolls:
    post:
      tags:
        - Payroll > External Payrolls
      summary: Create a new external payroll for a company
      description: |-
        Creates a new external payroll for the company.

        scope: `external_payrolls:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                check_date: <string>
                payment_period_start_date: <string>
                payment_period_end_date: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c5fdae57-5483-4529-9aae-f0edceed92d4
                company_uuid: bcb305b0-2855-4025-8d22-e484a9e6b7c9
                check_date: '2022-06-03'
                payment_period_start_date: '2022-05-15'
                payment_period_end_date: '2022-05-30'
                status: unprocessed
                external_payroll_items:
                  - employee_uuid: 44f7cba9-7a3d-4f08-b7bd-6fcf5211f8ca
                    earnings:
                      - amount: 10000
                        hours: 0
                        earning_type: CompanyPayType
                        earning_id: 1
                      - amount: 500
                        hours: 0
                        earning_type: CompanyEarningType
                        earning_id: 4
                    benefits:
                      - benefit_id: 22
                        company_contribution_amount: 100
                        employee_deduction_amount: 50
                      - benefit_id: 25
                        company_contribution_amount: 0
                        employee_deduction_amount: 300
                    taxes:
                      - tax_id: 1
                        amount: 400
                      - tax_id: 2
                        amount: 60
                applicable_earnings:
                  - earning_type: CompanyPayType
                    earning_id: 1
                    name: Regular Wages
                    input_type: amount
                    category: default
                  - earning_type: CompanyEarningType
                    earning_id: 4
                    name: Cash Tips
                    input_type: amount
                    category: default
                applicable_benefits:
                  - id: 22
                    description: Kaiser
                    active: true
                  - id: 25
                    description: HSA
                    active: true
                applicable_taxes:
                  - id: 1
                    name: Federal Income Tax
                    employer_tax: false
                    resident_tax: false
                  - id: 2
                    name: Social Security
                    employer_tax: false
                    resident_tax: false
                metadata:
                  deletable: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Payroll > External Payrolls
      summary: Get external payrolls for a company
      description: |-
        Get an external payroll for a given company.

        scope: `external_payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: c5fdae57-5483-4529-9aae-f0edceed92d4
                  company_uuid: bcb305b0-2855-4025-8d22-e484a9e6b7c9
                  check_date: '2022-06-03'
                  payment_period_start_date: '2022-05-15'
                  payment_period_end_date: '2022-05-30'
                  status: unprocessed
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}:
    get:
      tags:
        - Payroll > External Payrolls
      summary: Get an external payroll
      description: |-
        Get an external payroll for a given company.

        scope: `external_payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
        - name: external_payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the external payroll
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c5fdae57-5483-4529-9aae-f0edceed92d4
                company_uuid: bcb305b0-2855-4025-8d22-e484a9e6b7c9
                check_date: '2022-06-03'
                payment_period_start_date: '2022-05-15'
                payment_period_end_date: '2022-05-30'
                status: unprocessed
                external_payroll_items:
                  - employee_uuid: 44f7cba9-7a3d-4f08-b7bd-6fcf5211f8ca
                    earnings:
                      - amount: 10000
                        hours: 0
                        earning_type: CompanyPayType
                        earning_id: 1
                      - amount: 500
                        hours: 0
                        earning_type: CompanyEarningType
                        earning_id: 4
                    benefits:
                      - benefit_id: 22
                        company_contribution_amount: 100
                        employee_deduction_amount: 50
                      - benefit_id: 25
                        company_contribution_amount: 0
                        employee_deduction_amount: 300
                    taxes:
                      - tax_id: 1
                        amount: 400
                      - tax_id: 2
                        amount: 60
                applicable_earnings:
                  - earning_type: CompanyPayType
                    earning_id: 1
                    name: Regular Wages
                    input_type: amount
                    category: default
                  - earning_type: CompanyEarningType
                    earning_id: 4
                    name: Cash Tips
                    input_type: amount
                    category: default
                applicable_benefits:
                  - id: 22
                    description: Kaiser
                    active: true
                  - id: 25
                    description: HSA
                    active: true
                applicable_taxes:
                  - id: 1
                    name: Federal Income Tax
                    employer_tax: false
                    resident_tax: false
                  - id: 2
                    name: Social Security
                    employer_tax: false
                    resident_tax: false
                metadata:
                  deletable: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    delete:
      tags:
        - Payroll > External Payrolls
      summary: Delete an external payroll
      description: |-
        Delete an external payroll.

        scope: `external_payrolls:write`
      parameters:
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
        - name: external_payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the external payroll
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Payroll > External Payrolls
      summary: Update an external payroll
      description: |-
        Update an external payroll with a list of external payroll items

        scope: `external_payrolls:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                replace_fields: <boolean>
                external_payroll_items:
                  - employee_uuid: <string>
                    earnings:
                      - hours: <string>
                        amount: <string>
                        earning_id: <integer>
                        earning_type: <string>
                      - hours: <string>
                        amount: <string>
                        earning_id: <integer>
                        earning_type: <string>
                    benefits:
                      - company_contribution_amount: <string>
                        employee_deduction_amount: <string>
                        benefit_id: <integer>
                      - company_contribution_amount: <string>
                        employee_deduction_amount: <string>
                        benefit_id: <integer>
                    taxes:
                      - amount: <string>
                        tax_id: <integer>
                      - amount: <string>
                        tax_id: <integer>
                  - employee_uuid: <string>
                    earnings:
                      - hours: <string>
                        amount: <string>
                        earning_id: <integer>
                        earning_type: <string>
                      - hours: <string>
                        amount: <string>
                        earning_id: <integer>
                        earning_type: <string>
                    benefits:
                      - company_contribution_amount: <string>
                        employee_deduction_amount: <string>
                        benefit_id: <integer>
                      - company_contribution_amount: <string>
                        employee_deduction_amount: <string>
                        benefit_id: <integer>
                    taxes:
                      - amount: <string>
                        tax_id: <integer>
                      - amount: <string>
                        tax_id: <integer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
        - name: external_payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the external payroll
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c5fdae57-5483-4529-9aae-f0edceed92d4
                company_uuid: bcb305b0-2855-4025-8d22-e484a9e6b7c9
                check_date: '2022-06-03'
                payment_period_start_date: '2022-05-15'
                payment_period_end_date: '2022-05-30'
                status: unprocessed
                external_payroll_items:
                  - employee_uuid: 44f7cba9-7a3d-4f08-b7bd-6fcf5211f8ca
                    earnings:
                      - amount: 10000
                        hours: 0
                        earning_type: CompanyPayType
                        earning_id: 1
                      - amount: 500
                        hours: 0
                        earning_type: CompanyEarningType
                        earning_id: 4
                    benefits:
                      - benefit_id: 22
                        company_contribution_amount: 100
                        employee_deduction_amount: 50
                      - benefit_id: 25
                        company_contribution_amount: 0
                        employee_deduction_amount: 300
                    taxes:
                      - tax_id: 1
                        amount: 400
                      - tax_id: 2
                        amount: 60
                applicable_earnings:
                  - earning_type: CompanyPayType
                    earning_id: 1
                    name: Regular Wages
                    input_type: amount
                    category: default
                  - earning_type: CompanyEarningType
                    earning_id: 4
                    name: Cash Tips
                    input_type: amount
                    category: default
                applicable_benefits:
                  - id: 22
                    description: Kaiser
                    active: true
                  - id: 25
                    description: HSA
                    active: true
                applicable_taxes:
                  - id: 1
                    name: Federal Income Tax
                    employer_tax: false
                    resident_tax: false
                  - id: 2
                    name: Social Security
                    employer_tax: false
                    resident_tax: false
                metadata:
                  deletable: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}/calculate_taxes:
    get:
      tags:
        - Payroll > External Payrolls
      summary: Get tax suggestions for an external payroll
      description: >-
        Get tax suggestions for an external payroll. Earnings and/or benefits

        data must be saved prior to the calculation in order to retrieve
        accurate

        tax calculation.


        scope: `external_payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
        - name: external_payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the external payroll
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - employee_uuid: d21848d5-446f-48a8-9430-30fbefeabda4
                  tax_suggestions:
                    - tax_id: 1
                      amount: 500
                    - tax_id: 2
                      amount: 100
                    - tax_id: 4
                      amount: 30
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_uuid}/external_payrolls/tax_liabilities:
    get:
      tags:
        - Payroll > External Payrolls
      summary: Get tax liabilities
      description: |-
        Get tax liabilities from aggregate external payrolls for a company.

        scope: `external_payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - tax_id: 1
                  tax_name: Federal Income Tax
                  last_unpaid_external_payroll_uuid: null
                  possible_liabilities:
                    - liability_amount: 0
                      payroll_check_date: null
                      external_payroll_uuid: null
                    - liability_amount: 3000
                      payroll_check_date: '2022-06-01'
                      external_payroll_uuid: 1bf1efe1-72d4-4e6e-a181-611f3ea66435
                - tax_id: 2
                  tax_name: Social Security
                  last_unpaid_external_payroll_uuid: null
                  possible_liabilities:
                    - liability_amount: 0
                      payroll_check_date: null
                      external_payroll_uuid: null
                    - liability_amount: 50
                      payroll_check_date: '2022-06-01'
                      external_payroll_uuid: 1bf1efe1-72d4-4e6e-a181-611f3ea66435
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Payroll > External Payrolls
      summary: Update tax liabilities
      description: |-
        Update tax liabilities for a company.

        scope: `external_payrolls:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                liability_selections:
                  - tax_id: <integer>
                    last_unpaid_external_payroll_uuid: <string>
                    unpaid_liability_amount: <number>
                  - tax_id: <integer>
                    last_unpaid_external_payroll_uuid: <string>
                    unpaid_liability_amount: <number>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - tax_id: 1
                  tax_name: Federal Income Tax
                  last_unpaid_external_payroll_uuid: null
                  possible_liabilities:
                    - liability_amount: 0
                      payroll_check_date: null
                      external_payroll_uuid: null
                    - liability_amount: 3000
                      payroll_check_date: '2022-06-01'
                      external_payroll_uuid: 1bf1efe1-72d4-4e6e-a181-611f3ea66435
                - tax_id: 2
                  tax_name: Social Security
                  last_unpaid_external_payroll_uuid: null
                  possible_liabilities:
                    - liability_amount: 0
                      payroll_check_date: null
                      external_payroll_uuid: null
                    - liability_amount: 50
                      payroll_check_date: '2022-06-01'
                      external_payroll_uuid: 1bf1efe1-72d4-4e6e-a181-611f3ea66435
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/external_payrolls/tax_liabilities/finish:
    put:
      tags:
        - Payroll > External Payrolls
      summary: Finalize tax liabilities options and convert into processed payrolls
      description: >-
        Finalizes tax liabilities for a company. All external payrolls edit
        action will be disabled.


        scope: `external_payrolls:write`
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/employees:
    post:
      tags:
        - W2 Employees > Employees
      summary: Create an employee
      description: |-
        Create an employee.

        scope: `employees:manage`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                first_name: <string>
                last_name: <string>
                middle_initial: <string>
                date_of_birth: <string>
                email: <string>
                ssn: <string>
                self_onboarding: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 7757869432666662
                uuid: 4b3f930f-82cd-48a8-b797-798686e12e5e
                first_name: Isom
                middle_initial: null
                last_name: Jaskolski
                email: dane7757869450111550@botsford.net
                company_id: 7756341740978008
                company_uuid: a007e1ab-3595-43c2-ab4b-af7a5af2e365
                manager_id: 7757869432666665
                manager_uuid: 5e53e257-c8d6-45aa-aa8a-ec99283a3acd
                version: 1c7ba9d62c8bafbfff998ffccad5d296
                department: Stage Hand
                department_uuid: 56260b3d-c375-415c-b77a-75d99f717193
                terminated: false
                two_percent_shareholder: false
                onboarded: true
                onboarding_status: onboarding_completed
                jobs:
                  - id: 7757869441038001
                    version: 6c0ed1521e8b86eb36bd4455a63a2dac
                    employee_id: 7757869432666662
                    current_compensation_id: 7757869444844982
                    payment_unit: Year
                    primary: true
                    title: Client Support Director
                    compensations:
                      - id: 7757869444844982
                        version: 2cd4b18662395eb53bcf80d5b5447f36
                        payment_unit: Year
                        flsa_status: Exempt
                        job_id: 7757869441038001
                        effective_date: '2021-01-20'
                        rate: '70000.00'
                        adjust_for_minimum_wage: false
                        minimum_wages: []
                    rate: '70000.00'
                    hire_date: '2020-01-20'
                    location_id: 7757727716657803
                    location:
                      id: 7757727716657803
                      street_1: 412 Kiera Stravenue
                      street_2: Suite 391
                      city: San Francisco
                      state: CA
                      zip: '94107'
                      country: USA
                      inactive: false
                eligible_paid_time_off:
                  - name: Sick Hours
                    policy_name: Sick Policy
                    policy_uuid: 9940d205-9904-4e55-9fec-652628e84af7
                    accrual_unit: Hour
                    accrual_rate: '208.0'
                    accrual_method: per_hour_worked
                    accrual_period: Year
                    accrual_balance: '31.8'
                    maximum_accrual_balance: '240.0'
                    paid_at_termination: false
                  - name: Vacation Hours
                    policy_name: Vacation Policy
                    policy_uuid: ab59de61-239f-4805-933b-0e3360ed291c
                    accrual_unit: Hour
                    accrual_rate: '208.0'
                    accrual_period: Year
                    accrual_balance: '77.8'
                    maximum_accrual_balance: '240.0'
                    paid_at_termination: true
                terminations: []
                custom_fields:
                  - id: ee515986-f3ca-49da-b576-2691b95262f9
                    company_custom_field_id: ea7e5d57-6abb-47d7-b654-347c142886c0
                    name: employee_level
                    description: Employee Level
                    type: text
                    value: '2'
                    selection_options: null
                  - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                    company_custom_field_id: 299650e4-e970-4acf-9bf0-6f05585d20ba
                    name: t-shirt size
                    description: What is your t-shirt size?
                    type: text
                    value: md
                    selection_options: null
                  - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                    company_custom_field_id: 024ec137-6c92-43a3-b061-14a9720531d6
                    name: favorite fruit
                    description: Which is your favorite fruit?
                    type: radio
                    value: apple
                    selection_options:
                      - apple
                      - banana
                      - orange
                home_address:
                  version: bfc6ed1d49aa9677265232c470fdbc3e
                  employee_id: 7757869432666662
                  street_1: 73243 Wuckert Prairie
                  street_2: Suite 189
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                  active: true
                garnishments: []
                date_of_birth: '1986-06-25'
                has_ssn: false
                ssn: ''
                phone: '1234567890'
                preferred_first_name: Angel
                work_email: null
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - W2 Employees > Employees
      summary: Get employees of a company
      description: >-
        Get all of the employees, onboarding, active and terminated, for a given
        company.


        scope: `employees:read`
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: terminated
          in: query
          schema:
            type: string
          description: Filters employees by the provided boolean
          example: <boolean>
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Include the requested attribute(s) in each employee response,
            multiple options are comma separated. Available options:

            - all_compensations: Include all effective dated compensations for
            each job instead of only the current compensation

            - custom_fields: Include employees' custom fields
          example: <string>
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 7757869432666660
                  uuid: 9779767c-6044-48e0-bf68-aeb370b9a2e7
                  first_name: Nicole
                  middle_initial: M
                  last_name: Boehm
                  email: kory7757869450111548@barton-hermiston.io
                  company_id: 7756341740978008
                  company_uuid: c44d66dc-c41b-4a60-9e25-5e93ff8583f2
                  manager_id: 7757869432666662
                  manager_uuid: 5e53e257-c8d6-45aa-aa8a-ec99283a3acd
                  version: 414dedaca594b77135e0b8d2f398516d
                  department: Stage Hand
                  department_uuid: 1802465d-4f68-4865-920c-1307ab095f12
                  terminated: false
                  two_percent_shareholder: false
                  onboarded: true
                  onboarding_status: onboarding_completed
                  jobs:
                    - id: 7757869441037999
                      version: 91179081a7309c9fbd31bb3cf7b9893e
                      employee_id: 7757869432666660
                      current_compensation_id: 7757869444844980
                      payment_unit: Hour
                      primary: true
                      title: Client Support Manager
                      compensations:
                        - id: 7757869444844980
                          version: 233f0096a8015e62d9795fadf1fd300d
                          payment_unit: Hour
                          flsa_status: Nonexempt
                          job_id: 7757869441037999
                          effective_date: '2021-01-20'
                          rate: '22.00'
                          adjust_for_minimum_wage: false
                          minimum_wages: []
                      rate: '22.00'
                      hire_date: '2020-01-20'
                      location_id: 7757727716657803
                      location:
                        id: 7757727716657803
                        street_1: 412 Kiera Stravenue
                        street_2: Suite 391
                        city: San Francisco
                        state: CA
                        zip: '94107'
                        country: USA
                        inactive: false
                  eligible_paid_time_off:
                    - name: Sick Hours
                      policy_name: Sick Policy
                      policy_uuid: 9940d205-9904-4e55-9fec-652628e84af7
                      accrual_unit: Hour
                      accrual_rate: '208.0'
                      accrual_method: per_hour_worked
                      accrual_period: Year
                      accrual_balance: '71.0'
                      maximum_accrual_balance: '240.0'
                      paid_at_termination: false
                    - name: Vacation Hours
                      policy_name: Vacation Policy
                      policy_uuid: 8b312f0e-30e7-4810-9c06-1177a6484f2d
                      accrual_unit: Hour
                      accrual_rate: '208.0'
                      accrual_period: Year
                      accrual_balance: '34.0'
                      maximum_accrual_balance: '240.0'
                      paid_at_termination: true
                  terminations: []
                  home_address:
                    version: 7776defce07496b82f3f1ed469e48ae5
                    employee_id: 7757869432666660
                    street_1: 3772 Reynolds Centers
                    street_2: Suite 461
                    city: San Francisco
                    state: CA
                    zip: '94107'
                    country: USA
                    active: true
                  garnishments: []
                  date_of_birth: '1996-05-08'
                  has_ssn: true
                  ssn: ''
                  phone: '1234567890'
                  preferred_first_name: Vanessa
                  work_email: null
                - id: 7757869432666661
                  uuid: d7cb289a-af62-4120-9cd5-acda324b5c04
                  first_name: Maci
                  middle_initial: M
                  last_name: Cassin
                  email: claud_reinger7757869450111549@gutkowski.net
                  company_id: 7756341740978008
                  company_uuid: 4522d043-5731-406d-a129-de1808042a32
                  manager_id: 7757869432666665
                  manager_uuid: 5e53e257-c8d6-45aa-aa8a-ec99283a3acd
                  version: e867459e1360fa71e78b88142923d341
                  department: Band
                  department_uuid: 1802465d-4f68-4865-920c-1307ab095f12
                  terminated: false
                  two_percent_shareholder: false
                  onboarded: true
                  onboarding_status: onboarding_completed
                  jobs:
                    - id: 7757869441038000
                      version: d0e719137f89ca3dd334dd4cc248ffbb
                      employee_id: 7757869432666661
                      current_compensation_id: 7757869444844981
                      payment_unit: Year
                      primary: true
                      title: Account Director
                      compensations:
                        - id: 7757869444844981
                          version: 994b75511d1debac5d7e2ddeae13679f
                          payment_unit: Year
                          flsa_status: Exempt
                          job_id: 7757869441038000
                          effective_date: '2021-01-20'
                          rate: '78000.00'
                          adjust_for_minimum_wage: false
                          minimum_wages: []
                      rate: '78000.00'
                      hire_date: '2020-01-20'
                      location_id: 7757727716657803
                      location:
                        id: 7757727716657803
                        street_1: 412 Kiera Stravenue
                        street_2: Suite 391
                        city: San Francisco
                        state: CA
                        zip: '94107'
                        country: USA
                        inactive: false
                  eligible_paid_time_off:
                    - name: Sick Hours
                      policy_name: Sick Policy
                      policy_uuid: 8b312f0e-30e7-4810-9c06-1177a6484f2d
                      accrual_unit: Hour
                      accrual_rate: '208.0'
                      accrual_method: per_hour_worked
                      accrual_period: Year
                      accrual_balance: '74.0'
                      maximum_accrual_balance: '240.0'
                      paid_at_termination: false
                    - name: Vacation Hours
                      policy_name: Vacation Policy
                      policy_uuid: 0d4c755e-50ac-4c54-b46e-81bdfa03da5b
                      accrual_unit: Hour
                      accrual_rate: '208.0'
                      accrual_period: Year
                      accrual_balance: '16.0'
                      maximum_accrual_balance: '240.0'
                      paid_at_termination: true
                  terminations: []
                  home_address:
                    version: b5f18a277987fe9b02230ef36910a248
                    employee_id: 7757869432666661
                    street_1: 8078 Bogisich Estate
                    street_2: Suite 892
                    city: San Francisco
                    state: CA
                    zip: '94107'
                    country: USA
                    active: true
                  garnishments: []
                  custom_fields:
                    - id: ee515986-f3ca-49da-b576-2691b95262f9
                      company_custom_field_id: ea7e5d57-6abb-47d7-b654-347c142886c0
                      name: employee_level
                      description: Employee Level
                      type: text
                      value: '2'
                      selection_options: null
                    - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                      company_custom_field_id: 299650e4-e970-4acf-9bf0-6f05585d20ba
                      name: t-shirt size
                      description: What is your t-shirt size?
                      type: text
                      value: md
                      selection_options: null
                    - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                      company_custom_field_id: 024ec137-6c92-43a3-b061-14a9720531d6
                      name: favorite fruit
                      description: Which is your favorite fruit?
                      type: radio
                      value: apple
                      selection_options:
                        - apple
                        - banana
                        - orange
                  date_of_birth: '1995-09-21'
                  has_ssn: true
                  ssn: ''
                  phone: '1234567890'
                  preferred_first_name: Denis
                  work_email: null
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}:
    get:
      tags:
        - W2 Employees > Employees
      summary: Get an employee
      description: |
        Get an employee.

        scope: `employees:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Include the requested attribute(s) in each employee response,
            multiple options are comma separated. Available options:

            - all_compensations: Include all effective dated compensations for
            each job instead of only the current compensation

            - custom_fields: Include employees' custom fields
          example: <string>
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 7757869432666662
                uuid: 4b3f930f-82cd-48a8-b797-798686e12e5e
                first_name: Isom
                middle_initial: null
                last_name: Jaskolski
                email: dane7757869450111550@botsford.net
                company_id: 7756341740978008
                company_uuid: a007e1ab-3595-43c2-ab4b-af7a5af2e365
                manager_id: 7757869432666665
                manager_uuid: 5e53e257-c8d6-45aa-aa8a-ec99283a3acd
                version: 1c7ba9d62c8bafbfff998ffccad5d296
                department: Stage Hand
                department_uuid: 56260b3d-c375-415c-b77a-75d99f717193
                terminated: false
                two_percent_shareholder: false
                onboarded: true
                onboarding_status: onboarding_completed
                jobs:
                  - id: 7757869441038001
                    version: 6c0ed1521e8b86eb36bd4455a63a2dac
                    employee_id: 7757869432666662
                    current_compensation_id: 7757869444844982
                    payment_unit: Year
                    primary: true
                    title: Client Support Director
                    compensations:
                      - id: 7757869444844982
                        version: 2cd4b18662395eb53bcf80d5b5447f36
                        payment_unit: Year
                        flsa_status: Exempt
                        job_id: 7757869441038001
                        effective_date: '2021-01-20'
                        rate: '70000.00'
                        adjust_for_minimum_wage: false
                        minimum_wages: []
                    rate: '70000.00'
                    hire_date: '2020-01-20'
                    location_id: 7757727716657803
                    location:
                      id: 7757727716657803
                      street_1: 412 Kiera Stravenue
                      street_2: Suite 391
                      city: San Francisco
                      state: CA
                      zip: '94107'
                      country: USA
                      inactive: false
                eligible_paid_time_off:
                  - name: Sick Hours
                    policy_name: Sick Policy
                    policy_uuid: 9940d205-9904-4e55-9fec-652628e84af7
                    accrual_unit: Hour
                    accrual_rate: '208.0'
                    accrual_method: per_hour_worked
                    accrual_period: Year
                    accrual_balance: '31.8'
                    maximum_accrual_balance: '240.0'
                    paid_at_termination: false
                  - name: Vacation Hours
                    policy_name: Vacation Policy
                    policy_uuid: ab59de61-239f-4805-933b-0e3360ed291c
                    accrual_unit: Hour
                    accrual_rate: '208.0'
                    accrual_period: Year
                    accrual_balance: '77.8'
                    maximum_accrual_balance: '240.0'
                    paid_at_termination: true
                terminations: []
                custom_fields:
                  - id: ee515986-f3ca-49da-b576-2691b95262f9
                    company_custom_field_id: ea7e5d57-6abb-47d7-b654-347c142886c0
                    name: employee_level
                    description: Employee Level
                    type: text
                    value: '2'
                    selection_options: null
                  - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                    company_custom_field_id: 299650e4-e970-4acf-9bf0-6f05585d20ba
                    name: t-shirt size
                    description: What is your t-shirt size?
                    type: text
                    value: md
                    selection_options: null
                  - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                    company_custom_field_id: 024ec137-6c92-43a3-b061-14a9720531d6
                    name: favorite fruit
                    description: Which is your favorite fruit?
                    type: radio
                    value: apple
                    selection_options:
                      - apple
                      - banana
                      - orange
                home_address:
                  version: bfc6ed1d49aa9677265232c470fdbc3e
                  employee_id: 7757869432666662
                  street_1: 73243 Wuckert Prairie
                  street_2: Suite 189
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                  active: true
                garnishments: []
                date_of_birth: '1986-06-25'
                has_ssn: false
                ssn: ''
                phone: '1234567890'
                preferred_first_name: Angel
                work_email: null
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Employees
      summary: Update an employee
      description: |-
        Update an employee.

        scope: `employees:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                first_name: <string>
                middle_initial: <string>
                last_name: <string>
                date_of_birth: <string>
                email: <string>
                ssn: <string>
                two_percent_shareholder: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 7757869432666662
                uuid: 4b3f930f-82cd-48a8-b797-798686e12e5e
                first_name: Isom
                middle_initial: null
                last_name: Jaskolski
                email: dane7757869450111550@botsford.net
                company_id: 7756341740978008
                company_uuid: a007e1ab-3595-43c2-ab4b-af7a5af2e365
                manager_id: 7757869432666665
                manager_uuid: 5e53e257-c8d6-45aa-aa8a-ec99283a3acd
                version: 1c7ba9d62c8bafbfff998ffccad5d296
                department: Stage Hand
                department_uuid: 56260b3d-c375-415c-b77a-75d99f717193
                terminated: false
                two_percent_shareholder: false
                onboarded: true
                onboarding_status: onboarding_completed
                jobs:
                  - id: 7757869441038001
                    version: 6c0ed1521e8b86eb36bd4455a63a2dac
                    employee_id: 7757869432666662
                    current_compensation_id: 7757869444844982
                    payment_unit: Year
                    primary: true
                    title: Client Support Director
                    compensations:
                      - id: 7757869444844982
                        version: 2cd4b18662395eb53bcf80d5b5447f36
                        payment_unit: Year
                        flsa_status: Exempt
                        job_id: 7757869441038001
                        effective_date: '2021-01-20'
                        rate: '70000.00'
                        adjust_for_minimum_wage: false
                        minimum_wages: []
                    rate: '70000.00'
                    hire_date: '2020-01-20'
                    location_id: 7757727716657803
                    location:
                      id: 7757727716657803
                      street_1: 412 Kiera Stravenue
                      street_2: Suite 391
                      city: San Francisco
                      state: CA
                      zip: '94107'
                      country: USA
                      inactive: false
                eligible_paid_time_off:
                  - name: Sick Hours
                    policy_name: Sick Policy
                    policy_uuid: 9940d205-9904-4e55-9fec-652628e84af7
                    accrual_unit: Hour
                    accrual_rate: '208.0'
                    accrual_method: per_hour_worked
                    accrual_period: Year
                    accrual_balance: '31.8'
                    maximum_accrual_balance: '240.0'
                    paid_at_termination: false
                  - name: Vacation Hours
                    policy_name: Vacation Policy
                    policy_uuid: ab59de61-239f-4805-933b-0e3360ed291c
                    accrual_unit: Hour
                    accrual_rate: '208.0'
                    accrual_period: Year
                    accrual_balance: '77.8'
                    maximum_accrual_balance: '240.0'
                    paid_at_termination: true
                terminations: []
                custom_fields:
                  - id: ee515986-f3ca-49da-b576-2691b95262f9
                    company_custom_field_id: ea7e5d57-6abb-47d7-b654-347c142886c0
                    name: employee_level
                    description: Employee Level
                    type: text
                    value: '2'
                    selection_options: null
                  - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                    company_custom_field_id: 299650e4-e970-4acf-9bf0-6f05585d20ba
                    name: t-shirt size
                    description: What is your t-shirt size?
                    type: text
                    value: md
                    selection_options: null
                  - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                    company_custom_field_id: 024ec137-6c92-43a3-b061-14a9720531d6
                    name: favorite fruit
                    description: Which is your favorite fruit?
                    type: radio
                    value: apple
                    selection_options:
                      - apple
                      - banana
                      - orange
                home_address:
                  version: bfc6ed1d49aa9677265232c470fdbc3e
                  employee_id: 7757869432666662
                  street_1: 73243 Wuckert Prairie
                  street_2: Suite 189
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                  active: true
                garnishments: []
                date_of_birth: '1986-06-25'
                has_ssn: false
                ssn: ''
                phone: '1234567890'
                preferred_first_name: Angel
                work_email: null
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - W2 Employees > Employees
      summary: Delete an onboarding employee
      description: >-
        Use this endpoint to delete an employee who is in onboarding. Deleting

        an onboarded employee is not allowed. Please check out the Terminations
        api

        if you need to terminate an onboarded employee.


        scope: `employees:manage`
      parameters:
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}/home_address:
    get:
      tags:
        - W2 Employees > Employees
      summary: Get an employee's home address
      description: >-
        The home address of an employee is used to determine certain tax
        information about them. Addresses are geocoded on create and update to
        ensure validity.


        scope: `employees:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                employee_id: 12345
                street_1: 644 Fay Vista
                street_2: Suite 842
                city: Richmond
                state: VA
                zip: '23218'
                country: USA
                active: false
                effective_date: '2021-01-01'
                courtesy_withholding: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Employees
      summary: Update an employee's home address
      description: >-
        The home address of an employee is used to determine certain tax
        information about them. Addresses are geocoded on create and update to
        ensure validity.


        scope: `employees:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                street_1: <string>
                street_2: <string>
                city: <string>
                state: <string>
                zip: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                employee_id: 12345
                street_1: 644 Fay Vista
                street_2: Suite 842
                city: Richmond
                state: VA
                zip: '23218'
                country: USA
                active: false
                effective_date: '2021-01-01'
                courtesy_withholding: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_id}/custom_fields:
    get:
      tags:
        - W2 Employees > Employees
      summary: Get an employee's custom fields
      description: |-
        Returns a list of the employee's custom fields.

        scope: `employees:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                custom_fields:
                  - id: ee515986-f3ca-49da-b576-2691b95262f9
                    company_custom_field_id: ea7e5d57-6abb-47d7-b654-347c142886c0
                    name: employee_level
                    description: Employee Level
                    type: text
                    value: '2'
                    selection_options: null
                  - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                    company_custom_field_id: 299650e4-e970-4acf-9bf0-6f05585d20ba
                    name: t-shirt size
                    description: What is your t-shirt size?
                    type: text
                    value: md
                    selection_options: null
                  - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                    company_custom_field_id: 024ec137-6c92-43a3-b061-14a9720531d6
                    name: favorite fruit
                    description: Which is your favorite fruit?
                    type: radio
                    value: apple
                    selection_options:
                      - apple
                      - banana
                      - orange
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}/onboarding_status:
    get:
      tags:
        - W2 Employees > Employees
      summary: Get the employee's onboarding status
      description: >-
        # Description

        Retrieves an employee's onboarding status. The data returned helps
        inform the required onboarding steps and respective completion status.


        scope: `employees:read`


        ## onboarding_status


        ### Admin-facilitated onboarding

        | onboarding_status | Description |

        |:------------------|------------:|

        | `admin_onboarding_incomplete` | Admin needs to complete the full
        employee-onboarding. |

        | `onboarding_completed` | Employee has been fully onboarded and
        verified. |


        ### Employee self-onboarding

        | onboarding_status | Description |

        |:------------------|------------:|

        | `admin_onboarding_incomplete` | Admin needs to enter basic information
        about the employee. |

        | `self_onboarding_pending_invite` | Admin has the intention to invite
        the employee to self-onboard (e.g., marking a checkbox), but the system
        has not yet sent the invitation. |

        | `self_onboarding_invited` | Employee has been sent an invitation to
        self-onboard. |

        | `self_onboarding_invited_started` | Employee has started the
        self-onboarding process. |

        | `self_onboarding_invited_overdue` | Employee's start date has passed,
        and employee has still not completed self-onboarding. |

        | `self_onboarding_completed_by_employee` | Employee has completed
        entering in their information. The status should be updated via API to
        "self_onboarding_awaiting_admin_review" from here, once the Admin has
        started reviewing. |

        | `self_onboarding_awaiting_admin_review` | Admin has started to verify
        the employee's information. |

        | `onboarding_completed` | Employee has been fully onboarded and
        verified. |


        ## onboarding_steps


        | onboarding_steps | Requirement(s) to be completed |

        |:-----------------|-------------------------------:|

        | `personal_details` | Add employee's first name, last name, email, date
        of birth, social security number |

        | `compensation_details` | Associate employee to a job & compensation. |

        | `add_work_address` | Add employee work address. |

        | `add_home_address` | Add employee home address. |

        | `federal_tax_setup` | Set up federal tax withholdings. |

        | `state_tax_setup` | Set up state tax withholdings. |

        | `direct_deposit_setup` | (optional) Set up employee's direct deposit.
        |

        | `employee_form_signing` | Employee forms (e.g., W4, direct deposit
        authorization) are generated & signed. |

        | `file_new_hire_report` | File a new hire report for this employee. |

        | `admin_review` | Admin reviews & confirms employee details (only
        required for Employee self-onboarding) |
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c44d66dc-c41b-4a60-9e25-5e93ff8583f2
                onboarding_status: admin_onboarding_incomplete
                onboarding_steps:
                  - title: Personal details
                    id: personal_details
                    required: true
                    completed: false
                    requirements: []
                  - title: Enter compensation details
                    id: compensation_details
                    required: true
                    completed: false
                    requirements: []
                  - title: Add work address
                    id: add_work_address
                    required: true
                    completed: false
                    requirements: []
                  - title: Add home address
                    id: add_home_address
                    required: true
                    completed: false
                    requirements: []
                  - title: Enter federal tax withholdings
                    id: federal_tax_setup
                    required: true
                    completed: false
                    requirements: []
                  - title: Enter state tax information
                    id: state_tax_setup
                    required: true
                    completed: false
                    requirements:
                      - add_work_address
                      - add_home_address
                  - title: Direct deposit setup
                    id: direct_deposit_setup
                    required: false
                    completed: false
                    requirements: []
                  - title: Employee form signing
                    id: employee_form_signing
                    required: true
                    completed: false
                    requirements:
                      - federal_tax_setup
                      - state_tax_setup
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Employees
      summary: Update the employee's onboarding status
      description: >-
        scope: `employees:manage`


        Updates an employee's onboarding status.

        Below is a list of valid onboarding status changes depending on the
        intended action to be performed on behalf of the employee.


        | Action | current onboarding_status | new onboarding_status |

        |:------------------|:------------:|----------:|

        | Mark an employee as self-onboarding | `admin_onboarding_incomplete` |
        `self_onboarding_pending_invite` |

        | Invite an employee to self-onboard | `admin_onboarding_incomplete` or
        `self_onboarding_pending_invite` | `self_onboarding_invited` |

        | Cancel an employee's self-onboarding | `self_onboarding_invited` or
        `self_onboarding_pending_invite` | `admin_onboarding_incomplete` |

        | Review an employee's self-onboarded info |
        `self_onboarding_completed_by_employee` |
        `self_onboarding_awaiting_admin_review` |

        | Finish an employee's onboarding | `admin_onboarding_incomplete` or
        `self_onboarding_awaiting_admin_review` | `onboarding_completed` |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                onboarding_status: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c44d66dc-c41b-4a60-9e25-5e93ff8583f2
                onboarding_status: admin_onboarding_incomplete
                onboarding_steps:
                  - title: Personal details
                    id: personal_details
                    required: true
                    completed: false
                    requirements: []
                  - title: Enter compensation details
                    id: compensation_details
                    required: true
                    completed: false
                    requirements: []
                  - title: Add work address
                    id: add_work_address
                    required: true
                    completed: false
                    requirements: []
                  - title: Add home address
                    id: add_home_address
                    required: true
                    completed: false
                    requirements: []
                  - title: Enter federal tax withholdings
                    id: federal_tax_setup
                    required: true
                    completed: false
                    requirements: []
                  - title: Enter state tax information
                    id: state_tax_setup
                    required: true
                    completed: false
                    requirements:
                      - add_work_address
                      - add_home_address
                  - title: Direct deposit setup
                    id: direct_deposit_setup
                    required: false
                    completed: false
                    requirements: []
                  - title: Employee form signing
                    id: employee_form_signing
                    required: true
                    completed: false
                    requirements:
                      - federal_tax_setup
                      - state_tax_setup
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_id}/finish_onboarding:
    put:
      tags:
        - W2 Employees > Employees
      summary: Finish onboarding an employee
      description: >-
        This endpoint is currently supported but will eventually be deprecated;
        please use `/v1/employees/{employee_id}/onboarding_status` instead.


        Call this endpoint as the very last step of employee onboarding to
        complete their onboarding. When successful, the employee's `onboarded`
        attribute will be updated to true, indicating that they can be included
        in company's payrolls.


        scope: `employees:manage`
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 7757869432666662
                uuid: 4b3f930f-82cd-48a8-b797-798686e12e5e
                first_name: Isom
                middle_initial: null
                last_name: Jaskolski
                email: dane7757869450111550@botsford.net
                company_id: 7756341740978008
                company_uuid: a007e1ab-3595-43c2-ab4b-af7a5af2e365
                manager_id: 7757869432666665
                manager_uuid: 5e53e257-c8d6-45aa-aa8a-ec99283a3acd
                version: 1c7ba9d62c8bafbfff998ffccad5d296
                department: Stage Hand
                department_uuid: 56260b3d-c375-415c-b77a-75d99f717193
                terminated: false
                two_percent_shareholder: false
                onboarded: true
                onboarding_status: onboarding_completed
                jobs:
                  - id: 7757869441038001
                    version: 6c0ed1521e8b86eb36bd4455a63a2dac
                    employee_id: 7757869432666662
                    current_compensation_id: 7757869444844982
                    payment_unit: Year
                    primary: true
                    title: Client Support Director
                    compensations:
                      - id: 7757869444844982
                        version: 2cd4b18662395eb53bcf80d5b5447f36
                        payment_unit: Year
                        flsa_status: Exempt
                        job_id: 7757869441038001
                        effective_date: '2021-01-20'
                        rate: '70000.00'
                        adjust_for_minimum_wage: false
                        minimum_wages: []
                    rate: '70000.00'
                    hire_date: '2020-01-20'
                    location_id: 7757727716657803
                    location:
                      id: 7757727716657803
                      street_1: 412 Kiera Stravenue
                      street_2: Suite 391
                      city: San Francisco
                      state: CA
                      zip: '94107'
                      country: USA
                      inactive: false
                eligible_paid_time_off:
                  - name: Sick Hours
                    policy_name: Sick Policy
                    policy_uuid: 9940d205-9904-4e55-9fec-652628e84af7
                    accrual_unit: Hour
                    accrual_rate: '208.0'
                    accrual_method: per_hour_worked
                    accrual_period: Year
                    accrual_balance: '31.8'
                    maximum_accrual_balance: '240.0'
                    paid_at_termination: false
                  - name: Vacation Hours
                    policy_name: Vacation Policy
                    policy_uuid: ab59de61-239f-4805-933b-0e3360ed291c
                    accrual_unit: Hour
                    accrual_rate: '208.0'
                    accrual_period: Year
                    accrual_balance: '77.8'
                    maximum_accrual_balance: '240.0'
                    paid_at_termination: true
                terminations: []
                custom_fields:
                  - id: ee515986-f3ca-49da-b576-2691b95262f9
                    company_custom_field_id: ea7e5d57-6abb-47d7-b654-347c142886c0
                    name: employee_level
                    description: Employee Level
                    type: text
                    value: '2'
                    selection_options: null
                  - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                    company_custom_field_id: 299650e4-e970-4acf-9bf0-6f05585d20ba
                    name: t-shirt size
                    description: What is your t-shirt size?
                    type: text
                    value: md
                    selection_options: null
                  - id: 3796e08d-c2e3-434c-b4de-4ce1893e7b59
                    company_custom_field_id: 024ec137-6c92-43a3-b061-14a9720531d6
                    name: favorite fruit
                    description: Which is your favorite fruit?
                    type: radio
                    value: apple
                    selection_options:
                      - apple
                      - banana
                      - orange
                home_address:
                  version: bfc6ed1d49aa9677265232c470fdbc3e
                  employee_id: 7757869432666662
                  street_1: 73243 Wuckert Prairie
                  street_2: Suite 189
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                  active: true
                garnishments: []
                date_of_birth: '1986-06-25'
                has_ssn: false
                ssn: ''
                phone: '1234567890'
                preferred_first_name: Angel
                work_email: null
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_uuid}/time_off_activities:
    get:
      tags:
        - W2 Employees > Employees
      summary: Get employee time off activities
      description: |-
        Get employee time off activities.

        scope: `employee_time_off_activities:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: time_off_type
          in: query
          schema:
            type: string
          description: >-
            (Required) The time off type name you want to query data for. ex:
            'sick' or 'vacation'
          example: <string>
        - name: employee_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                policy_uuid: a7838f74-4c29-4b70-9bfb-02a4e3e60709
                time_off_type: vacation
                policy_name: Paid Time Off
                event_type: TimeOffEvent::AddToPolicy
                event_description: 'Added to policy: Vacation Per Hour Worked'
                effective_time: '2022-09-27T13:43:03.000-07:00'
                balance: '0.0'
                balance_change: '0.0'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_uuid}/federal_taxes:
    get:
      tags:
        - W2 Employees > Employee Tax Setup
      summary: Get an employee's federal taxes
      description: |-
        Get attributes relevant for an employee's federal taxes.

         scope: `employee_federal_taxes:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 56a489ce86ed6c1b0f0cecc4050a0b01
                filing_status: Single
                extra_withholding: '0.0'
                two_jobs: true
                dependents_amount: '0.0'
                other_income: '0.0'
                deductions: '0.0'
                employee_id: 29
                w4_data_type: rev_2020_w4
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Employee Tax Setup
      summary: Update an employee's federal taxes
      description: |-
        Update attributes relevant for an employee's federal taxes.

        scope: `employee_federal_taxes:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                filing_status: <string>
                extra_withholding: <string>
                two_jobs: <boolean>
                dependents_amount: <string>
                other_income: <string>
                deductions: <string>
                w4_data_type: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 56a489ce86ed6c1b0f0cecc4050a0b01
                filing_status: Single
                extra_withholding: '0.0'
                two_jobs: true
                dependents_amount: '0.0'
                other_income: '0.0'
                deductions: '0.0'
                employee_id: 29
                w4_data_type: rev_2020_w4
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_uuid}/state_taxes:
    get:
      tags:
        - W2 Employees > Employee Tax Setup
      summary: Get an employee's state taxes
      description: >
        Get attributes relevant for an employee's state taxes.


        The data required to correctly calculate an employee's state taxes
        varies by both home and work location. This API returns information
        about each question that must be answered grouped by state. Mostly
        commonly, an employee lives and works in the same state and will only
        have questions for a single state. The response contains metadata about
        each question, the type of answer expected, and the current answer
        stored in Gusto for that question.


        Answers are represented by an array. Today, this array can only be empty
        or contain exactly one element, but is designed to allow for forward
        compatibility with effective-dated fields. Until effective dated answers
        are supported, the `valid_from` and `valid_up_to` must always be
        `"2010-01-01"` and `null` respectively.


        ## About filing new hire reports

        Payroll Admins are responsible for filing a new hire report for each
        Employee. The `file_new_hire_report` question will only be listed if:

        - the `employee.onboarding_status` is one of the following:
          - `admin_onboarding_incomplete`
          - `self_onboarding_awaiting_admin_review`
        - that employee's work state requires filing a new hire report


        scope: `employee_state_taxes:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                employee_uuid: 92fa4d30-e284-43d0-a26e-605619c04beb
                file_new_hire_report: false
                is_work_state: true
                state: CA
                questions:
                  - label: Filing Status
                    description: >
                      The Head of Household status applies to unmarried
                      individuals who have a relative living with them in their
                      home. If unsure, read the <a target='_blank' data-bypass
                      rel='noopener noreferrer' tabindex='99'
                      href='https://www.ftb.ca.gov/file/personal/filing-status/index.html'>CA
                      Filing Status explanation</a>.
                    key: filing_status
                    input_question_format:
                      type: Select
                      options:
                        - value: S
                          label: Single
                        - value: M
                          label: Married one income
                        - value: MD
                          label: Married dual income
                        - value: H
                          label: Head of household
                        - value: E
                          label: Do Not Withhold
                    answers:
                      - value: S
                        valid_from: '2010-01-01'
                        valid_up_to: null
                  - label: Withholding Allowance
                    description: >
                      This value is needed to calculate the employee's CA income
                      tax withholding. If unsure, use the <a target='_blank'
                      data-bypass rel='noopener noreferrer' tabindex='99'
                      href='http://www.edd.ca.gov/pdf_pub_ctr/de4.pdf'>CA DE-4
                      form</a> to calculate the value manually.
                    key: withholding_allowance
                    input_question_format:
                      type: Number
                    answers:
                      - value: 1
                        valid_from: '2010-01-01'
                        valid_up_to: null
                  - label: Additional Withholding
                    description: >-
                      You can withhold an additional amount of California income
                      taxes here.
                    key: additional_withholding
                    input_question_format:
                      type: Currency
                    answers:
                      - value: '0.0'
                        valid_from: '2010-01-01'
                        valid_up_to: null
                  - label: File a New Hire Report?
                    description: >-
                      State law requires you to file a new hire report within 20
                      days of hiring or re-hiring an employee.
                    key: file_new_hire_report
                    input_question_format:
                      type: Select
                    answers:
                      - value: true
                        valid_from: '2010-01-01'
                        valid_up_to: null
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Employee Tax Setup
      summary: Update an employee's state taxes
      description: >-
        Update attributes relevant for an employee's state taxes.


        As described for the GET endpoint, the answers must be supplied in the
        effective-dated format, but currently only a single answer will be
        accepted - `valid_from` and `valid_up_to` must be `"2010-01-01"` and
        `null` respectively.


        scope: `employee_state_taxes:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                states:
                  - state: <string>
                    questions:
                      - key: <string>
                        answers:
                          - value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                employee_uuid: 92fa4d30-e284-43d0-a26e-605619c04beb
                file_new_hire_report: false
                is_work_state: true
                state: CA
                questions:
                  - label: Filing Status
                    description: >
                      The Head of Household status applies to unmarried
                      individuals who have a relative living with them in their
                      home. If unsure, read the <a target='_blank' data-bypass
                      rel='noopener noreferrer' tabindex='99'
                      href='https://www.ftb.ca.gov/file/personal/filing-status/index.html'>CA
                      Filing Status explanation</a>.
                    key: filing_status
                    input_question_format:
                      type: Select
                      options:
                        - value: S
                          label: Single
                        - value: M
                          label: Married one income
                        - value: MD
                          label: Married dual income
                        - value: H
                          label: Head of household
                        - value: E
                          label: Do Not Withhold
                    answers:
                      - value: S
                        valid_from: '2010-01-01'
                        valid_up_to: null
                  - label: Withholding Allowance
                    description: >
                      This value is needed to calculate the employee's CA income
                      tax withholding. If unsure, use the <a target='_blank'
                      data-bypass rel='noopener noreferrer' tabindex='99'
                      href='http://www.edd.ca.gov/pdf_pub_ctr/de4.pdf'>CA DE-4
                      form</a> to calculate the value manually.
                    key: withholding_allowance
                    input_question_format:
                      type: Number
                    answers:
                      - value: 1
                        valid_from: '2010-01-01'
                        valid_up_to: null
                  - label: Additional Withholding
                    description: >-
                      You can withhold an additional amount of California income
                      taxes here.
                    key: additional_withholding
                    input_question_format:
                      type: Currency
                    answers:
                      - value: '0.0'
                        valid_from: '2010-01-01'
                        valid_up_to: null
                  - label: File a New Hire Report?
                    description: >-
                      State law requires you to file a new hire report within 20
                      days of hiring or re-hiring an employee.
                    key: file_new_hire_report
                    input_question_format:
                      type: Select
                    answers:
                      - value: true
                        valid_from: '2010-01-01'
                        valid_up_to: null
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - state: CA
                  questions:
                    - key: filing_status
                      answers:
                        - valid_from: '2010-01-01'
                          valid_up_to: null
                          errors:
                            - string
  /v1/employees/{employee_id}/bank_accounts:
    post:
      tags:
        - W2 Employees > Employee Payment Method
      summary: Create an employee bank account
      description: >-
        Creates an employee bank account. An employee can have multiple

        bank accounts. Note that creating an employee bank account will also
        update

        the employee's payment method.


        scope: `employee_payment_methods:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: <string>
                routing_number: <string>
                account_number: <string>
                account_type: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 1531e824-8d9e-4bd8-9f90-0d04608125d7
                employee_uuid: 9fcf1b1d-8886-4691-9283-383d3bdd4fd9
                name: BoA Checking Account
                routing_number: '266905059'
                hidden_account_number: XXXX1207
                account_type: Checking
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - W2 Employees > Employee Payment Method
      summary: Get all employee bank accounts
      description: |-
        Returns all employee bank accounts.

        scope: `employee_payment_methods:read`
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 1531e824-8d9e-4bd8-9f90-0d04608125d7
                  employee_uuid: 9fcf1b1d-8886-4691-9283-383d3bdd4fd9
                  name: BoA Checking Account
                  routing_number: '266905059'
                  hidden_account_number: XXXX1207
                  account_type: Checking
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}/bank_accounts/{bank_account_uuid}:
    delete:
      tags:
        - W2 Employees > Employee Payment Method
      summary: Delete an employee bank account
      description: |-
        Deletes an employee bank account. To update an employee's bank
        account details, delete the bank account first and create a new one.

        scope: `employee_payment_methods:write`
      parameters:
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
        - name: bank_account_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the bank account
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}/payment_method:
    get:
      tags:
        - W2 Employees > Employee Payment Method
      summary: Get an employee's payment method
      description: >-
        Fetches an employee's payment method. An employee payment method

        describes how the payment should be split across the employee's
        associated

        bank accounts.


        scope: `employee_payment_methods:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 63859768485e218ccf8a449bb60f14ed
                type: Direct Deposit
                split_by: Amount
                splits:
                  - uuid: e88f9436-b74e-49a8-87e9-777b9bfe715e
                    name: BoA Checking Account
                    priority: 1
                    split_amount: 500
                  - uuid: 0d2b7f73-05d6-4184-911d-269edeecc30a
                    name: Chase Checking Account
                    priority: 2
                    split_amount: 1000
                  - uuid: 1531e824-8d9e-4bd8-9f90-0d04608125d7
                    name: US Bank Checking Account
                    priority: 3
                    split_amount: null
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Employee Payment Method
      summary: Update an employee's payment method
      description: |-
        Updates an employee's payment method. Note that creating an employee
        bank account will also update the employee's payment method.

        scope: `employee_payment_methods:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                type: <string>
                split_by: <string>
                splits:
                  - uuid: <string>
                    name: <string>
                    priority: <integer>
                    split_amount: <integer>
                  - uuid: <string>
                    name: <string>
                    priority: <integer>
                    split_amount: <integer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 63859768485e218ccf8a449bb60f14ed
                type: Direct Deposit
                split_by: Amount
                splits:
                  - uuid: e88f9436-b74e-49a8-87e9-777b9bfe715e
                    name: BoA Checking Account
                    priority: 1
                    split_amount: 500
                  - uuid: 0d2b7f73-05d6-4184-911d-269edeecc30a
                    name: Chase Checking Account
                    priority: 2
                    split_amount: 1000
                  - uuid: 1531e824-8d9e-4bd8-9f90-0d04608125d7
                    name: US Bank Checking Account
                    priority: 3
                    split_amount: null
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_id}/terminations:
    post:
      tags:
        - W2 Employees > Employee Employments
      summary: Create an employee termination
      description: >-
        Terminations are created whenever an employee is scheduled to leave the
        company. The only things required are an effective date (their last day
        of work) and whether they should receive their wages in a one-off
        termination payroll or with the rest of the company.


        Note that some states require employees to receive their final wages
        within 24 hours (unless they consent otherwise,) in which case running a
        one-off payroll may be the only option.


        scope: `employments:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                effective_date: <string>
                run_termination_payroll: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 891238902131212
                uuid: da441196-43a9-4d23-ad5d-f37ce6bb99c0
                employee_id: 891238902131212
                employee_uuid: da441196-43a9-4d23-ad5d-f37ce6bb99c0
                version: d487dd0b55dfcacdd920ccbdaeafa351
                active: true
                cancelable: true
                effective_date: '2020-03-10'
                run_termination_payroll: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - W2 Employees > Employee Employments
      summary: Get terminations for an employee
      description: >-
        Terminations are created whenever an employee is scheduled to leave the
        company. The only things required are an effective date (their last day
        of work) and whether they should receive their wages in a one-off
        termination payroll or with the rest of the company.


        Note that some states require employees to receive their final wages
        within 24 hours (unless they consent otherwise,) in which case running a
        one-off payroll may be the only option.


        scope: `employments:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 891238902131212
                  uuid: da441196-43a9-4d23-ad5d-f37ce6bb99c0
                  employee_id: 891238902131212
                  employee_uuid: da441196-43a9-4d23-ad5d-f37ce6bb99c0
                  version: d487dd0b55dfcacdd920ccbdaeafa351
                  active: true
                  cancelable: true
                  effective_date: '2020-03-10'
                  run_termination_payroll: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    delete:
      tags:
        - W2 Employees > Employee Employments
      summary: Delete an employee termination
      description: |-
        Delete an employee termination.

        scope: `employments:write`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: employement
                    category: incorrect_state
                    message: The employee's employment is not in the right state.
  /v1/terminations/{employee_id}:
    put:
      tags:
        - W2 Employees > Employee Employments
      summary: Update an employee termination
      description: >-
        Terminations are created whenever an employee is scheduled to leave the
        company. The only things required are an effective date (their last day
        of work) and whether they should receive their wages in a one-off
        termination payroll or with the rest of the company.


        Note that some states require employees to receive their final wages
        within 24 hours (unless they consent otherwise,) in which case running a
        one-off payroll may be the only option.


        scope: `employments:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                effective_date: <string>
                version: <string>
                run_termination_payroll: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 891238902131212
                uuid: da441196-43a9-4d23-ad5d-f37ce6bb99c0
                employee_id: 891238902131212
                employee_uuid: da441196-43a9-4d23-ad5d-f37ce6bb99c0
                version: d487dd0b55dfcacdd920ccbdaeafa351
                active: true
                cancelable: true
                effective_date: '2020-03-10'
                run_termination_payroll: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: employement
                    category: incorrect_state
                    message: The employee's employment is not in the right state.
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_id}/rehire:
    post:
      tags:
        - W2 Employees > Employee Employments
      summary: Create an employee rehire
      description: >-
        Rehire is created whenever an employee is scheduled to return to the
        company.


        scope: `employments:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                effective_date: <string>
                file_new_hire_report: <boolean>
                work_location_uuid: <string>
                employment_status: <string>
                two_percent_shareholder: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 2e930d43acbdb241f8f14a2d531fa417
                employee_uuid: da441196-43a9-4d23-ad5d-f37ce6bb99c0
                active: false
                effective_date: '2024-01-01'
                file_new_hire_report: false
                work_location_uuid: d2c80d44-857b-4d4d-bce4-23ae52cc863b,
                two_percent_shareholder: false
                employment_status: full_time
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    put:
      tags:
        - W2 Employees > Employee Employments
      summary: Update an employee rehire
      description: |-
        Update an employee's rehire.

        scope: `employments:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                effective_date: <string>
                file_new_hire_report: <boolean>
                version: <string>
                work_location_uuid: <string>
                employment_status: <string>
                two_percent_shareholder: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 2e930d43acbdb241f8f14a2d531fa417
                employee_uuid: da441196-43a9-4d23-ad5d-f37ce6bb99c0
                active: false
                effective_date: '2024-01-01'
                file_new_hire_report: false
                work_location_uuid: d2c80d44-857b-4d4d-bce4-23ae52cc863b,
                two_percent_shareholder: false
                employment_status: full_time
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: employement
                    category: incorrect_state
                    message: The employee's employment is not in the right state.
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - W2 Employees > Employee Employments
      summary: Get an employee rehire
      description: >-
        Retrieve an employee's rehire, which contains information on when the
        employee returns to work.


        scope: `employments:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 2e930d43acbdb241f8f14a2d531fa417
                employee_uuid: da441196-43a9-4d23-ad5d-f37ce6bb99c0
                active: false
                effective_date: '2024-01-01'
                file_new_hire_report: false
                work_location_uuid: d2c80d44-857b-4d4d-bce4-23ae52cc863b,
                two_percent_shareholder: false
                employment_status: full_time
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: employement
                    category: incorrect_state
                    message: The employee's employment is not in the right state.
    delete:
      tags:
        - W2 Employees > Employee Employments
      summary: Delete an employee rehire
      description: >-
        Delete an employee rehire. An employee rehire cannot be deleted if it's
        active (past effective date).


        scope: `employments:write`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: employement
                    category: incorrect_state
                    message: The employee's employment is not in the right state.
  /v1/employees/{employee_id}/employment_history:
    get:
      tags:
        - W2 Employees > Employee Employments
      summary: Get employment history for an employee
      description: >-
        Retrieve the employment history for a given employee, which includes
        termination and rehire.


        scope: `employments:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - hire_date: '2023-05-30'
                  termination_date: null
                  file_new_hire_report: true
                  two_percent_shareholder: false
                  employment_status: seasonal
                - hire_date: '2021-02-02'
                  termination_date: '2023-03-01'
                  file_new_hire_report: false
                  two_percent_shareholder: false
                  employment_status: full_time
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}/home_addresses:
    get:
      tags:
        - W2 Employees > Employee Addresses
      summary: Get an employee's home addresses
      description: >-
        The home address of an employee is used to determine certain tax
        information about them. Addresses are geocoded on create and update to
        ensure validity.


        Supports home address effective dating and courtesy withholding.


        scope: `employees:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 56260b3d-c375-415c-b77a-75d99f717193
                  employee_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                  street_1: 644 Fay Vista
                  street_2: Suite 842
                  city: Richmond
                  state: VA
                  zip: '23218'
                  country: USA
                  active: false
                  effective_date: '2021-01-01'
                  courtesy_withholding: true
                - uuid: d9f74049-8769-4fba-8e0f-eceef2da4e6b
                  employee_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                  street_1: 100 5th Ave
                  street_2: Suite 555
                  city: New York
                  state: NY
                  zip: '10001'
                  country: USA
                  active: true
                  effective_date: '2022-03-03'
                  courtesy_withholding: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    post:
      tags:
        - W2 Employees > Employee Addresses
      summary: Create an employee's home address
      description: >-
        The home address of an employee is used to determine certain tax
        information about them. Addresses are geocoded on create and update to
        ensure validity.


        Supports home address effective dating and courtesy withholding.


        scope: `employees:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                street_1: <string>
                street_2: <string>
                city: <string>
                state: <string>
                zip: <string>
                effective_date: <date>
                courtesy_withholding: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                employee_id: 12345
                street_1: 644 Fay Vista
                street_2: Suite 842
                city: Richmond
                state: VA
                zip: '23218'
                country: USA
                active: false
                effective_date: '2021-01-01'
                courtesy_withholding: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/home_addresses/{home_address_uuid}:
    get:
      tags:
        - W2 Employees > Employee Addresses
      summary: Get an employee's home address
      description: >-
        The home address of an employee is used to determine certain tax
        information about them. Addresses are geocoded on create and update to
        ensure validity.


        Supports home address effective dating and courtesy withholding.


        scope: `employees:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: home_address_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the home address
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                employee_id: 12345
                street_1: 644 Fay Vista
                street_2: Suite 842
                city: Richmond
                state: VA
                zip: '23218'
                country: USA
                active: false
                effective_date: '2021-01-01'
                courtesy_withholding: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Employee Addresses
      summary: Update an employee's home address
      description: >-
        The home address of an employee is used to determine certain tax
        information about them. Addresses are geocoded on create and update to
        ensure validity.


        Supports home address effective dating and courtesy withholding.


        scope: `employees:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                street_1: <string>
                street_2: <string>
                city: <string>
                state: <string>
                zip: <string>
                effective_date: <date>
                courtesy_withholding: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: home_address_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the home address
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                employee_id: 12345
                street_1: 644 Fay Vista
                street_2: Suite 842
                city: Richmond
                state: VA
                zip: '23218'
                country: USA
                active: false
                effective_date: '2021-01-01'
                courtesy_withholding: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - W2 Employees > Employee Addresses
      summary: Delete an employee's home address
      description: >-
        Used for deleting an employee's home address.  Cannot delete the
        employee's active home address.


        scope: `employees:write`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: home_address_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the home address
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_id}/work_addresses:
    get:
      tags:
        - W2 Employees > Employee Addresses
      summary: Get an employee's work addresses
      description: >-
        Returns a list of an employee's work addresses. Each address includes
        its effective date and a boolean

        signifying if it is the currently active work address.


        scope: `employees:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: fc5b87dc-8d88-400d-b2da-c3587a7e5b15
                  employee_uuid: 7597f3e3-31d4-4953-83a5-f95be78d2fe2
                  location_uuid: d9456c94-f561-40d2-afec-919da5f59196
                  effective_date: '2022-01-01'
                  active: false
                  version: 139f9769a2e543e6a1259173e1ee3b8d
                  street_1: 800 Adolfo Gardens
                  street_2: Suite 419
                  city: Bremen
                  state: AL
                  zip: '35033'
                  country: USA
                - uuid: be1c2e24-af86-4c36-b34e-3a55dbcdbdab
                  employee_uuid: 7597f3e3-31d4-4953-83a5-f95be78d2fe2
                  location_uuid: 6a119be7-b4b0-4e27-aaa0-89d5f2524635
                  effective_date: '2023-01-01'
                  active: true
                  version: bbe8d4c741339c6b9e0e2e1c1b120816
                  street_1: 2216 Icie Villages
                  street_2: Apt. 798
                  city: Big Delta
                  state: AK
                  zip: '99737'
                  country: USA
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    post:
      tags:
        - W2 Employees > Employee Addresses
      summary: Create an employee work address
      description: >-
        The work address of an employee describes when an employee began working
        at an associated company location.


        scope: `employees:manage`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                location_uuid: <string>
                effective_date: <date>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                employee_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                street_1: 644 Fay Vista
                street_2: Suite 842
                city: Richmond
                state: VA
                zip: '23218'
                country: USA
                active: false
                effective_date: '2021-01-01'
                courtesy_withholding: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/work_addresses/{work_address_uuid}:
    get:
      tags:
        - W2 Employees > Employee Addresses
      summary: Get an employee work address
      description: |-
        The work address of an employee is used for payroll tax purposes.

        scope: `employees:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: work_address_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the work address
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 34925ef7-6234-440d-83b8-788a24d0d69a
                employee_uuid: 2363b9c0-6625-4425-9261-47627fd68783
                location_uuid: aba6d0fd-7294-4997-b1a4-bc9268c45932
                effective_date: '2023-05-15'
                active: true
                version: 6a22da647ed391f184a212e6e83a541d
                street_1: 977 Marks Viaduct
                street_2: null
                city: Pink Hill
                state: NC
                zip: '28572'
                country: USA
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Employee Addresses
      summary: Update an employee work address
      description: |-
        The work address of an employee is used for payroll tax purposes.

        scope: `employees:manage`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                location_uuid: <string>
                effective_date: <date>
                version: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: work_address_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the work address
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 34925ef7-6234-440d-83b8-788a24d0d69a
                employee_uuid: 2363b9c0-6625-4425-9261-47627fd68783
                location_uuid: aba6d0fd-7294-4997-b1a4-bc9268c45932
                effective_date: '2023-05-15'
                active: true
                version: 6a22da647ed391f184a212e6e83a541d
                street_1: 977 Marks Viaduct
                street_2: null
                city: Pink Hill
                state: NC
                zip: '28572'
                country: USA
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - W2 Employees > Employee Addresses
      summary: Delete an employee's work address
      description: >-
        Used for deleting an employee's work address.  Cannot delete the
        employee's active work address.


        scope: `employees:manage`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: work_address_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the work address
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_id}/jobs:
    post:
      tags:
        - W2 Employees > Jobs and Compensations
      summary: Create a job
      description: |-
        Create a job.

        scope: `jobs:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: <string>
                hire_date: <string>
                location_id: <number>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 7757869441038000
                uuid: d6d1035e-8a21-4e1d-89d5-fa894f9aff97
                version: d0e719137f89ca3dd334dd4cc248ffbb
                employee_id: 7757869432666661
                employee_uuid: 948daac8-4355-4ece-9e2a-229898accb22
                current_compensation_id: 7757869444844981
                current_compensation_uuid: ea8b0b90-1112-4f9d-bb93-bf029bc8537a
                payment_unit: Year
                primary: true
                title: Account Director
                compensations:
                  - id: 7757869444844981
                    uuid: ea8b0b90-1112-4f9d-bb93-bf029bc8537a
                    employee_uuid: be3c9d35-f17d-4431-8a90-a6537f17dfd1
                    version: 994b75511d1debac5d7e2ddeae13679f
                    payment_unit: Year
                    flsa_status: Exempt
                    job_id: 7757869441038000
                    job_uuid: d6d1035e-8a21-4e1d-89d5-fa894f9aff97
                    effective_date: '2021-01-20'
                    rate: '78000.00'
                    adjust_for_minimum_wage: false
                    minimum_wages: []
                rate: '78000.00'
                hire_date: '2020-01-20'
                location_id: 7757727716657803
                location:
                  id: 7757727716657803
                  uuid: 5b1ed1ef-8081-4eb8-894f-9cff23314a30
                  street_1: 412 Kiera Stravenue
                  street_2: Suite 391
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                  inactive: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - W2 Employees > Jobs and Compensations
      summary: Get jobs for an employee
      description: |-
        Get all of the jobs that an employee holds.

        scope: `jobs:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Available options:

            - all_compensations: Include all effective dated compensations for
            each job instead of only the current compensation
          example: <string>
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 7757869441038001
                  uuid: d6d1035e-8a21-4e1d-89d5-fa894f9aff97
                  version: 6c0ed1521e8b86eb36bd4455a63a2dac
                  employee_id: 7757869432666662
                  employee_uuid: 948daac8-4355-4ece-9e2a-229898accb22
                  current_compensation_id: 7757869444844982
                  current_compensation_uuid: ea8b0b90-1112-4f9d-bb93-bf029bc8537a
                  payment_unit: Year
                  primary: true
                  title: Client Support Director
                  compensations:
                    - id: 7757869444844982
                      uuid: ea8b0b90-1112-4f9d-bb93-bf029bc8537a
                      employee_uuid: be3c9d35-f17d-4431-8a90-a6537f17dfde
                      version: 2cd4b18662395eb53bcf80d5b5447f36
                      payment_unit: Year
                      flsa_status: Exempt
                      job_id: 7757869441038001
                      job_uuid: d6d1035e-8a21-4e1d-89d5-fa894f9aff97
                      effective_date: '2021-01-20'
                      rate: '70000.00'
                      adjust_for_minimum_wage: false
                      minimum_wages: []
                  rate: '70000.00'
                  hire_date: '2020-01-20'
                  location_id: 7757727716657803
                  location:
                    id: 7757727716657803
                    uuid: 5b1ed1ef-8081-4eb8-894f-9cff23314a30
                    street_1: 412 Kiera Stravenue
                    street_2: Suite 391
                    city: San Francisco
                    state: CA
                    zip: '94107'
                    country: USA
                    inactive: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/jobs/{job_id}:
    get:
      tags:
        - W2 Employees > Jobs and Compensations
      summary: Get a job
      description: |-
        Get a job.

        scope: `jobs:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Available options:

            - all_compensations: Include all effective dated compensations for
            the job instead of only the current compensation
          example: <string>
        - name: job_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the job
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 7757869441038000
                uuid: d6d1035e-8a21-4e1d-89d5-fa894f9aff97
                version: d0e719137f89ca3dd334dd4cc248ffbb
                employee_id: 7757869432666661
                employee_uuid: 948daac8-4355-4ece-9e2a-229898accb22
                current_compensation_id: 7757869444844981
                current_compensation_uuid: ea8b0b90-1112-4f9d-bb93-bf029bc8537a
                payment_unit: Year
                primary: true
                title: Account Director
                compensations:
                  - id: 7757869444844981
                    uuid: ea8b0b90-1112-4f9d-bb93-bf029bc8537a
                    employee_uuid: be3c9d35-f17d-4431-8a90-a6537f17dfd1
                    version: 994b75511d1debac5d7e2ddeae13679f
                    payment_unit: Year
                    flsa_status: Exempt
                    job_id: 7757869441038000
                    job_uuid: d6d1035e-8a21-4e1d-89d5-fa894f9aff97
                    effective_date: '2021-01-20'
                    rate: '78000.00'
                    adjust_for_minimum_wage: false
                    minimum_wages: []
                rate: '78000.00'
                hire_date: '2020-01-20'
                location_id: 7757727716657803
                location:
                  id: 7757727716657803
                  uuid: 5b1ed1ef-8081-4eb8-894f-9cff23314a30
                  street_1: 412 Kiera Stravenue
                  street_2: Suite 391
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                  inactive: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Jobs and Compensations
      summary: Update a job
      description: |-
        Update a job.

        scope: `jobs:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                title: <string>
                location_id: <number>
                hire_date: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: job_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the job
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 7757869441038000
                uuid: d6d1035e-8a21-4e1d-89d5-fa894f9aff97
                version: d0e719137f89ca3dd334dd4cc248ffbb
                employee_id: 7757869432666661
                employee_uuid: 948daac8-4355-4ece-9e2a-229898accb22
                current_compensation_id: 7757869444844981
                current_compensation_uuid: ea8b0b90-1112-4f9d-bb93-bf029bc8537a
                payment_unit: Year
                primary: true
                title: Account Director
                compensations:
                  - id: 7757869444844981
                    uuid: ea8b0b90-1112-4f9d-bb93-bf029bc8537a
                    employee_uuid: be3c9d35-f17d-4431-8a90-a6537f17dfd1
                    version: 994b75511d1debac5d7e2ddeae13679f
                    payment_unit: Year
                    flsa_status: Exempt
                    job_id: 7757869441038000
                    job_uuid: d6d1035e-8a21-4e1d-89d5-fa894f9aff97
                    effective_date: '2021-01-20'
                    rate: '78000.00'
                    adjust_for_minimum_wage: false
                    minimum_wages: []
                rate: '78000.00'
                hire_date: '2020-01-20'
                location_id: 7757727716657803
                location:
                  id: 7757727716657803
                  uuid: 5b1ed1ef-8081-4eb8-894f-9cff23314a30
                  street_1: 412 Kiera Stravenue
                  street_2: Suite 391
                  city: San Francisco
                  state: CA
                  zip: '94107'
                  country: USA
                  inactive: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - W2 Employees > Jobs and Compensations
      summary: Delete an individual job
      description: |-
        Deletes a specific job that an employee holds.

        scope: `jobs:write`
      parameters:
        - name: job_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the job
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/jobs/{job_id}/compensations:
    get:
      tags:
        - W2 Employees > Jobs and Compensations
      summary: Get compensations for a job
      description: >-
        Compensations contain information on how much is paid out for a job.
        Jobs may have many compensations, but only one that is active. The
        current compensation is the one with the most recent `effective_date`.
        By default the API returns only the current compensation - see the
        `include` query parameter for retrieving all compensations.


        Use `flsa_status` to determine if an employee is eligible for overtime.


        scope: `jobs:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: include
          in: query
          schema:
            type: string
          description: >-
            Available options:

            - all_compensations: Include all effective dated compensations for
            each job instead of only the current compensation
          example: <string>
        - name: job_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the job
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 1363316536327004
                  uuid: db57832c-d8bc-43a7-ae99-0a04480ff037
                  employee_uuid: be3c9d35-f17d-4431-8a90-a6537f17dfde
                  version: 98jr3289h3298hr9329gf9egskt3kagri32qqgiqe3872
                  job_id: 1123581321345589
                  job_uuid: d8f8fbe7-496d-4b69-86f0-1e2d1b73a086
                  rate: '70.00'
                  payment_unit: Hour
                  flsa_status: Nonexempt
                  effective_date: '2020-12-11'
                  adjust_for_minimum_wage: false
                  minimum_wages: []
                - id: 1363316536327003
                  uuid: a4d9ba9c-32cc-4cc1-a5bc-6ef4cd653e7a
                  employee_uuid: be3c9d35-f17d-4431-8a90-a6537f17dfd3
                  version: cc59bd3879d655fb940a1f6b675f2ad9
                  job_id: 1123581321345589
                  job_uuid: d8f8fbe7-496d-4b69-86f0-1e2d1b73a086
                  rate: '5.00'
                  payment_unit: Hour
                  flsa_status: Nonexempt
                  effective_date: '2018-12-11'
                  adjust_for_minimum_wage: true
                  minimum_wages:
                    - uuid: edeea5af-ecd6-4b1c-b5de-5cff2d302738
                      wage: '7.25'
                      effective_date: '2018-12-11'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    post:
      tags:
        - W2 Employees > Jobs and Compensations
      summary: Create a compensation
      description: >-
        Compensations contain information on how much is paid out for a job.
        Jobs may have many compensations, but only one that is active. The
        current compensation is the one with the most recent `effective_date`.


        scope: `jobs:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                payment_unit: <string>
                flsa_status: <string>
                rate: <string>
                effective_date: <string>
                adjust_for_minimum_wage: <boolean>
                minimum_wages:
                  - uuid: <string>
                  - uuid: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: job_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the job
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1363316536327004
                uuid: db57832c-d8bc-43a7-ae99-0a04480ff037
                employee_uuid: be3c9d35-f17d-4431-8a90-a6537f17dfde
                version: 98jr3289h3298hr9329gf9egskt3kagri32qqgiqe3872
                job_id: 1123581321345589
                job_uuid: d8f8fbe7-496d-4b69-86f0-1e2d1b73a086
                rate: '60000.00'
                payment_unit: Year
                flsa_status: Exempt
                effective_date: '2020-12-11'
                adjust_for_minimum_wage: false
                minimum_wages: []
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/compensations/{compensation_id}:
    get:
      tags:
        - W2 Employees > Jobs and Compensations
      summary: Get a compensation
      description: >
        Compensations contain information on how much is paid out for a job.
        Jobs may have many compensations, but only one that is active. The
        current compensation is the one with the most recent `effective_date`.


        scope: `jobs:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: compensation_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the compensation
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1363316536327004
                uuid: db57832c-d8bc-43a7-ae99-0a04480ff037
                employee_uuid: be3c9d35-f17d-4431-8a90-a6537f17dfde
                version: 98jr3289h3298hr9329gf9egskt3kagri32qqgiqe3872
                job_id: 1123581321345589
                job_uuid: d8f8fbe7-496d-4b69-86f0-1e2d1b73a086
                rate: '60000.00'
                payment_unit: Year
                flsa_status: Exempt
                effective_date: '2020-12-11'
                adjust_for_minimum_wage: false
                minimum_wages: []
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Jobs and Compensations
      summary: Update a compensation
      description: >-
        Compensations contain information on how much is paid out for a job.
        Jobs may have many compensations, but only one that is active. The
        current compensation is the one with the most recent `effective_date`.


        scope: `jobs:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                rate: <string>
                payment_unit: <string>
                flsa_status: <string>
                adjust_for_minimum_wage: <boolean>
                minimum_wages:
                  - uuid: <string>
                  - uuid: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: compensation_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the compensation
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1363316536327004
                uuid: db57832c-d8bc-43a7-ae99-0a04480ff037
                employee_uuid: be3c9d35-f17d-4431-8a90-a6537f17dfde
                version: 98jr3289h3298hr9329gf9egskt3kagri32qqgiqe3872
                job_id: 1123581321345589
                job_uuid: d8f8fbe7-496d-4b69-86f0-1e2d1b73a086
                rate: '60000.00'
                payment_unit: Year
                flsa_status: Exempt
                effective_date: '2020-12-11'
                adjust_for_minimum_wage: false
                minimum_wages: []
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - W2 Employees > Jobs and Compensations
      summary: Delete a compensation
      description: >
        Compensations contain information on how much is paid out for a job.
        Jobs may have many compensations, but only one that is active. The
        current compensation is the one with the most recent `effective_date`.
        This endpoint deletes a compensation for a job that hasn't been
        processed on payroll.


        scope: `jobs:write`
      parameters:
        - name: compensation_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the compensation
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/sandbox/generate_w2:
    post:
      tags:
        - W2 Employees > Employee Forms
      summary: Generate a W2 form
      description: |-
        > 🚧 Demo action
        >
        > This action is only available in the Demo environment

        Generates a W2 document for testing purposes.

        scope: `employees:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                employee_id: <string>
                year: <integer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                employee_uuid: 19394e76-a866-4570-b237-9a26b0163907
                uuid: bf5b2496-26df-436e-b465-eae4ed5c8021
                name: US_W-2
                title: 'Draft Form W-2: 2021'
                description: Form W-2 records your annual wages and taxes.
                draft: false
                requires_signing: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_id}/forms:
    get:
      tags:
        - W2 Employees > Employee Forms
      summary: Get all employee forms
      description: |-
        Get a list of all employee's forms

        scope: `employee_forms:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                  name: company_direct_deposit
                  title: Direct Deposit Authorization
                  description: >-
                    We need you to sign paperwork to authorize us to debit and
                    credit your bank account and file and pay your taxes.
                  draft: false
                  requires_signing: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}/forms/{form_id}:
    get:
      tags:
        - W2 Employees > Employee Forms
      summary: Get an employee form
      description: |-
        Get an employee form

        scope: `employee_forms:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
        - name: form_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the form
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                name: company_direct_deposit
                title: Direct Deposit Authorization
                description: >-
                  We need you to sign paperwork to authorize us to debit and
                  credit your bank account and file and pay your taxes.
                draft: false
                requires_signing: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}/forms/{form_id}/pdf:
    get:
      tags:
        - W2 Employees > Employee Forms
      summary: Get the employee form pdf
      description: |-
        Get the link to the form PDF

        scope: `employee_forms:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
        - name: form_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the form
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                document_url: >-
                  https://app.gusto-demo.com/assets/forms/7757842065202782/original/company_direct_deposit20211007-48226-gsqo8k.pdf?1633667020
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}/forms/{form_id}/sign:
    put:
      tags:
        - W2 Employees > Employee Forms
      summary: Sign an employee form
      description: |-
        Sign a company form

        scope: `employee_forms:sign`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                signature_text: <string>
                agree: <boolean>
                signed_by_ip_address: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
        - name: form_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the form
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                name: company_direct_deposit
                title: Direct Deposit Authorization
                description: >-
                  We need you to sign paperwork to authorize us to debit and
                  credit your bank account and file and pay your taxes.
                draft: false
                requires_signing: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_id}/employee_benefits:
    post:
      tags:
        - W2 Employees > Employee Benefits
      summary: Create an employee benefit
      description: >-
        Employee benefits represent an employee enrolled in a particular company
        benefit. It includes information specific to that employee’s enrollment.


        scope: `employee_benefits:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                company_benefit_id: <number>
                company_benefit_uuid: <string>
                active: true
                employee_deduction: '0.00'
                deduct_as_percentage: false
                employee_deduction_annual_maximum: <string>
                contribution:
                  type: <string>
                  value: <string>
                elective: false
                company_contribution_annual_maximum: <string>
                limit_option: <string>
                catch_up: false
                coverage_amount: <string>
                coverage_salary_multiplier: '0.00'
                deduction_reduces_taxable_income: <string>
                company_contribution: '0.00'
                contribute_as_percentage: false
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: e91ca856-a915-4339-9b18-29f9cd66b031
                id: 1363316536327004
                version: 09j3d29jqdpj92109j9j2d90dq
                employee_uuid: 908123091820398
                employee_id: 908123091820398
                company_benefit_uuid: 54e37c27-43e6-4ae5-a5b2-e29895a133be
                company_benefit_id: 290384923980230
                active: true
                employee_deduction: '100.00'
                employee_deduction_annual_maximum: '200.00'
                company_contribution_annual_maximum: '200.00'
                limit_option: null
                deduct_as_percentage: false
                catch_up: false
                coverage_amount: null
                deduction_reduces_taxable_income: null
                coverage_salary_multiplier: '0.00'
                contribution:
                  type: amount
                  value: '100.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - W2 Employees > Employee Benefits
      summary: Get all benefits for an employee
      description: >-
        Employee benefits represent an employee enrolled in a particular company
        benefit. It includes information specific to that employee’s enrollment.


        Returns an array of all employee benefits for this employee


        Benefits containing PHI are only visible to applications with the
        `employee_benefits:read:phi` scope.


        scope: `employee_benefits:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: e91ca856-a915-4339-9b18-29f9cd66b031
                  id: 1363316536327004
                  version: 09j3d29jqdpj92109j9j2d90dq
                  employee_uuid: 8f9f3f68-8fd3-499d-ade7-4a052e56494e
                  employee_id: 908123091820398
                  company_benefit_uuid: 54e37c27-43e6-4ae5-a5b2-e29895a133be
                  company_benefit_id: 290384923980230
                  active: true
                  employee_deduction: '100.00'
                  company_contribution: '100.00'
                  employee_deduction_annual_maximum: '200.00'
                  company_contribution_annual_maximum: '200.00'
                  limit_option: null
                  deduct_as_percentage: false
                  contribute_as_percentage: false
                  catch_up: false
                  coverage_amount: null
                  deduction_reduces_taxable_income: null
                  coverage_salary_multiplier: '0.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employee_benefits/{employee_benefit_id}:
    get:
      tags:
        - W2 Employees > Employee Benefits
      summary: Get an employee benefit
      description: >-
        Employee benefits represent an employee enrolled in a particular company
        benefit. It includes information specific to that employee’s enrollment.


        Benefits containing PHI are only visible to applications with the
        `employee_benefits:read:phi` scope.


        scope: `employee_benefits:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_benefit_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the employee benefit.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: e91ca856-a915-4339-9b18-29f9cd66b031
                id: 1363316536327004
                version: 09j3d29jqdpj92109j9j2d90dq
                employee_uuid: 908123091820398
                employee_id: 908123091820398
                company_benefit_uuid: 54e37c27-43e6-4ae5-a5b2-e29895a133be
                company_benefit_id: 290384923980230
                active: true
                employee_deduction: '100.00'
                employee_deduction_annual_maximum: '200.00'
                company_contribution_annual_maximum: '200.00'
                limit_option: null
                deduct_as_percentage: false
                catch_up: false
                coverage_amount: null
                deduction_reduces_taxable_income: null
                coverage_salary_multiplier: '0.00'
                contribution:
                  type: amount
                  value: '100.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Employee Benefits
      summary: Update an employee benefit
      description: >-
        Employee benefits represent an employee enrolled in a particular company
        benefit. It includes information specific to that employee’s enrollment.


        scope: `employee_benefits:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                active: <boolean>
                employee_deduction: '0.00'
                deduct_as_percentage: <boolean>
                employee_deduction_annual_maximum: <string>
                contribution:
                  type: <string>
                  value: <string>
                elective: false
                company_contribution_annual_maximum: <string>
                limit_option: <string>
                catch_up: false
                coverage_amount: <string>
                deduction_reduces_taxable_income: unset
                coverage_salary_multiplier: '0.00'
                company_contribution: '0.00'
                contribute_as_percentage: false
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_benefit_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the employee benefit.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: e91ca856-a915-4339-9b18-29f9cd66b031
                id: 1363316536327004
                version: 09j3d29jqdpj92109j9j2d90dq
                employee_uuid: 908123091820398
                employee_id: 908123091820398
                company_benefit_uuid: 54e37c27-43e6-4ae5-a5b2-e29895a133be
                company_benefit_id: 290384923980230
                active: true
                employee_deduction: '100.00'
                employee_deduction_annual_maximum: '200.00'
                company_contribution_annual_maximum: '200.00'
                limit_option: null
                deduct_as_percentage: false
                catch_up: false
                coverage_amount: null
                deduction_reduces_taxable_income: null
                coverage_salary_multiplier: '0.00'
                contribution:
                  type: amount
                  value: '100.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - W2 Employees > Employee Benefits
      summary: Delete an employee benefit
      description: >-
        Employee benefits represent an employee enrolled in a particular company
        benefit. It includes information specific to that employee’s enrollment.


        scope: `employee_benefits:write`
      parameters:
        - name: employee_benefit_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the employee benefit.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/employees/{employee_id}/ytd_benefit_amounts_from_different_company:
    post:
      tags:
        - W2 Employees > Employee Benefits
      summary: Create year-to-date benefit amounts from a different company
      description: >-
        Year-to-date benefit amounts from a different company represents the
        amount of money added to an employees plan during a current year, made
        outside of the current contribution when they were employed at a
        different company.


        scope: `employee_benefits:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                benefit_id: <number>
                tax_year: <number>
                ytd_employee_deduction_amount: '0.00'
                ytd_company_contribution_amount: '0.00'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/employees/{employee_id}/garnishments:
    post:
      tags:
        - W2 Employees > Garnishments
      summary: Create a garnishment
      description: >-
        Garnishments, or employee deductions, are fixed amounts or percentages
        deducted from an employee’s pay. They can be deducted a specific number
        of times or on a recurring basis. Garnishments can also have maximum
        deductions on a yearly or per-pay-period bases. Common uses for
        garnishments are court-ordered payments for child support or back taxes.
        Some companies provide loans to their employees that are repaid via
        garnishments.


        scope: `garnishments:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                amount: <float>
                description: <string>
                court_ordered: <boolean>
                active: true
                times: null
                recurring: false
                annual_maximum: null
                pay_period_maximum: null
                deduct_as_percentage: false
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 96334c6c-4e01-40ac-ac1c-d2fb02a7e371
                id: 1363316538400333
                version: 52b7c567242cb7452e89ba2bc02cb476
                employee_uuid: 2d9c45f3-5ab9-4198-90a7-e8bea1ae3ce6
                employee_id: 8964216891236743
                active: true
                amount: '8.00'
                description: Company loan to employee
                court_ordered: false
                times: 5
                recurring: false
                annual_maximum: null
                pay_period_maximum: '100.00'
                deduct_as_percentage: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - W2 Employees > Garnishments
      summary: Get garnishments for an employee
      description: >-
        Garnishments, or employee deductions, are fixed amounts or percentages
        deducted from an employee’s pay. They can be deducted a specific number
        of times or on a recurring basis. Garnishments can also have maximum
        deductions on a yearly or per-pay-period bases. Common uses for
        garnishments are court-ordered payments for child support or back taxes.
        Some companies provide loans to their employees that are repaid via
        garnishments.


        scope: `garnishments:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 4c7841a2-1363-497e-bc0f-664703c7484f
                  id: 1363316536327000
                  version: 63152767c822d6b0385509b973c49dda
                  employee_id: 8964216891236743
                  employee_uuid: a6b53294-f871-4db2-bbd4-8c3d1fe56440
                  active: true
                  amount: '100.00'
                  description: Child support
                  court_ordered: true
                  times: null
                  recurring: true
                  annual_maximum: '400.00'
                  pay_period_maximum: null
                  deduct_as_percentage: false
                - uuid: 96334c6c-4e01-40ac-ac1c-d2fb02a7e371
                  id: 1363316538400333
                  version: 52b7c567242cb7452e89ba2bc02cb476
                  employee_uuid: 2d9c45f3-5ab9-4198-90a7-e8bea1ae3ce6
                  employee_id: 8964216891236743
                  active: true
                  amount: '8.00'
                  description: Company loan to employee
                  court_ordered: false
                  times: 5
                  recurring: false
                  annual_maximum: null
                  pay_period_maximum: '100.00'
                  deduct_as_percentage: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/garnishments/{garnishment_id}:
    get:
      tags:
        - W2 Employees > Garnishments
      summary: Get a garnishment
      description: >-
        Garnishments, or employee deductions, are fixed amounts or percentages
        deducted from an employee’s pay. They can be deducted a specific number
        of times or on a recurring basis. Garnishments can also have maximum
        deductions on a yearly or per-pay-period bases. Common uses for
        garnishments are court-ordered payments for child support or back taxes.
        Some companies provide loans to their employees that are repaid via
        garnishments.


        scope: `garnishments:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: garnishment_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the garnishment
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 96334c6c-4e01-40ac-ac1c-d2fb02a7e371
                id: 1363316538400333
                version: 52b7c567242cb7452e89ba2bc02cb476
                employee_uuid: 2d9c45f3-5ab9-4198-90a7-e8bea1ae3ce6
                employee_id: 8964216891236743
                active: true
                amount: '8.00'
                description: Company loan to employee
                court_ordered: false
                times: 5
                recurring: false
                annual_maximum: null
                pay_period_maximum: '100.00'
                deduct_as_percentage: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - W2 Employees > Garnishments
      summary: Update a garnishment
      description: >-
        Garnishments, or employee deductions, are fixed amounts or percentages
        deducted from an employee’s pay. They can be deducted a specific number
        of times or on a recurring basis. Garnishments can also have maximum
        deductions on a yearly or per-pay-period bases. Common uses for
        garnishments are court-ordered payments for child support or back taxes.
        Some companies provide loans to their employees that are repaid via
        garnishments.


        scope: `garnishments:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                active: true
                amount: <float>
                description: <string>
                court_ordered: <boolean>
                times: null
                recurring: false
                annual_maximum: null
                pay_period_maximum: null
                deduct_as_percentage: false
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: garnishment_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the garnishment
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 96334c6c-4e01-40ac-ac1c-d2fb02a7e371
                id: 1363316538400333
                version: 52b7c567242cb7452e89ba2bc02cb476
                employee_uuid: 2d9c45f3-5ab9-4198-90a7-e8bea1ae3ce6
                employee_id: 8964216891236743
                active: true
                amount: '8.00'
                description: Company loan to employee
                court_ordered: false
                times: 5
                recurring: false
                annual_maximum: null
                pay_period_maximum: '100.00'
                deduct_as_percentage: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/contractors/{contractor_uuid}/bank_accounts:
    post:
      tags:
        - 1099 Contractors > Contractor Payment Method
      summary: Create an contractor bank account
      description: >-
        Creates a contractor bank account.


        Note: We currently only support one bank account per contractor. Using
        this endpoint on a contractor who has already

        has a bank account will just replace it.


        scope: `contractor_payment_methods:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: <string>
                routing_number: <string>
                account_number: <string>
                account_type: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 1531e824-8d9e-4bd8-9f90-0d04608125d7
                employee_uuid: 9fcf1b1d-8886-4691-9283-383d3bdd4fd9
                name: BoA Checking Account
                routing_number: '266905059'
                hidden_account_number: XXXX1207
                account_type: Checking
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - 1099 Contractors > Contractor Payment Method
      summary: Get all contractor bank accounts
      description: |-
        Returns all contractor bank accounts.

        scope: `contractor_payment_methods:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 1531e824-8d9e-4bd8-9f90-0d04608125d7
                  employee_uuid: 9fcf1b1d-8886-4691-9283-383d3bdd4fd9
                  name: BoA Checking Account
                  routing_number: '266905059'
                  hidden_account_number: XXXX1207
                  account_type: Checking
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/contractors/{contractor_uuid}/payment_method:
    get:
      tags:
        - 1099 Contractors > Contractor Payment Method
      summary: Get a contractor's payment method
      description: >-
        Fetches a contractor's payment method. A contractor payment method

        describes how the payment should be split across the contractor's
        associated

        bank accounts.


        scope: `contractor_payment_methods:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 63859768485e218ccf8a449bb60f14ed
                type: Direct Deposit
                split_by: Percentage
                splits:
                  - uuid: e88f9436-b74e-49a8-87e9-777b9bfe715e
                    name: BoA Checking Account
                    priority: 1
                    split_amount: 100
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - 1099 Contractors > Contractor Payment Method
      summary: Update a contractor's payment method
      description: |-
        Updates a contractor's payment method. Note that creating a contractor
        bank account will also update the contractor's payment method.

        scope: `contractor_payment_methods:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: <string>
                version: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 63859768485e218ccf8a449bb60f14ed
                type: Direct Deposit
                split_by: Percentage
                splits:
                  - uuid: e88f9436-b74e-49a8-87e9-777b9bfe715e
                    name: BoA Checking Account
                    priority: 1
                    split_amount: 100
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/contractor_payments/{contractor_payment_uuid}/receipt:
    get:
      tags:
        - 1099 Contractors > Contractor Payments
      summary: Get a single contractor payment receipt
      description: >-
        Returns a contractor payment receipt.


        Notes:

        * Receipts are only available for direct deposit payments and are only
        available once those payments have been funded.

        * Payroll Receipt requests for payrolls which do not have receipts
        available (e.g. payment by check) will return a 404 status.

        * Hour and dollar amounts are returned as string representations of
        numeric decimals.

        * Dollar amounts are represented to the cent.

        * If no data has yet be inserted for a given field, it defaults to
        “0.00” (for fixed amounts).


        scope: `payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_payment_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor payment
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                receipt_id: 7757500935137343
                contractor_payment_uuid: afccb970-357e-4013-81f5-85dafc74f9b6
                name_of_recipient: Patricia Hamill
                totals:
                  company_debit: '748.34'
                contractor_payments:
                  - contractor_uuid: f83d0bd8-7e20-43b9-834c-6d514ef6cb47
                    contractor_first_name: Patricia
                    contractor_last_name: Hamill
                    contractor_business_name: ''
                    contractor_type: Individual
                    payment_method: Direct Deposit
                    wage: '448.34'
                    bonus: '248.00'
                    reimbursement: '100.00'
                licensee:
                  name: Gusto, Zenpayroll Inc.
                  address: 525 20th St
                  city: San Francisco
                  state: CA
                  postal_code: '94107'
                  phone_number: '4157778888'
                company_uuid: c827aa0d-3928-4d5a-ab1f-400641a7d2b8
                name_of_sender: Torp and Sons and Sons
                debit_date: '2022-06-02'
                license: >-
                  ZenPayroll, Inc., dba Gusto is a licensed money transmitter.
                  For more about Gusto’s licenses and your state-specific rights
                  to request information, submit complaints, dispute errors, or
                  cancel transactions, visit our license page.
                license_uri: https://gusto.com/about/licenses
                right_to_refund: https://gusto.com/about/licenses
                liability_of_licensee: https://gusto.com/about/licenses
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/contractor_payments/{contractor_payment_uuid}/fund:
    put:
      tags:
        - 1099 Contractors > Contractor Payments
      summary: Fund a contractor payment
      description: >-
        > 🚧 Demo action

        >

        > This action is only available in the Demo environment


        Simulate funding a contractor payment. Funding only occurs automatically
        in the production environment when bank transactions are generated. Use
        this action in the demo environment to transition a contractor payment's
        `status` from `Unfunded` to `Funded`. A `Funded` status is required for
        generating a contractor payment receipt.


        scope: `payrolls:run`
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_payment_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor payment
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 04552eb9-7829-4b18-ae96-6983552948df
                contractor_id: 11
                contractor_uuid: bc57832c-d8bc-43a7-ae99-3a03380ff037
                bonus: '20.0'
                date: '2020-10-19'
                hours: '40.0'
                payment_method: Direct Deposit
                reimbursement: '100.0'
                status: Unfunded
                hourly_rate: '18.0'
                may_cancel: true
                wage: '0.0'
                wage_type: Hourly
                wage_total: '740.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_id}/contractor_payments:
    post:
      tags:
        - 1099 Contractors > Contractor Payments
      summary: Create a contractor payment
      description: >-
        Pay a contractor. Information needed depends on the contractor's wage
        type (hourly vs fixed)


        scope: `payrolls:run`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                contractor_uuid: <string>
                date: <date>
                payment_method: Direct Deposit
                wage: <number>
                hours: <number>
                bonus: <number>
                reimbursement: <number>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 04552eb9-7829-4b18-ae96-6983552948df
                contractor_id: 11
                contractor_uuid: bc57832c-d8bc-43a7-ae99-3a03380ff037
                bonus: '20.0'
                date: '2020-10-19'
                hours: '40.0'
                payment_method: Direct Deposit
                reimbursement: '100.0'
                status: Unfunded
                hourly_rate: '18.0'
                may_cancel: true
                wage: '0.0'
                wage_type: Hourly
                wage_total: '740.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - 1099 Contractors > Contractor Payments
      summary: Get contractor payments for a company
      description: >-
        Returns an object containing individual contractor payments, within a
        given time period, including totals.


        scope: `payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: start_date
          in: query
          schema:
            type: string
          description: (Required) The time period for which to retrieve contractor payments
          example: <string>
        - name: end_date
          in: query
          schema:
            type: string
          description: (Required) The time period for which to retrieve contractor payments
          example: <string>
        - name: contractor_uuid
          in: query
          schema:
            type: string
          description: >-
            The UUID of the contractor. When specified, will load all payments
            for that contractor.
          example: <string>
        - name: group_by_date
          in: query
          schema:
            type: string
          description: >-
            Display contractor payments results group by check date if set to
            true.
          example: <boolean>
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                total:
                  reimbursements: '110.0'
                  wages: '1840.0'
                contractor_payments:
                  - contractor_id: 1234
                    reimbursement_total: '110.0'
                    wage_total: '1840.0'
                    payments:
                      - id: 04552eb9-7829-4b18-ae96-6983552948df
                        bonus: '20.0'
                        date: '2020-10-19'
                        hours: '40.0'
                        payment_method: Direct Deposit
                        reimbursement: '100.0'
                        hourly_rate: '18.0'
                        may_cancel: true
                        wage: '0.0'
                        wage_type: Hourly
                        wage_total: '740.00'
                        contractor_id: 1234
                        contractor_uuid: bc57832c-d8bc-43a7-ae99-3a03380ff037
                      - id: 25cfeb96-17fc-4fdf-8941-57f3fb9eea00
                        bonus: '100.0'
                        date: '2020-10-19'
                        hours: '0.00'
                        payment_method: Direct Deposit
                        reimbursement: '10.0'
                        hourly_rate: '0.0'
                        may_cancel: true
                        wage: '1000.0'
                        wage_type: Fixed
                        wage_total: '1100.0'
                        contractor_id: 1234
                        contractor_uuid: bc57832c-d8bc-43a7-ae99-3a03380ff037
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_id}/contractor_payments/{contractor_payment_id}:
    get:
      tags:
        - 1099 Contractors > Contractor Payments
      summary: Get a single contractor payment
      description: |-
        Returns a single contractor payments

        scope: `payrolls:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: contractor_payment_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the contractor payment
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 04552eb9-7829-4b18-ae96-6983552948df
                contractor_id: 11
                contractor_uuid: bc57832c-d8bc-43a7-ae99-3a03380ff037
                bonus: '20.0'
                date: '2020-10-19'
                hours: '40.0'
                payment_method: Direct Deposit
                reimbursement: '100.0'
                status: Unfunded
                hourly_rate: '18.0'
                may_cancel: true
                wage: '0.0'
                wage_type: Hourly
                wage_total: '740.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    delete:
      tags:
        - 1099 Contractors > Contractor Payments
      summary: Cancel a contractor payment
      description: >-
        Cancels and deletes a contractor payment. If the contractor payment has
        already started processing, the payment cannot be cancelled.


        scope: `payrolls:run`
      parameters:
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
        - name: contractor_payment_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the contractor payment
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/companies/{company_uuid}/contractor_payments/preview:
    get:
      tags:
        - 1099 Contractors > Contractor Payments
      summary: Preview contractor payment debit date
      description: >-
        Returns a debit_date dependent on the ACH payment speed of the company.


        If the payment method is Check or Historical payment, the debit_date
        will be the same as the check_date.


        scope: `payrolls:read`
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                expected_debit_date: '2022-08-16'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  check_date:
                    - type: Invalid Attribute
                      message: >-
                        You cannot issue historical payments for the future,
                        please choose a date in the past.
                      full_message: >-
                        You cannot issue historical payments for the future,
                        please choose a date in the past.
  /v1/companies/{company_id}/contractors:
    post:
      tags:
        - 1099 Contractors > Contractors
      summary: Create a contractor
      description: |-
        Create an individual or business contractor.

        scope: `contractors:manage`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: Individual
                wage_type: <string>
                start_date: <string>
                hourly_rate: <string>
                self_onboarding: false
                email: <string>
                first_name: <string>
                last_name: <string>
                middle_initial: <string>
                file_new_hire_report: false
                work_state: <string>
                ssn: <string>
                business_name: <string>
                ein: <string>
                is_active: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c9fc1ad3-c107-4e7b-aa21-2dd4b00a7a07
                id: 7757515807594512
                company_uuid: b7457fec-3b76-43bb-9c6e-69cca4688942
                company_id: 7757616923763477
                wage_type: Hourly
                start_date: '2022-01-01'
                is_active: false
                version: 63859768485e218ccf8a449bb60f14ed
                type: Individual
                first_name: Kory
                last_name: Gottlieb
                middle_initial: P
                business_name: null
                ein: null
                has_ein: false
                has_ssn: true
                department: Stage hand
                department_uuid: 56260b3d-c375-415c-b77a-75d99f717193
                email: keira.west@mckenzie.org
                file_new_hire_report: true
                work_state: FL
                onboarded: true
                onboarding_status: onboarding_completed
                address:
                  street_1: 621 Jast Row
                  street_2: Apt. 281
                  city: Coral Springs
                  state: FL
                  zip: '33065'
                  country: USA
                hourly_rate: '60.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - 1099 Contractors > Contractors
      summary: Get contractors of a company
      description: >-
        Get all contractors, active and inactive, individual and business, for a
        company.


        scope: `contractors:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: company_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: c9fc1ad3-c107-4e7b-aa21-2dd4b00a7a07
                  id: 7757515807594512
                  company_uuid: b7457fec-3b76-43bb-9c6e-69cca4688942
                  company_id: 7757616923763477
                  wage_type: Fixed
                  is_active: false
                  version: 63859768485e218ccf8a449bb60f14ed
                  type: Individual
                  first_name: Kory
                  last_name: Gottlieb
                  middle_initial: P
                  business_name: null
                  ein: null
                  has_ein: false
                  has_ssn: true
                  department: Backup Dancer
                  department_uuid: 1802465d-4f68-4865-920c-1307ab095f12
                  email: keira.west@mckenzie.org
                  start_date: '2022-01-01'
                  file_new_hire_report: false
                  work_state: null
                  onboarded: true
                  onboarding_status: contractor_onboarding_completed
                  address:
                    street_1: 621 Jast Row
                    street_2: Apt. 281
                    city: Coral Springs
                    state: FL
                    zip: '33065'
                    country: USA
                  hourly_rate: '0.00'
                - uuid: 183a86f4-a803-4b38-9357-cd9b78e2560c
                  id: 7757515807614539
                  company_uuid: afdd5d98-581b-4fc0-b988-706b7d23b2a5
                  company_id: 7757616923763477
                  wage_type: Fixed
                  is_active: true
                  version: 8aab307f1e8ed788697f8986346af559
                  type: Business
                  first_name: null
                  last_name: null
                  middle_initial: null
                  business_name: Labadie-Stroman
                  ein: XX-XXX0001
                  has_ein: true
                  has_ssn: false
                  email: jonatan@kerluke.info
                  start_date: '2022-01-01'
                  onboarded: true
                  onboarding_status: contractor_onboarding_completed
                  address:
                    street_1: 1625 Bednar Center
                    street_2: Apt. 480
                    city: Port Charlotte
                    state: FL
                    zip: '33954'
                    country: USA
                  hourly_rate: '0.00'
                  file_new_hire_report: false
                  work_state: null
                - uuid: ea1c2d65-b622-4899-bcb7-5cd0fe0232aa
                  id: 7757515807623484
                  company_uuid: 281c763d-a2ba-4f51-b9e8-b1ed61576d62
                  company_id: 7757616923763477
                  wage_type: Fixed
                  is_active: true
                  version: b48c46abfed1487b873b442334b3c4ff
                  type: Individual
                  first_name: Chanel
                  last_name: Boyle
                  middle_initial: X
                  business_name: null
                  ein: null
                  has_ein: false
                  has_ssn: true
                  email: loyal@hettinger.biz
                  file_new_hire_report: true
                  work_state: TX
                  onboarded: true
                  onboarding_status: contractor_onboarding_completed
                  address:
                    street_1: 35913 Darrick Run
                    street_2: Apt. 913
                    city: Cypress
                    state: TX
                    zip: '77433'
                    country: USA
                  hourly_rate: '0.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/contractors/{contractor_id}:
    get:
      tags:
        - 1099 Contractors > Contractors
      summary: Get a contractor
      description: |-
        Get a contractor.

        scope: `contractors:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the contractor
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c9fc1ad3-c107-4e7b-aa21-2dd4b00a7a07
                id: 7757515807594512
                company_uuid: b7457fec-3b76-43bb-9c6e-69cca4688942
                company_id: 7757616923763477
                wage_type: Hourly
                start_date: '2022-01-01'
                is_active: false
                version: 63859768485e218ccf8a449bb60f14ed
                type: Individual
                first_name: Kory
                last_name: Gottlieb
                middle_initial: P
                business_name: null
                ein: null
                has_ein: false
                has_ssn: true
                department: Stage hand
                department_uuid: 56260b3d-c375-415c-b77a-75d99f717193
                email: keira.west@mckenzie.org
                file_new_hire_report: true
                work_state: FL
                onboarded: true
                onboarding_status: onboarding_completed
                address:
                  street_1: 621 Jast Row
                  street_2: Apt. 281
                  city: Coral Springs
                  state: FL
                  zip: '33065'
                  country: USA
                hourly_rate: '60.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - 1099 Contractors > Contractors
      summary: Update a contractor
      description: >-
        Update a contractor.


        scope: `contractors:write`


        > 🚧 Warning

        >

        > Watch out when changing a contractor's type (when the contractor is
        finished onboarding). Specifically, changing contractor type can be
        dangerous since Gusto won’t recognize and file two separate 1099s if
        they simply change from business to individual
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                type: Individual
                wage_type: <string>
                start_date: <string>
                hourly_rate: <string>
                self_onboarding: false
                email: <string>
                first_name: <string>
                last_name: <string>
                middle_initial: <string>
                file_new_hire_report: false
                work_state: <string>
                ssn: <string>
                business_name: <string>
                ein: <string>
                is_active: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the contractor
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c9fc1ad3-c107-4e7b-aa21-2dd4b00a7a07
                id: 7757515807594512
                company_uuid: b7457fec-3b76-43bb-9c6e-69cca4688942
                company_id: 7757616923763477
                wage_type: Hourly
                start_date: '2022-01-01'
                is_active: false
                version: 63859768485e218ccf8a449bb60f14ed
                type: Individual
                first_name: Kory
                last_name: Gottlieb
                middle_initial: P
                business_name: null
                ein: null
                has_ein: false
                has_ssn: true
                department: Stage hand
                department_uuid: 56260b3d-c375-415c-b77a-75d99f717193
                email: keira.west@mckenzie.org
                file_new_hire_report: true
                work_state: FL
                onboarded: true
                onboarding_status: onboarding_completed
                address:
                  street_1: 621 Jast Row
                  street_2: Apt. 281
                  city: Coral Springs
                  state: FL
                  zip: '33065'
                  country: USA
                hourly_rate: '60.00'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - 1099 Contractors > Contractors
      summary: Delete a contractor
      description: |-
        A contractor can only be deleted when there are no contractor payments.

        scope: `contractors:manage`
      parameters:
        - name: contractor_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the contractor
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/contractors/{contractor_uuid}/onboarding_status:
    get:
      tags:
        - 1099 Contractors > Contractors
      summary: Get the contractor's onboarding status
      description: >-
        Retrieves a contractor's onboarding status. The data returned helps
        inform the required onboarding steps and respective completion status.


        scope: `contractors:read`


        ## onboarding_status


        ### Admin-facilitated onboarding

        | onboarding_status | Description |

        |:------------------|------------:|

        | `admin_onboarding_incomplete` | Admin needs to enter basic information
        about the contractor. |

        | `admin_onboarding_review` | All information has been completed and
        admin needs to confirm onboarding. |

        | `onboarding_completed` | Contractor has been fully onboarded and
        verified. |


        ### Contractor self-onboarding


        | onboarding_status | Description |

        | --- | ----------- |

        | `admin_onboarding_incomplete` | Admin needs to enter basic information
        about the contractor. |

        | `self_onboarding_not_invited` | Admin has the intention to invite the
        contractor to self-onboard (e.g., marking a checkbox), but the system
        has not yet sent the invitation. |

        | `self_onboarding_invited` | Contractor has been sent an invitation to
        self-onboard. |

        | `self_onboarding_started` | Contractor has started the self-onboarding
        process. |

        | `self_onboarding_review` | Admin needs to review contractors's entered
        information and confirm onboarding. |

        | `onboarding_completed` | Contractor has been fully onboarded and
        verified. |


        ## onboarding_steps


        | onboarding_steps | Requirement(s) to be completed |

        |:-----------------|-------------------------------:|

        | `basic_details` | Add individual contractor's first name, last name,
        social security number or Business name and EIN depending on the
        contractor type |

        | `add_address` | Add contractor address. |

        | `compensation_details` | Add contractor compensation. |

        | `payment_details` | Set up contractor's direct deposit or set to
        check. |

        | `sign_documents` | Contractor forms (e.g., W9) are generated & signed.
        |

        | `file_new_hire_report` | Contractor new hire report is generated. |
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: bc57832c-d8bc-43a7-ae99-3a03380ff037
                onboarding_status: admin_onboarding_incomplete
                onboarding_steps:
                  - title: Basic details
                    id: basic_details
                    required: true
                    completed: false
                    requirements: []
                  - title: Enter compensation details
                    id: compensation_details
                    required: true
                    completed: false
                    requirements: []
                  - title: Add an address
                    id: add_address
                    required: true
                    completed: false
                    requirements: []
                  - title: Payment details
                    id: payment_details
                    required: true
                    completed: false
                    requirements: []
                  - title: Sign and acknowledge documents
                    id: sign_documents
                    required: false
                    completed: false
                    requirements:
                      - basic_details,
                      - add_address
                  - title: File new hire report
                    id: file_new_hire_report
                    required: false
                    completed: false
                    requirements:
                      - basic_details
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - 1099 Contractors > Contractors
      summary: Change the contractor's onboarding status
      description: >-
        Updates a contractor's onboarding status.


        scope: `contractors:write`


        Below is a list of valid onboarding status changes depending on the
        intended action to be performed on behalf of the contractor.


        | Action | current onboarding_status | new onboarding_status |

        |:------------------|:------------:|----------:|

        | Mark a contractor as self-onboarding | `admin_onboarding_incomplete` |
        `self_onboarding_not_invited` |

        | Invite an employee to self-onboard | `admin_onboarding_incomplete` or
        `self_onboarding_not_invited` | `self_onboarding_invited` |

        | Cancel an employee's self-onboarding | `self_onboarding_invited` or
        `self_onboarding_not_invited` | `admin_onboarding_incomplete` |

        | Review an employee's self-onboarded info | `self_onboarding_started` |
        `self_onboarding_review` |

        | Finish an employee's onboarding | `admin_onboarding_incomplete` or
        `self_onboarding_review` | `onboarding_completed` |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                onboarding_status: onboarding_completed
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: bc57832c-d8bc-43a7-ae99-3a03380ff037
                onboarding_status: admin_onboarding_incomplete
                onboarding_steps:
                  - title: Basic details
                    id: basic_details
                    required: true
                    completed: false
                    requirements: []
                  - title: Enter compensation details
                    id: compensation_details
                    required: true
                    completed: false
                    requirements: []
                  - title: Add an address
                    id: add_address
                    required: true
                    completed: false
                    requirements: []
                  - title: Payment details
                    id: payment_details
                    required: true
                    completed: false
                    requirements: []
                  - title: Sign and acknowledge documents
                    id: sign_documents
                    required: false
                    completed: false
                    requirements:
                      - basic_details,
                      - add_address
                  - title: File new hire report
                    id: file_new_hire_report
                    required: false
                    completed: false
                    requirements:
                      - basic_details
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/contractors/{contractor_uuid}/address:
    get:
      tags:
        - 1099 Contractors > Contractors
      summary: Get a contractor address
      description: >-
        The address of a contractor is used to determine certain tax information
        about them. Addresses are geocoded on create and update to ensure
        validity.


        scope: `contractors:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 23323096a8015e32d9795fadf1fd300d
                contractor_uuid: 9779767c-6044-48e0-bf68-aeb370b9a2e7
                street_1: 999 Kiera Stravenue
                street_2: Suite 391
                city: San Francisco
                state: CA
                zip: 94107
                country: USA
                active: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - 1099 Contractors > Contractors
      summary: Update a contractor's address
      description: >-
        The address of a contractor is used to determine certain tax information
        about them. Addresses are geocoded on create and update to ensure
        validity.


        scope: `contractors:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                street_1: <string>
                street_2: <string>
                city: <string>
                state: <string>
                zip: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 23323096a8015e32d9795fadf1fd300d
                contractor_uuid: 9779767c-6044-48e0-bf68-aeb370b9a2e7
                street_1: 999 Kiera Stravenue
                street_2: Suite 391
                city: San Francisco
                state: CA
                zip: 94107
                country: USA
                active: true
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/contractors/{contractor_uuid}/forms:
    get:
      tags:
        - 1099 Contractors > Contractor Forms
      summary: Get all contractor forms
      description: |-
        Get a list of all contractor's forms

        scope: `contractor_forms:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                  name: US_1099
                  title: 'Form 1099: 2020'
                  description: Form 1099 records your annual income as a contractor.
                  draft: false
                  requires_signing: false
                  year: 2020
                  quarter: null
                  contractor_uuid: 123dd616-6dbc-4724-938a-403f6217a933
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/contractors/{contractor_uuid}/forms/{form_id}:
    get:
      tags:
        - 1099 Contractors > Contractor Forms
      summary: Get a contractor form
      description: |-
        Get a contractor form

        scope: `contractor_forms:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
        - name: form_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the form
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                name: US_1099
                title: 'Form 1099: 2020'
                description: Form 1099 records your annual income as a contractor.
                draft: false
                requires_signing: false
                year: 2020
                quarter: null
                contractor_uuid: 123dd616-6dbc-4724-938a-403f6217a933
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/contractors/{contractor_uuid}/forms/{form_id}/pdf:
    get:
      tags:
        - 1099 Contractors > Contractor Forms
      summary: Get the contractor form pdf
      description: |-
        Get the link to the form PDF

        scope: `contractor_forms:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the contractor
          example: <string>
        - name: form_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the form
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 48cdd5ec-a4dd-4840-a424-ad79f38d8408
                document_url: >-
                  https://app.gusto-demo.com/assets/forms/7757842065202782/original/company_direct_deposit20211007-48226-gsqo8k.pdf?1633667020
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/sandbox/generate_1099:
    post:
      tags:
        - 1099 Contractors > Contractor Forms
      summary: Generate a 1099 form
      description: |-
        > 🚧 Demo action
        >
        > This action is only available in the Demo environment

        Generates a 1099 document for testing purposes.

        scope: `contractors:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                contractor_id: <string>
                year: <integer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 29afb141-2256-431d-90e0-1c7344222342
                name: US_1099
                title: 'Form 1099: 2022'
                description: Form 1099 records your annual income as a contractor.
                draft: false
                year: 2022
                quarter: null
                requires_signing: false
                contractor_uuid: b68484a9-4487-4ee5-bafc-4245133a426c
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/tax_requirements/{state}:
    get:
      tags:
        - Tax Requirements
      summary: Get State Tax Requirements
      description: |
        Get all tax requirements for a given state.

        ### Metadata Examples

        ```json select
        {
          "type": "select",
          "options": [
            { "label": "Semiweekly",  value: "Semi-weekly" },
            { "label": "Monthly",  value: "Monthly" },
            { "label": "Quarterly",  value: "Quarterly" },
          ]
        }
        ```
        ```json radio
        {
          "type": "radio",
          "options": [
            { "label": "No, we cannot reimburse",  value: false, short_label: "Not Reimbursable" },
            { "label": "Yes, we can reimburse",  value: true, short_label: "Reimbursable" },
          ]
        }
        ```
        ```json account_number
        {
          "type": "account_number",
          "mask": "######-##',
          "prefix": null
        }
        ```
        ```json tax_rate
        {
          "type": "tax_rate",
          "validation": {
            "type": "min_max",
            "min": "0.0004",
            "max": "0.081"
          }
        }
        ```

        scope: `company_tax_requirements:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: scheduling
          in: query
          schema:
            type: string
          description: >-
            When true, return "new" requirement sets with valid `effective_from`
            dates that are available to save new effective dated values.
          example: <boolean>
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
        - name: state
          in: path
          schema:
            type: string
          required: true
          description: (Required) 2-letter US state abbreviation
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                company_uuid: 6c14eac3-0da2-474d-bda1-786b3602d381
                state: GA
                requirement_sets:
                  - state: GA
                    key: registrations
                    label: Registrations
                    effective_from: null
                    requirements:
                      - key: 71653ec0-00b5-4c66-a58b-22ecf21704c5
                        applicable_if: []
                        label: Withholding Number
                        description: >-
                          If you have run payroll in the past in GA, find your
                          withholding number on notices received from the
                          Georgia Department of Revenue, or call the agency at
                          (877) 423-6711. If you don’t have a number yet, you
                          should <a target='_blank' data-bypass
                          href='https://gtc.dor.ga.gov/_/#1'>register the
                          business online</a>. The last two characters of your
                          ID must be upper case letters.
                        value: 1233214-AB
                        metadata:
                          type: text
                      - key: 6c0911ab-5860-412e-bdef-6437cd881df5
                        applicable_if: []
                        label: DOL Account Number
                        description: >-
                          If you have run payroll in the past in GA, find your
                          DOL account number on notices received from the
                          Georgia Department of Labor, or call the agency at
                          (404) 232-3300. If you don’t have an account number
                          yet, please <a target='_blank' data-bypass
                          href='https://support.gusto.com/hc/en-us/articles/210139038#registerdol'>follow
                          the instructions here</a> to register your business
                          with the Georgia Dept. of Labor.
                        value: 474747-88
                        metadata:
                          type: text
                  - state: GA
                    key: taxrates
                    label: Tax Rates
                    effective_from: '2022-01-01'
                    requirements:
                      - key: e0ac2284-8d30-4100-ae23-f85f9574868b
                        applicable_if: []
                        label: Total Tax Rate
                        description: >-
                          Haven't received your assigned rate yet? <a
                          target='_blank' data-bypass
                          href='https://support.gusto.com/article/106622236100000/State-unemployment-insurance-(SUI)-tax'>Find
                          the new employer rate</a> and enter it here.
                        value: '0.05'
                        metadata:
                          type: tax_rate
                          validation:
                            type: min_max
                            min: '0.0004'
                            max: '0.081'
                  - state: GA
                    key: depositschedules
                    label: Deposit Schedules
                    effective_from: '2022-01-01'
                    requirements:
                      - key: 6ddfcbeb-94d3-4003-bfc2-8c6e1ca9f70c
                        applicable_if: []
                        label: Deposit Schedule
                        description: >-
                          Georgia rejects payments made on the wrong schedule.
                          GA employers receive their schedule on a registration
                          verification letter after registering with the Georgia
                          Dept. of Revenue. If you are unsure, call the agency
                          at (877) 423-6711. If you did not register your
                          business yet, please <a target='_blank' data-bypass
                          href='https://gtc.dor.ga.gov/_/#2'>register the
                          business with the Georgia Dept. of Revenue</a>.
                        value: Semi-weekly
                        metadata:
                          type: select
                          options:
                            - label: Semiweekly
                              value: Semi-weekly
                            - label: Monthly
                              value: Monthly
                            - label: Quarterly
                              value: Quarterly
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Tax Requirements
      summary: Update State Tax Requirements
      description: |-
        Update State Tax Requirements

        scope: `company_tax_requirements:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                requirement_sets:
                  - key: <string>
                    effective_from: <string>
                    state: <string>
                    requirements:
                      - key:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        value: <string>
                      - key:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        value: <string>
                  - key: <string>
                    effective_from: <string>
                    state: <string>
                    requirements:
                      - key:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        value: <string>
                      - key:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        value: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
        - name: state
          in: path
          schema:
            type: string
          required: true
          description: (Required) 2-letter US state abbreviation
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/tax_requirements:
    get:
      tags:
        - Tax Requirements
      summary: Get All Tax Requirement States
      description: >-
        Returns objects describing the states that have tax requirements for the
        company


        scope: `company_tax_requirements:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - state: CA
                  setup_complete: true
                - state: GA
                  setup_complete: false
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/payrolls/{payroll_id}/employees/{employee_id}/calculate_accruing_time_off_hours:
    post:
      tags:
        - Time Off Policies
      summary: Calculate accruing time off hours
      description: >-
        Returns a list of accruing time off for each time off policy associated
        with the employee.


        Factors affecting the accrued hours:
          * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)
          * how many hours of work during this pay period
          * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)
          * company pay schedule frequency (for per pay period)

        If none of the parameters is passed in, the accrued time off hour will
        be 0.


        scope: `payrolls:read`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                regular_hours_worked: <number>
                overtime_hours_worked: <number>
                double_overtime_hours_worked: <number>
                pto_hours_used: <number>
                sick_hours_used: <number>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: payroll_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the payroll
          example: <string>
        - name: employee_id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID or UUID of the employee
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - time_off_policy_uuid: c3a15554-f124-415d-b2c4-90b430fd8eb1
                  hours: '3.2'
                - time_off_policy_uuid: 386fc48d-52d2-4009-87b3-368f74f6b3df
                  hours: '6.0'
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/time_off_policies/{time_off_policy_uuid}:
    get:
      tags:
        - Time Off Policies
      summary: Get a time off policy
      description: |-
        Get a time off policy

        scope: `time_off_policies:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: time_off_policy_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company time off policy
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 3f746cd0-dd08-408f-b712-8180c7c621e9
                company_uuid: de83cff2-8e7a-448e-a28c-14258a9971c3
                name: Test Vacation Unlimited Policy
                policy_type: vacation
                accrual_method: unlimited
                accrual_rate: null
                accrual_rate_unit: null
                paid_out_on_termination: false
                accrual_waiting_period_days: null
                carryover_limit_hours: null
                max_accrual_hours_per_year: null
                max_hours: null
                version: f5556bce3d75ec2b62bd11990aa7993a
                is_active: true
                complete: true
                employees:
                  - uuid: 05ed3150-591e-4f8b-bfd5-55d478edd2d8
                  - uuid: 3633ce57-abb7-422f-8c5a-455566618e6a
                  - uuid: 9b37429c-e540-40fb-86b3-738ca9af65c7
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Time Off Policies
      summary: Update a time off policy
      description: |-
        Update a time off policy

        scope: `time_off_policies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: <string>
                version: <string>
                accrual_method: <string>
                accrual_rate: <float>
                accrual_rate_unit: <float>
                paid_out_on_termination: <boolean>
                accrual_waiting_period_days: <integer>
                carryover_limit_hours: <float>
                max_accrual_hours_per_year: <float>
                max_hours: <float>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: time_off_policy_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company time off policy
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 3f746cd0-dd08-408f-b712-8180c7c621e9
                company_uuid: de83cff2-8e7a-448e-a28c-14258a9971c3
                name: Unlimited Vacation Policy
                version: f5556bce3d75ec2b62bd11990aa7993a
                policy_type: vacation
                accrual_method: unlimited
                accrual_rate: null
                accrual_rate_unit: null
                paid_out_on_termination: false
                accrual_waiting_period_days: null
                carryover_limit_hours: null
                max_accrual_hours_per_year: null
                max_hours: null
                is_active: true
                complete: true
                employees: []
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/time_off_policies:
    get:
      tags:
        - Time Off Policies
      summary: Get all time off policies
      description: |-
        Get all time off policies for a company

        scope: `time_off_policies:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 3f746cd0-dd08-408f-b712-8180c7c621e9
                  company_uuid: de83cff2-8e7a-448e-a28c-14258a9971c3
                  name: Test Vacation Unlimited Policy
                  policy_type: vacation
                  accrual_method: unlimited
                  accrual_rate: null
                  accrual_rate_unit: null
                  paid_out_on_termination: false
                  accrual_waiting_period_days: null
                  carryover_limit_hours: null
                  max_accrual_hours_per_year: null
                  max_hours: null
                  version: f5556bce3d75ec2b62bd11990aa7993a
                  is_active: true
                  complete: true
                  employees:
                    - uuid: 05ed3150-591e-4f8b-bfd5-55d478edd2d8
                    - uuid: 3633ce57-abb7-422f-8c5a-455566618e6a
                    - uuid: 9b37429c-e540-40fb-86b3-738ca9af65c7
                - uuid: 2439c13f-f6d7-4a93-af8c-175fd4cc7ce8
                  company_uuid: f5f7b10d-2ddb-42f6-a955-d55320ce5316
                  name: Test Vacation Fixed Policy
                  policy_type: vacation
                  accrual_method: per_anniversary_year
                  accrual_rate: '120.0'
                  accrual_rate_unit: null
                  paid_out_on_termination: true
                  accrual_waiting_period_days: 0
                  carryover_limit_hours: '240.0'
                  max_accrual_hours_per_year: '120.0'
                  max_hours: '300.0'
                  version: f5556bce3d75ec2b62bd11990aa7993a
                  is_active: true
                  complete: true
                  employees:
                    - uuid: de7a5fb3-2e0f-460a-abbf-467fe310bf5c
                      balance: '80.0'
                    - uuid: 92af03c7-a833-43ae-bae8-f67007a59b37
                      balance: '60.0'
                - uuid: bd5f354f-12e0-4a5e-ad1f-953bb2685ad4
                  company_uuid: 6767445f-5075-4ea4-a7f5-d5b5b93d4d60
                  name: Test Vacation Hourly Policy
                  policy_type: vacation
                  accrual_method: per_hour_paid
                  accrual_rate: '4.0'
                  accrual_rate_unit: '80.0'
                  paid_out_on_termination: true
                  accrual_waiting_period_days: 30
                  carryover_limit_hours: '200.0'
                  max_accrual_hours_per_year: '120.0'
                  max_hours: '240.0'
                  version: f5556bce3d75ec2b62bd11990aa7993a
                  is_active: true
                  complete: true
                  employees:
                    - uuid: 1ea2764d-0f1a-4f09-b1d9-3006aecf63c4
                      balance: '56.0'
                    - uuid: a0db19a2-7c8f-42b4-9d4c-2e6246c3d6e8
                      balance: '84.0'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    post:
      tags:
        - Time Off Policies
      summary: Create a time off policy
      description: |-
        Create a time off policy

        scope: `time_off_policies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: <string>
                policy_type: <string>
                accrual_method: <string>
                accrual_rate: <float>
                accrual_rate_unit: <float>
                paid_out_on_termination: <boolean>
                accrual_waiting_period_days: <integer>
                carryover_limit_hours: <float>
                max_accrual_hours_per_year: <float>
                max_hours: <float>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 3f746cd0-dd08-408f-b712-8180c7c621e9
                company_uuid: de83cff2-8e7a-448e-a28c-14258a9971c3
                name: Unlimited Vacation Policy
                version: f5556bce3d75ec2b62bd11990aa7993a
                policy_type: vacation
                accrual_method: unlimited
                accrual_rate: null
                accrual_rate_unit: null
                paid_out_on_termination: false
                accrual_waiting_period_days: null
                carryover_limit_hours: null
                max_accrual_hours_per_year: null
                max_hours: null
                is_active: true
                complete: true
                employees: []
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/time_off_policies/{time_off_policy_uuid}/add_employees:
    put:
      tags:
        - Time Off Policies
      summary: Add employees to a time off policy
      description: >-
        Add employees to a time off policy. Employees are required to have at
        least one job to be added to a time off policy. Accepts starting
        balances for non-unlimited policies


        scope: `time_off_policies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                employees:
                  - uuid: <string>
                    balance: <float>
                  - uuid: <string>
                    balance: <float>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: time_off_policy_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company time off policy
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 3f746cd0-dd08-408f-b712-8180c7c621e9
                company_uuid: de83cff2-8e7a-448e-a28c-14258a9971c3
                name: test policy
                version: f5556bce3d75ec2b62bd11990aa7993a
                policy_type: vacation
                accrual_method: unlimited
                accrual_rate: null
                accrual_rate_unit: null
                paid_out_on_termination: false
                accrual_waiting_period_days: null
                carryover_limit_hours: null
                max_accrual_hours_per_year: null
                max_hours: null
                is_active: true
                complete: true
                employees:
                  - uuid: 05ed3150-591e-4f8b-bfd5-55d478edd2d8
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/time_off_policies/{time_off_policy_uuid}/remove_employees:
    put:
      tags:
        - Time Off Policies
      summary: Remove employees from a time off policy
      description: |-
        Remove employees from a time off policy

        scope: `time_off_policies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                employees:
                  - uuid: <string>
                  - uuid: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: time_off_policy_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company time off policy
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 3f746cd0-dd08-408f-b712-8180c7c621e9
                company_uuid: de83cff2-8e7a-448e-a28c-14258a9971c3
                name: test policy
                version: f5556bce3d75ec2b62bd11990aa7993a
                policy_type: vacation
                accrual_method: unlimited
                accrual_rate: null
                accrual_rate_unit: null
                paid_out_on_termination: false
                accrual_waiting_period_days: null
                carryover_limit_hours: null
                max_accrual_hours_per_year: null
                max_hours: null
                is_active: true
                complete: true
                employees:
                  - uuid: 05ed3150-591e-4f8b-bfd5-55d478edd2d8
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/time_off_policies/{time_off_policy_uuid}/balance:
    put:
      tags:
        - Time Off Policies
      summary: Update employee time off hour balances
      description: |-
        Updates time off hours balances for employees for a time off policy

        scope: `time_off_policies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                employees:
                  - uuid: <string>
                    balance: <float>
                  - uuid: <string>
                    balance: <float>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: time_off_policy_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company time off policy
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 3f746cd0-dd08-408f-b712-8180c7c621e9
                company_uuid: de83cff2-8e7a-448e-a28c-14258a9971c3
                name: test policy
                version: f5556bce3d75ec2b62bd11990aa7993a
                policy_type: vacation
                accrual_method: per_hour_paid
                accrual_rate: '4.0'
                accrual_rate_unit: '80.0'
                paid_out_on_termination: true
                accrual_waiting_period_days: 30
                carryover_limit_hours: '200.0'
                max_accrual_hours_per_year: '120.0'
                max_hours: '240.0'
                is_active: true
                complete: true
                employees:
                  - uuid: 56c672b4-3918-45cd-a3bb-a62ae0ff1307
                    balance: '54.0'
                  - uuid: 28e7a45d-32dd-4925-a82a-9a3ccc6d302c
                    balance: '80.0'
                  - uuid: f60650da-ba18-417a-b2ab-3c9b6f0fe4f2
                    balance: '26.0'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/time_off_policies/{time_off_policy_uuid}/deactivate:
    put:
      tags:
        - Time Off Policies
      summary: Deactivate a time off policy
      description: |-
        Deactivate a time off policy

        scope: `time_off_policies:write`
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: time_off_policy_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company time off policy
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 3f746cd0-dd08-408f-b712-8180c7c621e9
                company_uuid: de83cff2-8e7a-448e-a28c-14258a9971c3
                name: test policy
                version: null
                policy_type: vacation
                accrual_method: unlimited
                accrual_rate: null
                accrual_rate_unit: null
                paid_out_on_termination: false
                accrual_waiting_period_days: null
                carryover_limit_hours: null
                max_accrual_hours_per_year: null
                max_hours: null
                is_active: false
                complete: true
                employees:
                  - uuid: 05ed3150-591e-4f8b-bfd5-55d478edd2d8
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/holiday_pay_policy:
    get:
      tags:
        - Holiday Pay Policies
      summary: Get a company's holiday pay policy
      description: |-
        Get a company's holiday pay policy

        scope: `holiday_pay_policies:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 1b37938b017c7fd7116bada007072290
                company_uuid: b7845189-f12b-4378-918a-d2b9de3dc4ea
                federal_holidays:
                  new_years_day:
                    selected: false
                    name: New Year's Day
                    date: January 1
                  mlk_day:
                    selected: true
                    name: Martin Luther King, Jr. Day
                    date: Third Monday in January
                  presidents_day:
                    selected: false
                    name: Presidents' Day
                    date: Third Monday in February
                  memorial_day:
                    selected: true
                    name: Memorial Day
                    date: Last Monday in May
                  juneteenth:
                    selected: false
                    name: Juneteenth
                    date: June 19
                  independence_day:
                    selected: true
                    name: Independence Day
                    date: July 4
                  labor_day:
                    selected: false
                    name: Labor Day
                    date: First Monday in September
                  columbus_day:
                    selected: false
                    name: Columbus Day (Indigenous Peoples' Day)
                    date: Second Monday in October
                  veterans_day:
                    selected: true
                    name: Veterans Day
                    date: November 11
                  thanksgiving:
                    selected: true
                    name: Thanksgiving
                    date: Fourth Thursday in November
                  christmas_day:
                    selected: true
                    name: Christmas Day
                    date: December 25
                employees:
                  uuid: 1ca3cd25-3eda-48c6-ac88-f0e7fb91a15a
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    post:
      tags:
        - Holiday Pay Policies
      summary: Create a holiday pay policy for a company
      description: |-
        Create a holiday pay policy for a company

        scope: `holiday_pay_policies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                federal_holidays:
                  new_years_day:
                    selected: <boolean>
                  mlk_day:
                    selected: <boolean>
                  presidents_day:
                    selected: <boolean>
                  memorial_day:
                    selected: <boolean>
                  juneteenth:
                    selected: <boolean>
                  independence_day:
                    selected: <boolean>
                  labor_day:
                    selected: <boolean>
                  columbus_day:
                    selected: <boolean>
                  veterans_day:
                    selected: <boolean>
                  thanksgiving:
                    selected: <boolean>
                  christmas_day:
                    selected: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 1b37938b017c7fd7116bada007072290
                company_uuid: b7845189-f12b-4378-918a-d2b9de3dc4ea
                federal_holidays:
                  new_years_day:
                    selected: false
                    name: New Year's Day
                    date: January 1
                  mlk_day:
                    selected: true
                    name: Martin Luther King, Jr. Day
                    date: Third Monday in January
                  presidents_day:
                    selected: false
                    name: Presidents' Day
                    date: Third Monday in February
                  memorial_day:
                    selected: true
                    name: Memorial Day
                    date: Last Monday in May
                  juneteenth:
                    selected: false
                    name: Juneteenth
                    date: June 19
                  independence_day:
                    selected: true
                    name: Independence Day
                    date: July 4
                  labor_day:
                    selected: false
                    name: Labor Day
                    date: First Monday in September
                  columbus_day:
                    selected: false
                    name: Columbus Day (Indigenous Peoples' Day)
                    date: Second Monday in October
                  veterans_day:
                    selected: true
                    name: Veterans Day
                    date: November 11
                  thanksgiving:
                    selected: true
                    name: Thanksgiving
                    date: Fourth Thursday in November
                  christmas_day:
                    selected: true
                    name: Christmas Day
                    date: December 25
                employees:
                  uuid: 1ca3cd25-3eda-48c6-ac88-f0e7fb91a15a
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    put:
      tags:
        - Holiday Pay Policies
      summary: Update a company's holiday pay policy
      description: |-
        Update a company's holiday pay policy

        scope: `holiday_pay_policies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                federal_holidays:
                  new_years_day:
                    selected: <boolean>
                  mlk_day:
                    selected: <boolean>
                  presidents_day:
                    selected: <boolean>
                  memorial_day:
                    selected: <boolean>
                  juneteenth:
                    selected: <boolean>
                  independence_day:
                    selected: <boolean>
                  labor_day:
                    selected: <boolean>
                  columbus_day:
                    selected: <boolean>
                  veterans_day:
                    selected: <boolean>
                  thanksgiving:
                    selected: <boolean>
                  christmas_day:
                    selected: <boolean>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 1b37938b017c7fd7116bada007072290
                company_uuid: b7845189-f12b-4378-918a-d2b9de3dc4ea
                federal_holidays:
                  new_years_day:
                    selected: false
                    name: New Year's Day
                    date: January 1
                  mlk_day:
                    selected: true
                    name: Martin Luther King, Jr. Day
                    date: Third Monday in January
                  presidents_day:
                    selected: false
                    name: Presidents' Day
                    date: Third Monday in February
                  memorial_day:
                    selected: true
                    name: Memorial Day
                    date: Last Monday in May
                  juneteenth:
                    selected: false
                    name: Juneteenth
                    date: June 19
                  independence_day:
                    selected: true
                    name: Independence Day
                    date: July 4
                  labor_day:
                    selected: false
                    name: Labor Day
                    date: First Monday in September
                  columbus_day:
                    selected: false
                    name: Columbus Day (Indigenous Peoples' Day)
                    date: Second Monday in October
                  veterans_day:
                    selected: true
                    name: Veterans Day
                    date: November 11
                  thanksgiving:
                    selected: true
                    name: Thanksgiving
                    date: Fourth Thursday in November
                  christmas_day:
                    selected: true
                    name: Christmas Day
                    date: December 25
                employees:
                  uuid: 1ca3cd25-3eda-48c6-ac88-f0e7fb91a15a
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - Holiday Pay Policies
      summary: Delete a company's holiday pay policy
      description: |-
        Delete a company's holiday pay policy

        scope: `holiday_pay_policies:write`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/holiday_pay_policy/add:
    put:
      tags:
        - Holiday Pay Policies
      summary: Add employees to a company's holiday pay policy
      description: |-
        Add employees to a company's holiday pay policy

        scope: `holiday_pay_policies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                employees:
                  - uuid: <string>
                  - uuid: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 1b37938b017c7fd7116bada007072290
                company_uuid: b7845189-f12b-4378-918a-d2b9de3dc4ea
                federal_holidays:
                  new_years_day:
                    selected: false
                    name: New Year's Day
                    date: January 1
                  mlk_day:
                    selected: true
                    name: Martin Luther King, Jr. Day
                    date: Third Monday in January
                  presidents_day:
                    selected: false
                    name: Presidents' Day
                    date: Third Monday in February
                  memorial_day:
                    selected: true
                    name: Memorial Day
                    date: Last Monday in May
                  juneteenth:
                    selected: false
                    name: Juneteenth
                    date: June 19
                  independence_day:
                    selected: true
                    name: Independence Day
                    date: July 4
                  labor_day:
                    selected: false
                    name: Labor Day
                    date: First Monday in September
                  columbus_day:
                    selected: false
                    name: Columbus Day (Indigenous Peoples' Day)
                    date: Second Monday in October
                  veterans_day:
                    selected: true
                    name: Veterans Day
                    date: November 11
                  thanksgiving:
                    selected: true
                    name: Thanksgiving
                    date: Fourth Thursday in November
                  christmas_day:
                    selected: true
                    name: Christmas Day
                    date: December 25
                employees:
                  uuid: 1ca3cd25-3eda-48c6-ac88-f0e7fb91a15a
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/holiday_pay_policy/remove:
    put:
      tags:
        - Holiday Pay Policies
      summary: Remove employees from a company's holiday pay policy
      description: |-
        Remove employees from a company's holiday pay policy

        scope: `holiday_pay_policies:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                employees:
                  - uuid: <string>
                  - uuid: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version: 1b37938b017c7fd7116bada007072290
                company_uuid: b7845189-f12b-4378-918a-d2b9de3dc4ea
                federal_holidays:
                  new_years_day:
                    selected: false
                    name: New Year's Day
                    date: January 1
                  mlk_day:
                    selected: true
                    name: Martin Luther King, Jr. Day
                    date: Third Monday in January
                  presidents_day:
                    selected: false
                    name: Presidents' Day
                    date: Third Monday in February
                  memorial_day:
                    selected: true
                    name: Memorial Day
                    date: Last Monday in May
                  juneteenth:
                    selected: false
                    name: Juneteenth
                    date: June 19
                  independence_day:
                    selected: true
                    name: Independence Day
                    date: July 4
                  labor_day:
                    selected: false
                    name: Labor Day
                    date: First Monday in September
                  columbus_day:
                    selected: false
                    name: Columbus Day (Indigenous Peoples' Day)
                    date: Second Monday in October
                  veterans_day:
                    selected: true
                    name: Veterans Day
                    date: November 11
                  thanksgiving:
                    selected: true
                    name: Thanksgiving
                    date: Fourth Thursday in November
                  christmas_day:
                    selected: true
                    name: Christmas Day
                    date: December 25
                employees:
                  uuid: 1ca3cd25-3eda-48c6-ac88-f0e7fb91a15a
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/paid_holidays:
    get:
      tags:
        - Holiday Pay Policies
      summary: Preview a company's paid holidays
      description: |-
        Preview a company's paid holidays

        scope: `holiday_pay_policies:read`
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                holiday_key: veterans_day
                holiday_name: Veterans Day
                start_date: '2023-11-11'
                end_date: '2023-11-11'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/departments:
    post:
      tags:
        - Departments
      summary: Create a department
      description: |-
        Create a department

        scope: `departments:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                company_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                title: Stage Hand
                version: d90440dd464601d1c8f4e9e240dfb7a6
                employees:
                  - uuid: 41199375-a999-4414-9f40-d9bf596b134d
                contractors:
                  - uuid: 3488549f-60e4-494f-a34a-9d8aad3aabf5
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Departments
      summary: Get all departments of a company
      description: >-
        Get all of the departments for a given company with the employees and
        contractors assigned to that department.


        scope: `departments:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 56260b3d-c375-415c-b77a-75d99f717193
                  company_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                  title: Stage Hand
                  version: d90440dd464601d1c8f4e9e240dfb7a6
                  employees:
                    - uuid: 41199375-a999-4414-9f40-d9bf596b134d
                  contractors: []
                - uuid: ec5c8a85-3233-4f39-a9f5-fb1ab7b5f5f3
                  company_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                  title: Actors
                  version: 34f39a30b45d077cb83aed2df4810d74
                  employees:
                    - uuid: 7ee4aca1-814b-4034-b0f8-07f93cc679d1
                  contractors: []
                - uuid: 1802465d-4f68-4865-920c-1307ab095f12
                  company_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                  title: Band
                  version: 1fe3076d35ef7c97d0ae68c5f4df0acd
                  employees:
                    - uuid: a73955be-c009-44dc-915e-6246e2bdedbb
                  contractors:
                    - uuid: 3488549f-60e4-494f-a34a-9d8aad3aabf5
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/departments/{department_uuid}:
    get:
      tags:
        - Departments
      summary: Get a department
      description: |
        Get a department given the UUID

        scope: `departments:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: department_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the department
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                company_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                title: Stage Hand
                version: d90440dd464601d1c8f4e9e240dfb7a6
                employees:
                  - uuid: 41199375-a999-4414-9f40-d9bf596b134d
                contractors:
                  - uuid: 3488549f-60e4-494f-a34a-9d8aad3aabf5
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - Departments
      summary: Update a department
      description: |-
        Update a department

        scope: `departments:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                title: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: department_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the department
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                company_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                title: Stage Hand
                version: d90440dd464601d1c8f4e9e240dfb7a6
                employees:
                  - uuid: 41199375-a999-4414-9f40-d9bf596b134d
                contractors:
                  - uuid: 3488549f-60e4-494f-a34a-9d8aad3aabf5
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    delete:
      tags:
        - Departments
      summary: Delete a department
      description: >
        Delete a department. You cannot delete a department until all employees
        and contractors have been removed.


        scope: `departments:write`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: department_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the department
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/departments/{department_uuid}/add:
    put:
      tags:
        - Departments
      summary: Add people to a department
      description: |
        Add employees and contractors to a department

        scope: `departments:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                employees:
                  - uuid: <string>
                  - uuid: <string>
                contractors:
                  - uuid: <string>
                  - uuid: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: department_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the department
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                company_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                title: Stage Hand
                version: d90440dd464601d1c8f4e9e240dfb7a6
                employees:
                  - uuid: 41199375-a999-4414-9f40-d9bf596b134d
                contractors:
                  - uuid: 3488549f-60e4-494f-a34a-9d8aad3aabf5
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/departments/{department_uuid}/remove:
    put:
      tags:
        - Departments
      summary: Remove people from a department
      description: |
        Remove employees and contractors from a department

        scope: `departments:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                version: <string>
                employees:
                  - uuid: <string>
                  - uuid: <string>
                contractors:
                  - uuid: <string>
                  - uuid: <string>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: department_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the department
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 56260b3d-c375-415c-b77a-75d99f717193
                company_uuid: 7087a288-8349-4632-b92e-bc94fb79f29e
                title: Stage Hand
                version: d90440dd464601d1c8f4e9e240dfb7a6
                employees:
                  - uuid: 41199375-a999-4414-9f40-d9bf596b134d
                contractors:
                  - uuid: 3488549f-60e4-494f-a34a-9d8aad3aabf5
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/generated_documents/{document_type}/{request_uuid}:
    get:
      tags:
        - Generated Documents
      summary: Get a generated document
      description: >-
        Get a generated document given the request_uuid. The response will
        include the generation request's status and, if complete, the relevant
        document urls.


        scope: `generated_documents:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: document_type
          in: path
          schema:
            type: string
          required: true
          description: (Required) the type of document being generated
          example: <string>
        - name: request_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the Generated Document Request
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                document_urls:
                  - https://document.url.com
                request_uuid: p83d0ca8-7d41-42a9-834y-7d218ef6cb20
                status: succeeded
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/notifications/{notification_uuid}:
    get:
      tags:
        - Notifications
      summary: Get a notification's details
      description: >-
        Upon receiving a notification webhook event, use this endpoint to fetch
        the notification's details. The notification details include basic
        suggested content that can help you build notifications in your
        platform.


        Note: partners are responsible for the delivery and any custom state
        management of notifications in their application. Refer to our [partner
        notification
        guide](https://docs.gusto.com/embedded-payroll/docs/partner-notifications)
        for more details.


        scope: `notifications:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: notification_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the notification
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: 7b1d0df1-6403-4a06-8768-c1dd7d24d27a
                company_uuid: 88f7cca1-dcad-4d20-84db-7fb80303d69f
                title: >-
                  Action required: Additional information needed to process
                  payroll
                message: >-
                  If we do not receive this information as soon as possible,
                  your payroll may not be processed on time.
                status: open
                category: information_request
                actionable: true
                published_at: '2022-01-01T00:00:00.000Z'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/webhook_subscriptions:
    post:
      tags:
        - Webhooks
      summary: Create a webhook subscription
      description: >-
        Create a webhook subscription to receive events of the specified
        subscription_types whenever there is a state change.


        > 📘 Token Authentication

        >

        > This endpoint uses the [organization level api token and the Token
        scheme with HTTP Authorization
        header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).


        scope: `webhook_subscriptions:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                url: <string>
                subscription_types:
                  - <string>
                  - <string>
      security:
        - apikeyAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c5fdae57-5483-4529-9aae-f0edceed92d4
                url: https://the-partner-app.com/subscriber
                status: verified
                subscription_types:
                  - BankAccount
                  - Company
                  - CompanyBenefit
                  - Contractor
                  - ContractorPayment
                  - Employee
                  - EmployeeBenefit
                  - EmployeeJobCompensation
                  - ExternalPayroll
                  - Form
                  - Location
                  - Notification
                  - Payroll
                  - PaySchedule
                  - Signatory
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Webhooks
      summary: List webhook subscriptions
      description: >-
        Returns all webhook subscriptions associated with the provided Partner
        API token.


        > 📘 Token Authentication

        >

        > This endpoint uses the [organization level api token and the Token
        scheme with HTTP Authorization
        header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).


        scope: `webhook_subscriptions:read`
      security:
        - apikeyAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: dcceb38a-46be-4110-9d1d-1b3384c3b906
                  url: >-
                    https://6116-2603-6000-8900-3d42-58e7-f1e3-b394-1f21.ngrok.io/subscriber
                  status: pending
                  subscription_types:
                    - BankAccount
                    - Company
                    - CompanyBenefit
                    - Contractor
                    - ContractorPayment
                    - Employee
                    - EmployeeBenefit
                    - EmployeeJobCompensation
                    - ExternalPayroll
                    - Form
                    - Location
                    - Notification
                    - Payroll
                    - PaySchedule
                    - Signatory
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/webhook_subscriptions/{webhook_subscription_uuid}:
    put:
      tags:
        - Webhooks
      summary: Update a webhook subscription
      description: >
        Updates the Webhook Subscription associated with the provided UUID.


        > 📘 Token Authentication

        >

        > This endpoint uses the [organization level api token and the Token
        scheme with HTTP Authorization
        header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).


        scope: `webhook_subscriptions:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                subscription_types:
                  - <string>
                  - <string>
      security:
        - apikeyAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: webhook_subscription_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The webhook subscription UUID.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c5fdae57-5483-4529-9aae-f0edceed92d4
                url: https://the-partner-app.com/subscriber
                status: verified
                subscription_types:
                  - BankAccount
                  - Company
                  - CompanyBenefit
                  - Contractor
                  - ContractorPayment
                  - Employee
                  - EmployeeBenefit
                  - EmployeeJobCompensation
                  - ExternalPayroll
                  - Form
                  - Location
                  - Notification
                  - Payroll
                  - PaySchedule
                  - Signatory
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
    get:
      tags:
        - Webhooks
      summary: Get a webhook subscription
      description: >
        Returns the Webhook Subscription associated with the provided UUID.


        > 📘 Token Authentication

        >

        > This endpoint uses the [organization level api token and the Token
        scheme with HTTP Authorization
        header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).


        scope: `webhook_subscriptions:read`
      security:
        - apikeyAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: webhook_subscription_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The webhook subscription UUID.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c5fdae57-5483-4529-9aae-f0edceed92d4
                url: https://the-partner-app.com/subscriber
                status: verified
                subscription_types:
                  - BankAccount
                  - Company
                  - CompanyBenefit
                  - Contractor
                  - ContractorPayment
                  - Employee
                  - EmployeeBenefit
                  - EmployeeJobCompensation
                  - ExternalPayroll
                  - Form
                  - Location
                  - Notification
                  - Payroll
                  - PaySchedule
                  - Signatory
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    delete:
      tags:
        - Webhooks
      summary: Delete a webhook subscription
      description: >
        Deletes the Webhook Subscription associated with the provided UUID.


        > 📘 Token Authentication

        >

        > This endpoint uses the [organization level api token and the Token
        scheme with HTTP Authorization
        header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).


        scope: `webhook_subscriptions:write`
      security:
        - apikeyAuth: []
      parameters:
        - name: webhook_subscription_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The webhook subscription UUID.
          example: <string>
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/webhook_subscriptions/{webhook_subscription_uuid}/verify:
    put:
      tags:
        - Webhooks
      summary: Verify the webhook subscription
      description: >
        When a webhook subscription is created, a `verification_token` is POSTed
        to the registered webhook subscription URL. This `verify` endpoint needs
        to be called with `verification_token` before webhook events can be sent
        to the registered webhook URL.


        Use the
        /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token
        API to resend the `verification_token` to the Subscriber.


        > 📘 Token Authentication

        >

        > This endpoint uses the [organization level api token and the Token
        scheme with HTTP Authorization
        header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).


        scope: `webhook_subscriptions:write`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                verification_token: <string>
      security:
        - apikeyAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: webhook_subscription_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The webhook subscription UUID.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                uuid: c5fdae57-5483-4529-9aae-f0edceed92d4
                url: https://the-partner-app.com/subscriber
                status: verified
                subscription_types:
                  - BankAccount
                  - Company
                  - CompanyBenefit
                  - Contractor
                  - ContractorPayment
                  - Employee
                  - EmployeeBenefit
                  - EmployeeJobCompensation
                  - ExternalPayroll
                  - Form
                  - Location
                  - Notification
                  - Payroll
                  - PaySchedule
                  - Signatory
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token:
    get:
      tags:
        - Webhooks
      summary: Request the webhook subscription verification_token
      description: >
        Request that the webhook subscription `verification_token` be POSTed to
        the Subscription URL.


        > 📘 Token Authentication

        >

        > This endpoint uses the [organization level api token and the Token
        scheme with HTTP Authorization
        header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).


        scope: `webhook_subscriptions:read`
      security:
        - apikeyAuth: []
      parameters:
        - name: webhook_subscription_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The webhook subscription UUID.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/events:
    get:
      tags:
        - Events
      summary: Get all events
      description: >-
        Fetch all events, going back up to 30 days, that your partner
        application has the required scopes for. Note that a partner does NOT
        have to have verified webhook subscriptions in order to utilize this
        endpoint.


        > 📘 Token Authentication

        >

        > This endpoint uses the [organization level api token and the Token
        scheme with HTTP Authorization
        header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).


        scope: `events:read`
      security:
        - apikeyAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: starting_after_uuid
          in: query
          schema:
            type: string
          description: >-
            A cursor for pagination. Returns all events occuring after the
            specified UUID (exclusive)
          example: <string>
        - name: resource_uuid
          in: query
          schema:
            type: string
          description: >-
            The UUID of the company. If not specified, will return all events
            for all companies.
          example: <string>
        - name: limit
          in: query
          schema:
            type: string
          description: >-
            Limits the number of objects returned in a single response, between
            1 and 100. The default is 25
          example: <string>
        - name: event_type
          in: query
          schema:
            type: string
          description: >-
            A string containing the exact event name (e.g. `employee.created`),
            or use a wildcard match to filter for a group of events (e.g.
            `employee.*`, `*.created`, `notification.*.created` etc.)
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: f7397a24-57ad-4fae-b011-d258e8232900
                  event_type: employee.bank_account.created
                  resource_type: Company
                  resource_uuid: 92a20431-9489-4bde-ad27-6feb20b969d5
                  entity_type: BankAccount
                  entity_uuid: 92a20431-9489-4bde-ad27-6feb20b969d5
                  timestamp: 1686784995
  /v1/invoices/{invoice_period}:
    get:
      tags:
        - Invoices
      summary: Retrieve invoicing data for companies
      description: >-
        Retrieve data for active companies used to calculate invoices for Gusto
        Embedded Payroll. A company is considered active for an invoice period
        if they are an active partner managed company, have run payroll or
        created contractor payments since becoming a partner managed company,
        and are not suspended at any point during the invoice period.  This
        endpoint forces pagination, with 100 results returned at a time. You can
        learn more about our pagination here: [pagination
        guide](https://docs.gusto.com/embedded-payroll/docs/pagination) 


        > 📘 Token Authentication

        >

        > This endpoint uses the [organization level api token and the Token
        scheme with HTTP Authorization
        header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)


        scope: `invoices:read`
      security:
        - apikeyAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
          description: >-
            The page that is requested. When unspecified, will load all objects
            unless endpoint forces pagination.
          example: <number>
        - name: per
          in: query
          schema:
            type: string
          description: >-
            Number of objects per page. For majority of endpoints will default
            to 25
          example: <number>
        - name: company_uuids
          in: query
          schema:
            type: string
          description: >-
            Filter companies returned in the active_companies response, will
            return an error if company not active during provided invoice
            period. i.e.
            `?company_uuids=781922d8-e780-4b6b-bf74-ee303166d022,bbbca930-7322-491c-ba7f-98707a52a9c5`
          example: <string>
        - name: invoice_period
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The month we are calculating the invoice for. Must be in
            YYYY-MM format
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                active_companies:
                  - company_uuid: 05ed3150-591e-4f8b-bfd5-55d478edd2d8
                    active_employees: 5
                    active_contractors: 3
                    initial_invoice_period: 2022-01
                  - company_uuid: 9b37429c-e540-40fb-86b3-738ca9af65c7
                    active_employees: 0
                    active_contractors: 1
                    initial_invoice_period: 2023-05
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/recovery_cases:
    get:
      tags:
        - Recovery Cases
      summary: Get all recovery cases for a company
      description: |-
        Fetch all recovery cases for a company.

        scope: `recovery_cases:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: e83d273e-4ae9-4b61-9c71-4030c2f73093
                  company_uuid: c5e3e3e9-732f-4762-849e-20b5cec9036f
                  status: open
                  latest_error_code: R01
                  original_debit_date: '2023-10-11'
                  check_date: '2023-10-13'
                  payroll_uuid: 210f2034-fb4a-4059-b109-6c3b5efe499d
                  contractor_payment_uuids: null
                  amount_outstanding: 10499.43
                  event_total_amount: 5912.07
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /v1/recovery_cases/{recovery_case_uuid}/redebit:
    put:
      tags:
        - Recovery Cases
      summary: Initiate a redebit for a recovery case
      description: >-
        After resolving the underlying bank error, initiate a redebit for an
        open recovery case. This submission is asynchronous and a successful
        request responds with a 202 HTTP status.


        It may take up to four business days for the ACH debit to process; in
        the meantime, the status of the recovery case will be in the
        `initiated_redebit` state. When funds are successfully redebited, the
        recovery case is transitioned to the `recovered` state.


        If the company has exceeded maximum redebit attempts, or if the recovery
        case is not in a redebitable state, the response will be 422
        Unprocessable Entity.


        scope: `recovery_cases:write`
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: recovery_case_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the recovery case
          example: <string>
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - error_key: base
                    category: payroll_blocker
                    message: >-
                      Company must complete all onboarding requirements in order
                      to run payroll.
                    metadata:
                      key: needs_onboarding
  /v1/companies/{company_uuid}/ach_transactions:
    get:
      tags:
        - ACH Transactions
      summary: Get all ACH transactions for a company
      description: |-
        Fetches all ACH transactions for a company.

        scope: `ach_transactions:read`
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: contractor_payment_uuid
          in: query
          schema:
            type: string
          description: The UUID of the contractor payment
          example: <string>
        - name: payroll_uuid
          in: query
          schema:
            type: string
          description: The UUID of the payroll
          example: <string>
        - name: transaction_type
          in: query
          schema:
            type: string
          description: >-
            Used to filter the ACH transactions to only include those with a
            specific transaction type, such as "Credit employee pay".
          example: <string>
        - name: payment_direction
          in: query
          schema:
            type: string
          description: >-
            Used to filter the ACH transactions to only include those with a
            specific payment direction, either "credit" or "debit".
          example: <string>
        - name: company_uuid
          in: path
          schema:
            type: string
          required: true
          description: (Required) The UUID of the company
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - uuid: 123e4567-e89b-12d3-a456-426655440000,
                  company_uuid: 456e7890-e12b-34c5-d678-901234567890,
                  payment_event_type: Payroll,
                  payment_event_uuid: 789e0123-e45f-67ab-c890-123456789012,
                  recipient_type: Employee,
                  recipient_uuid: 012e3456-f78d-90ab-12cd-345678901234,
                  error_code: null,
                  transaction_type: Credit employee pay,
                  payment_status: submitted,
                  payment_direction: credit,
                  payment_event_check_date: 2023-10-02,
                  payment_date: 2023-10-17,
                  amount: 123.00,
                  description: PAY 380654
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
